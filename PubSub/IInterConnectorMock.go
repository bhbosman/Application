// Code generated by MockGen. DO NOT EDIT.
// Source: IInterConnector.go

// Package PubSub is a generated GoMock package.
package PubSub

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIInterConnector is a mock of IInterConnector interface
type MockIInterConnector struct {
	ctrl     *gomock.Controller
	recorder *MockIInterConnectorMockRecorder
}

// MockIInterConnectorMockRecorder is the mock recorder for MockIInterConnector
type MockIInterConnectorMockRecorder struct {
	mock *MockIInterConnector
}

// NewMockIInterConnector creates a new mock instance
func NewMockIInterConnector(ctrl *gomock.Controller) *MockIInterConnector {
	mock := &MockIInterConnector{ctrl: ctrl}
	mock.recorder = &MockIInterConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIInterConnector) EXPECT() *MockIInterConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockIInterConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIInterConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIInterConnector)(nil).Close))
}

// key mocks base method
func (m *MockIInterConnector) key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "key")
	ret0, _ := ret[0].(string)
	return ret0
}

// key indicates an expected call of key
func (mr *MockIInterConnectorMockRecorder) key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "key", reflect.TypeOf((*MockIInterConnector)(nil).key))
}

// receiver mocks base method
func (m *MockIInterConnector) receiver() IKeyBucketReceiver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "receiver")
	ret0, _ := ret[0].(IKeyBucketReceiver)
	return ret0
}

// receiver indicates an expected call of receiver
func (mr *MockIInterConnectorMockRecorder) receiver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "receiver", reflect.TypeOf((*MockIInterConnector)(nil).receiver))
}

// MockIKeyBucketReceiver is a mock of IKeyBucketReceiver interface
type MockIKeyBucketReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockIKeyBucketReceiverMockRecorder
}

// MockIKeyBucketReceiverMockRecorder is the mock recorder for MockIKeyBucketReceiver
type MockIKeyBucketReceiverMockRecorder struct {
	mock *MockIKeyBucketReceiver
}

// NewMockIKeyBucketReceiver creates a new mock instance
func NewMockIKeyBucketReceiver(ctrl *gomock.Controller) *MockIKeyBucketReceiver {
	mock := &MockIKeyBucketReceiver{ctrl: ctrl}
	mock.recorder = &MockIKeyBucketReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIKeyBucketReceiver) EXPECT() *MockIKeyBucketReceiverMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockIKeyBucketReceiver) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIKeyBucketReceiverMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIKeyBucketReceiver)(nil).Close))
}

// Handle mocks base method
func (m *MockIKeyBucketReceiver) Handle(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockIKeyBucketReceiverMockRecorder) Handle(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIKeyBucketReceiver)(nil).Handle), data)
}
