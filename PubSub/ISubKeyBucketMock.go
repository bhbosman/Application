// Code generated by MockGen. DO NOT EDIT.
// Source: ISubKeyBucket.go

// Package PubSub is a generated GoMock package.
package PubSub

import (
	Messages "github.com/bhbosman/Application/Messages"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRoute is a mock of IRoute interface
type MockIRoute struct {
	ctrl     *gomock.Controller
	recorder *MockIRouteMockRecorder
}

// MockIRouteMockRecorder is the mock recorder for MockIRoute
type MockIRouteMockRecorder struct {
	mock *MockIRoute
}

// NewMockIRoute creates a new mock instance
func NewMockIRoute(ctrl *gomock.Controller) *MockIRoute {
	mock := &MockIRoute{ctrl: ctrl}
	mock.recorder = &MockIRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRoute) EXPECT() *MockIRouteMockRecorder {
	return m.recorder
}

// Key mocks base method
func (m *MockIRoute) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key
func (mr *MockIRouteMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockIRoute)(nil).Key))
}

// ReceiverDescription mocks base method
func (m *MockIRoute) ReceiverDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiverDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReceiverDescription indicates an expected call of ReceiverDescription
func (mr *MockIRouteMockRecorder) ReceiverDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiverDescription", reflect.TypeOf((*MockIRoute)(nil).ReceiverDescription))
}

// MockISubKeyBucket is a mock of ISubKeyBucket interface
type MockISubKeyBucket struct {
	ctrl     *gomock.Controller
	recorder *MockISubKeyBucketMockRecorder
}

// MockISubKeyBucketMockRecorder is the mock recorder for MockISubKeyBucket
type MockISubKeyBucketMockRecorder struct {
	mock *MockISubKeyBucket
}

// NewMockISubKeyBucket creates a new mock instance
func NewMockISubKeyBucket(ctrl *gomock.Controller) *MockISubKeyBucket {
	mock := &MockISubKeyBucket{ctrl: ctrl}
	mock.recorder = &MockISubKeyBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISubKeyBucket) EXPECT() *MockISubKeyBucketMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockISubKeyBucket) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockISubKeyBucketMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISubKeyBucket)(nil).Close))
}

// Publish mocks base method
func (m *MockISubKeyBucket) Publish(waitGroup Messages.IWaitGroup, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", waitGroup, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockISubKeyBucketMockRecorder) Publish(waitGroup, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockISubKeyBucket)(nil).Publish), waitGroup, data)
}

// Register mocks base method
func (m *MockISubKeyBucket) Register(receiver ISubKeyBucketReceiver) (IInterConnector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", receiver)
	ret0, _ := ret[0].(IInterConnector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockISubKeyBucketMockRecorder) Register(receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockISubKeyBucket)(nil).Register), receiver)
}

// UnRegister mocks base method
func (m *MockISubKeyBucket) UnRegister(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnRegister", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnRegister indicates an expected call of UnRegister
func (mr *MockISubKeyBucketMockRecorder) UnRegister(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegister", reflect.TypeOf((*MockISubKeyBucket)(nil).UnRegister), key)
}

// UnRegisterReceiver mocks base method
func (m *MockISubKeyBucket) UnRegisterReceiver(receiver ISubKeyBucketReceiver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnRegisterReceiver", receiver)
}

// UnRegisterReceiver indicates an expected call of UnRegisterReceiver
func (mr *MockISubKeyBucketMockRecorder) UnRegisterReceiver(receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegisterReceiver", reflect.TypeOf((*MockISubKeyBucket)(nil).UnRegisterReceiver), receiver)
}

// Routes mocks base method
func (m *MockISubKeyBucket) Routes() []IRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes")
	ret0, _ := ret[0].([]IRoute)
	return ret0
}

// Routes indicates an expected call of Routes
func (mr *MockISubKeyBucketMockRecorder) Routes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockISubKeyBucket)(nil).Routes))
}

// Count mocks base method
func (m *MockISubKeyBucket) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockISubKeyBucketMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockISubKeyBucket)(nil).Count))
}
