// Code generated by goyacc -o yacc/idl.publishGo -p IdlExpr yacc/idl.y. DO NOT EDIT.

//line yacc/idl.y:2
package yacc

import __yyfmt__ "fmt"

//line yacc/idl.y:2
//go:generate goyacc -o idl.go -p "IdlExpr" idl.y
import (
	"github.com/bhbosman/Application/goidlgenerator/DefinedTypes"
	"github.com/bhbosman/Application/goidlgenerator/TempleteTypes"
	"github.com/bhbosman/Application/goidlgenerator/interfaces"
)

//line yacc/idl.y:56
type IdlExprSymType struct {
	yys          int
	Identifier   string
	IntegerValue int64
	StringValue  string
	FloatValue   float64
	ConstValue   interfaces.IConstantValue
	BoolValue    bool

	Member                *Member
	Declarator            interfaces.IDeclarator
	DefinedType           interfaces.IDefinedType
	DefinitionDeclaration interfaces.IDefinitionDeclaration
	ScopeName             interfaces.IScopeName
	Specification         []interfaces.IDefinitionDeclaration
}

const SingleLineComment = 57346
const Identifier = 57347
const Integer_literal = 57348
const Hex_literal = 57349
const Octet_literal = 57350
const Floating_pt_literal = 57351
const Fixed_pt_literal = 57352
const Character_literal = 57353
const Wide_character_literal = 57354
const String_literal = 57355
const Wide_string_literal = 57356
const Scope = 57357
const Shl = 57358
const Shr = 57359
const Whitespace = 57360
const Rwboolean = 57361
const Rwcase = 57362
const Rwchar = 57363
const Rwconst = 57364
const Rwdefault = 57365
const Rwdouble = 57366
const Rwenum = 57367
const RwFALSE = 57368
const Rwfixed = 57369
const Rwfloat = 57370
const Rwlong = 57371
const Rwmodule = 57372
const Rwnative = 57373
const Rwoctet = 57374
const Rwsequence = 57375
const Rwshort = 57376
const Rwstring = 57377
const Rwstruct = 57378
const Rwswitch = 57379
const RwTRUE = 57380
const Rwtypedef = 57381
const Rwunsigned = 57382
const Rwunion = 57383
const Rwvoid = 57384
const Rwwchar = 57385
const Rwwstring = 57386
const Rwbitfield = 57387

var IdlExprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SingleLineComment",
	"Identifier",
	"Integer_literal",
	"Hex_literal",
	"Octet_literal",
	"Floating_pt_literal",
	"Fixed_pt_literal",
	"Character_literal",
	"Wide_character_literal",
	"String_literal",
	"Wide_string_literal",
	"Scope",
	"Shl",
	"Shr",
	"Whitespace",
	"Rwboolean",
	"Rwcase",
	"Rwchar",
	"Rwconst",
	"Rwdefault",
	"Rwdouble",
	"Rwenum",
	"RwFALSE",
	"Rwfixed",
	"Rwfloat",
	"Rwlong",
	"Rwmodule",
	"Rwnative",
	"Rwoctet",
	"Rwsequence",
	"Rwshort",
	"Rwstring",
	"Rwstruct",
	"Rwswitch",
	"RwTRUE",
	"Rwtypedef",
	"Rwunsigned",
	"Rwunion",
	"Rwvoid",
	"Rwwchar",
	"Rwwstring",
	"Rwbitfield",
	"';'",
	"'{'",
	"'}'",
	"'='",
	"'|'",
	"'^'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'~'",
	"'('",
	"')'",
	"'<'",
	"','",
	"'>'",
	"':'",
	"'['",
	"']'",
}
var IdlExprStatenames = [...]string{}

const IdlExprEofCode = 1
const IdlExprErrCode = 2
const IdlExprInitialStackSize = 16

//line yacc/idl.y:760

//line yacctab:1
var IdlExprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const IdlExprPrivate = 57344

const IdlExprLast = 373

var IdlExprAct = [...]int{

	151, 150, 221, 219, 113, 126, 127, 154, 120, 112,
	149, 117, 115, 116, 39, 119, 62, 97, 122, 143,
	3, 184, 69, 24, 2, 203, 79, 144, 75, 118,
	77, 235, 231, 175, 176, 35, 244, 30, 213, 33,
	52, 129, 212, 210, 130, 131, 132, 133, 135, 136,
	53, 179, 171, 158, 242, 240, 238, 181, 236, 181,
	224, 138, 180, 214, 141, 180, 98, 98, 98, 178,
	177, 52, 129, 137, 105, 130, 131, 132, 133, 135,
	136, 53, 104, 103, 101, 102, 93, 92, 124, 123,
	211, 202, 138, 125, 128, 166, 167, 168, 155, 164,
	165, 161, 160, 139, 137, 159, 148, 182, 52, 69,
	110, 145, 109, 69, 147, 157, 225, 215, 53, 107,
	106, 87, 48, 233, 46, 128, 27, 43, 26, 152,
	24, 42, 44, 170, 25, 49, 8, 60, 108, 21,
	169, 91, 98, 61, 7, 15, 47, 96, 140, 89,
	22, 183, 95, 16, 174, 23, 185, 63, 69, 172,
	90, 190, 173, 222, 100, 91, 223, 163, 162, 111,
	94, 9, 192, 194, 193, 199, 200, 201, 38, 206,
	197, 198, 189, 208, 187, 204, 188, 205, 67, 209,
	69, 207, 195, 196, 8, 72, 80, 21, 78, 37,
	146, 76, 7, 15, 88, 36, 86, 34, 22, 85,
	31, 16, 84, 23, 28, 216, 71, 65, 142, 99,
	156, 227, 220, 226, 229, 232, 69, 230, 228, 218,
	234, 217, 52, 186, 20, 19, 13, 237, 11, 239,
	64, 241, 53, 243, 14, 17, 48, 18, 46, 12,
	5, 43, 21, 6, 82, 42, 44, 4, 1, 49,
	81, 60, 50, 22, 52, 73, 66, 61, 23, 74,
	47, 51, 83, 70, 53, 32, 29, 41, 48, 56,
	46, 40, 52, 43, 58, 59, 57, 42, 44, 54,
	68, 49, 53, 60, 55, 134, 48, 121, 46, 61,
	52, 43, 47, 114, 45, 42, 44, 153, 10, 49,
	53, 60, 50, 0, 48, 0, 46, 61, 0, 43,
	47, 51, 0, 42, 44, 0, 0, 49, 0, 60,
	0, 0, 0, 0, 0, 61, 129, 52, 47, 130,
	131, 132, 133, 135, 136, 0, 0, 53, 0, 0,
	0, 48, 0, 46, 0, 0, 138, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 60, 0, 137, 0,
	0, 0, 61,
}
var IdlExprPact = [...]int{

	114, -1000, 114, -1000, 88, 82, 80, 209, 277, -1000,
	-1000, -1000, -1000, -1000, -1000, 152, 227, -1000, -1000, -1000,
	-1000, 207, 204, 201, -1000, -1000, -1000, -1000, 74, 199,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 134,
	-1000, -1000, -1000, -1000, 136, -1000, -1000, -1000, -1000, -1000,
	26, 25, -1000, 165, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 118, -1000, -1000, -1000, 159, 159, 159, -1000, 134,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 22, 21, 13, 73, 72, 101, 114, 61, 164,
	-1000, -1000, 35, 35, -1000, -1000, 119, 2, -1000, -1000,
	-38, 2, 2, 295, 35, 152, 152, 259, 39, 172,
	35, -1000, -10, -1000, 55, 51, 49, 151, 46, 40,
	-1000, 66, -1000, -1000, -1000, -1000, 134, -1000, 35, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -11,
	-1000, 159, -38, -1000, 35, -29, -1000, 8, 7, 3,
	-5, 58, 103, -1000, 152, 332, -1000, -1000, -1000, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, -1000,
	31, -1000, 2, -1000, -41, 35, -1000, 35, 152, -1000,
	152, 152, 330, -1000, 295, -3, 30, -1000, -1000, -1000,
	134, 112, 51, 49, 151, 46, 46, 40, 40, -1000,
	-1000, -1000, -1000, -1000, -21, -25, 1, 0, -5, -1000,
	-1000, 70, -1000, -1000, 152, 143, -2, 68, -1000, 143,
	295, 143, 35, -32, 152, -1000, -1000, 77, 152, -1000,
	-33, -1000, -4, -1000, -5, -1000, 152, -6, 152, -7,
	152, -8, 152, -27, -1000,
}
var IdlExprPgo = [...]int{

	0, 0, 308, 6, 18, 9, 4, 303, 12, 13,
	11, 29, 15, 8, 297, 295, 21, 7, 294, 200,
	201, 290, 289, 30, 198, 28, 26, 196, 286, 285,
	284, 281, 279, 277, 5, 276, 275, 273, 269, 266,
	199, 178, 265, 258, 20, 24, 257, 253, 250, 249,
	247, 245, 171, 244, 240, 238, 1, 17, 10, 236,
	235, 234, 233, 231, 229, 3, 222, 221, 2, 219,
	218, 19,
}
var IdlExprR1 = [...]int{

	0, 43, 45, 45, 44, 44, 44, 46, 34, 34,
	34, 48, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 11, 11, 11, 12, 12, 12, 12, 13,
	13, 14, 14, 14, 4, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 15, 15, 5, 47, 47,
	47, 17, 19, 19, 21, 21, 21, 21, 21, 21,
	20, 20, 20, 25, 25, 31, 31, 31, 22, 18,
	32, 33, 33, 33, 28, 30, 29, 23, 24, 26,
	27, 39, 39, 39, 39, 39, 38, 37, 37, 40,
	40, 41, 41, 42, 36, 52, 52, 52, 49, 49,
	51, 51, 16, 16, 50, 59, 59, 60, 62, 62,
	62, 62, 63, 64, 64, 65, 66, 66, 68, 68,
	67, 61, 53, 58, 58, 69, 70, 70, 71, 2,
	1, 55, 54, 54, 54, 57, 57, 57, 56, 56,
	56,
}
var IdlExprR2 = [...]int{

	0, 1, 1, 2, 2, 2, 2, 5, 1, 2,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	3, 3, 1, 3, 3, 1, 3, 3, 3, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 18, 6, 4, 4,
	1, 4, 1, 6, 1, 1, 1, 1, 1, 1,
	5, 4, 3, 2, 2, 1, 1, 9, 1, 1,
	1, 1, 1, 1, 2, 3, 1, 2, 3, 2,
	2, 2, 5, 1, 3, 2, 1, 2, 3, 2,
	1, 2, 2, 2, 2, 1, 1, 3, 3, 1,
	3,
}
var IdlExprChk = [...]int{

	-1000, -43, -45, -44, -46, -48, -47, 30, 22, -52,
	-2, -55, -49, -59, -53, 31, 39, -51, -50, -60,
	-61, 25, 36, 41, -44, 46, 46, 46, 5, -35,
	-25, -20, -36, -23, -24, -26, -27, -40, -41, -34,
	-31, -33, 28, 24, 29, 27, 21, 43, 19, 32,
	35, 44, 5, 15, -22, -18, -32, -28, -30, -29,
	34, 40, -1, 5, -54, -19, -39, -52, -21, -34,
	-37, -40, -41, -42, -38, -25, -20, -23, -24, -26,
	-27, 33, 27, 45, 5, 5, 5, 47, 5, 15,
	24, 29, 61, 61, 5, 34, 29, -57, -1, -69,
	5, -57, -57, 61, 61, 61, 47, 47, 37, -45,
	49, 5, -5, -6, -7, -8, -9, -10, -11, -12,
	-13, -14, -4, 54, 53, 58, -34, -3, 59, 6,
	9, 10, 11, 12, -15, 13, 14, 38, 26, -5,
	29, 62, -70, -71, 65, -17, -19, -5, -1, -58,
	-56, -1, -16, 48, -17, 59, 48, -6, 63, 50,
	51, 52, 17, 16, 53, 54, 55, 56, 57, -4,
	-6, 63, -57, -71, -5, 62, 63, 62, 62, 48,
	62, 62, 49, 48, -16, -56, -62, -25, -23, -26,
	-34, 29, -8, -9, -10, -11, -11, -12, -12, -13,
	-13, -13, 60, 66, -5, -5, -1, -58, -56, -3,
	46, 60, 63, 63, 62, 47, -1, -63, -64, -65,
	-66, -68, 20, 23, 62, 48, -65, -67, -17, -68,
	-6, 64, -1, 46, -56, 64, 62, -1, 62, -1,
	62, -1, 62, -1, 63,
}
var IdlExprDef = [...]int{

	0, -2, 1, 2, 0, 0, 0, 0, 0, 58,
	59, 60, 105, 106, 107, 0, 0, 108, 109, 115,
	116, 0, 0, 0, 3, 4, 5, 6, 0, 0,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	73, 74, 70, 71, 79, 104, 87, 88, 89, 90,
	100, 102, 8, 0, 75, 76, 77, 81, 82, 83,
	78, 0, 139, 140, 141, 0, 0, 0, 62, 63,
	91, 92, 93, 94, 95, 64, 65, 66, 67, 68,
	69, 0, 0, 0, 0, 114, 131, 0, 0, 0,
	72, 80, 0, 0, 9, 84, 85, 142, 145, 146,
	140, 143, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 10, 0, 57, 22, 23, 25, 27, 29, 32,
	35, 0, 40, 41, 42, 43, 44, 45, 0, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 0,
	86, 0, 135, 136, 0, 0, 61, 0, 0, 0,
	133, 149, 0, 111, 0, 0, 7, 11, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 101, 147, 137, 0, 0, 98, 0, 0, 132,
	0, 0, 0, 110, 113, 0, 0, 118, 119, 120,
	121, 79, 24, 26, 28, 30, 31, 33, 34, 36,
	37, 38, 46, 138, 0, 0, 0, 134, 150, 148,
	112, 0, 97, 103, 0, 0, 0, 0, 122, 123,
	0, 126, 0, 0, 0, 117, 124, 0, 0, 127,
	0, 129, 0, 125, 130, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 96,
}
var IdlExprTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 57, 52, 3,
	59, 60, 55, 53, 62, 54, 3, 56, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 64, 46,
	61, 49, 63, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 65, 3, 66, 51, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 47, 50, 48, 58,
}
var IdlExprTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45,
}
var IdlExprTok3 = [...]int{
	0,
}

var IdlExprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	IdlExprDebug        = 0
	IdlExprErrorVerbose = false
)

type IdlExprLexer interface {
	Lex(lval *IdlExprSymType) int
	Error(s string)
}

type IdlExprParser interface {
	Parse(IdlExprLexer) int
	Lookahead() int
}

type IdlExprParserImpl struct {
	lval  IdlExprSymType
	stack [IdlExprInitialStackSize]IdlExprSymType
	char  int
}

func (p *IdlExprParserImpl) Lookahead() int {
	return p.char
}

func IdlExprNewParser() IdlExprParser {
	return &IdlExprParserImpl{}
}

const IdlExprFlag = -1000

func IdlExprTokname(c int) string {
	if c >= 1 && c-1 < len(IdlExprToknames) {
		if IdlExprToknames[c-1] != "" {
			return IdlExprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func IdlExprStatname(s int) string {
	if s >= 0 && s < len(IdlExprStatenames) {
		if IdlExprStatenames[s] != "" {
			return IdlExprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func IdlExprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !IdlExprErrorVerbose {
		return "syntax error"
	}

	for _, e := range IdlExprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + IdlExprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := IdlExprPact[state]
	for tok := TOKSTART; tok-1 < len(IdlExprToknames); tok++ {
		if n := base + tok; n >= 0 && n < IdlExprLast && IdlExprChk[IdlExprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if IdlExprDef[state] == -2 {
		i := 0
		for IdlExprExca[i] != -1 || IdlExprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; IdlExprExca[i] >= 0; i += 2 {
			tok := IdlExprExca[i]
			if tok < TOKSTART || IdlExprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if IdlExprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += IdlExprTokname(tok)
	}
	return res
}

func IdlExprlex1(lex IdlExprLexer, lval *IdlExprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = IdlExprTok1[0]
		goto out
	}
	if char < len(IdlExprTok1) {
		token = IdlExprTok1[char]
		goto out
	}
	if char >= IdlExprPrivate {
		if char < IdlExprPrivate+len(IdlExprTok2) {
			token = IdlExprTok2[char-IdlExprPrivate]
			goto out
		}
	}
	for i := 0; i < len(IdlExprTok3); i += 2 {
		token = IdlExprTok3[i+0]
		if token == char {
			token = IdlExprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = IdlExprTok2[1] /* unknown char */
	}
	if IdlExprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", IdlExprTokname(token), uint(char))
	}
	return char, token
}

func IdlExprParse(IdlExprlex IdlExprLexer) int {
	return IdlExprNewParser().Parse(IdlExprlex)
}

func (IdlExprrcvr *IdlExprParserImpl) Parse(IdlExprlex IdlExprLexer) int {
	var IdlExprn int
	var IdlExprVAL IdlExprSymType
	var IdlExprDollar []IdlExprSymType
	_ = IdlExprDollar // silence set and not used
	IdlExprS := IdlExprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	IdlExprstate := 0
	IdlExprrcvr.char = -1
	IdlExprtoken := -1 // IdlExprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		IdlExprstate = -1
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
	}()
	IdlExprp := -1
	goto IdlExprstack

ret0:
	return 0

ret1:
	return 1

IdlExprstack:
	/* put a state and value onto the stack */
	if IdlExprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", IdlExprTokname(IdlExprtoken), IdlExprStatname(IdlExprstate))
	}

	IdlExprp++
	if IdlExprp >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprS[IdlExprp] = IdlExprVAL
	IdlExprS[IdlExprp].yys = IdlExprstate

IdlExprnewstate:
	IdlExprn = IdlExprPact[IdlExprstate]
	if IdlExprn <= IdlExprFlag {
		goto IdlExprdefault /* simple state */
	}
	if IdlExprrcvr.char < 0 {
		IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
	}
	IdlExprn += IdlExprtoken
	if IdlExprn < 0 || IdlExprn >= IdlExprLast {
		goto IdlExprdefault
	}
	IdlExprn = IdlExprAct[IdlExprn]
	if IdlExprChk[IdlExprn] == IdlExprtoken { /* valid shift */
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
		IdlExprVAL = IdlExprrcvr.lval
		IdlExprstate = IdlExprn
		if Errflag > 0 {
			Errflag--
		}
		goto IdlExprstack
	}

IdlExprdefault:
	/* default state action */
	IdlExprn = IdlExprDef[IdlExprstate]
	if IdlExprn == -2 {
		if IdlExprrcvr.char < 0 {
			IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if IdlExprExca[xi+0] == -1 && IdlExprExca[xi+1] == IdlExprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			IdlExprn = IdlExprExca[xi+0]
			if IdlExprn < 0 || IdlExprn == IdlExprtoken {
				break
			}
		}
		IdlExprn = IdlExprExca[xi+1]
		if IdlExprn < 0 {
			goto ret0
		}
	}
	if IdlExprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			IdlExprlex.Error(IdlExprErrorMessage(IdlExprstate, IdlExprtoken))
			Nerrs++
			if IdlExprDebug >= 1 {
				__yyfmt__.Printf("%s", IdlExprStatname(IdlExprstate))
				__yyfmt__.Printf(" saw %s\n", IdlExprTokname(IdlExprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for IdlExprp >= 0 {
				IdlExprn = IdlExprPact[IdlExprS[IdlExprp].yys] + IdlExprErrCode
				if IdlExprn >= 0 && IdlExprn < IdlExprLast {
					IdlExprstate = IdlExprAct[IdlExprn] /* simulate a shift of "error" */
					if IdlExprChk[IdlExprstate] == IdlExprErrCode {
						goto IdlExprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if IdlExprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", IdlExprS[IdlExprp].yys)
				}
				IdlExprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if IdlExprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", IdlExprTokname(IdlExprtoken))
			}
			if IdlExprtoken == IdlExprEofCode {
				goto ret1
			}
			IdlExprrcvr.char = -1
			IdlExprtoken = -1
			goto IdlExprnewstate /* try again in the same state */
		}
	}

	/* reduction by production IdlExprn */
	if IdlExprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", IdlExprn, IdlExprStatname(IdlExprstate))
	}

	IdlExprnt := IdlExprn
	IdlExprpt := IdlExprp
	_ = IdlExprpt // guard against "declared and not used"

	IdlExprp -= IdlExprR2[IdlExprn]
	// IdlExprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if IdlExprp+1 >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprVAL = IdlExprS[IdlExprp+1]

	/* consult goto table to find next state */
	IdlExprn = IdlExprR1[IdlExprn]
	IdlExprg := IdlExprPgo[IdlExprn]
	IdlExprj := IdlExprg + IdlExprS[IdlExprp].yys + 1

	if IdlExprj >= IdlExprLast {
		IdlExprstate = IdlExprAct[IdlExprg]
	} else {
		IdlExprstate = IdlExprAct[IdlExprj]
		if IdlExprChk[IdlExprstate] != -IdlExprn {
			IdlExprstate = IdlExprAct[IdlExprg]
		}
	}
	// dummy call; replaced with literal code
	switch IdlExprnt {

	case 1:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:142
		{
			IdlExprVAL.Specification = AddDefinitions(IdlExprDollar[1].DefinitionDeclaration)
			context, _ := GetIdlExprContext(IdlExprlex)
			context.specification = IdlExprVAL.Specification
		}
	case 2:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:149
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 3:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:152
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
			GetLast(IdlExprVAL.DefinitionDeclaration).SetNext(IdlExprDollar[2].DefinitionDeclaration)
		}
	case 4:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:158
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 5:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:161
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 6:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:164
		{
			err := AddTypeDclToContext(IdlExprlex, IdlExprDollar[1].DefinitionDeclaration)
			if err != nil {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}

			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 7:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:174
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[4].DefinitionDeclaration
		}
	case 8:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:178
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				definitionDeclaration := lex.FindScopeName(IdlExprDollar[1].Identifier)
				if definitionDeclaration == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Value %v is not declared", IdlExprDollar[1].Identifier))
					return DefNotFound
				} else {
					IdlExprVAL.ScopeName = definitionDeclaration
				}
			} else {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure", IdlExprDollar[1].Identifier))
				return NoLex
			}
		}
	case 9:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:193
		{
			lex, err := GetIdlExprLex(IdlExprlex)
			if err == nil && lex != nil {
				IdlExprVAL.ScopeName = NewScopeName(IdlExprDollar[2].Identifier)
			} else {
				return NoLex
			}

		}
	case 10:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:202
		{
			lex, err := GetIdlExprLex(IdlExprlex)
			if err == nil && lex != nil {
				IdlExprVAL.ScopeName = NewScopeName(IdlExprDollar[1].ScopeName.GetName() + IdlExprDollar[3].Identifier)
			} else {
				return NoLex
			}

		}
	case 11:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:212
		{
			IdlExprVAL.DefinitionDeclaration = Newconst_dcl()
		}
	case 12:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:216
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 13:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:219
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 14:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:222
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 15:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:225
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 16:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:228
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 17:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:231
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 18:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:234
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 19:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:237
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 20:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:240
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 21:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:243
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].ScopeName
		}
	case 22:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:249
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 23:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:254
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 24:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:258
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 25:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:263
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 26:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:266
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 27:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:271
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 28:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:274
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 29:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:280
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 30:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:283
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 31:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:286
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 32:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:291
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 33:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:294
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue + IdlExprDollar[3].IntegerValue
		}
	case 34:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:297
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue - IdlExprDollar[3].IntegerValue
		}
	case 35:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:302
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 36:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:305
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue * IdlExprDollar[3].IntegerValue
		}
	case 37:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:308
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue / IdlExprDollar[3].IntegerValue
		}
	case 38:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:311
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue % IdlExprDollar[3].IntegerValue
		}
	case 39:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:316
		{
			value, ok := IdlExprDollar[2].ConstValue.Value().(int64)
			if ok {
				IdlExprVAL.IntegerValue = value
			} else {
				SendError(IdlExprlex, "Value must be an integer (int64)")
				return ErrorMustbeAnInt
			}
		}
	case 40:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:325
		{
			value, ok := IdlExprDollar[1].ConstValue.Value().(int64)
			if ok {
				IdlExprVAL.IntegerValue = value
			} else {
				SendError(IdlExprlex, "Value must be an integer (int64)")
				return ErrorMustbeAnInt
			}
		}
	case 41:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:336
		{
			IdlExprVAL.IntegerValue = -1
		}
	case 42:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:339
		{
			IdlExprVAL.IntegerValue = 0
		}
	case 43:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:343
		{
			IdlExprVAL.IntegerValue = 99
		}
	case 44:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:348
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				data := lex.FindScopeName(IdlExprDollar[1].ScopeName.GetName())
				if data == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Could not find defined value %v", IdlExprDollar[1].ScopeName.GetName()))
					return 10003
				}
			} else {
				IdlExprlex.Error("Could not find lex")
				return NoLex
			}
		}
	case 45:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:361
		{
			IdlExprVAL.ConstValue = IdlExprDollar[1].ConstValue
		}
	case 46:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:364
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[2].IntegerValue)
		}
	case 47:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:369
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].IntegerValue)
		}
	case 48:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:372
		{
			IdlExprVAL.ConstValue = nil
		}
	case 49:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:375
		{
			IdlExprVAL.ConstValue = nil
		}
	case 50:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:378
		{
			IdlExprVAL.ConstValue = newConstantValue(IdlExprDollar[1].StringValue, 1)
		}
	case 51:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:381
		{
			IdlExprVAL.ConstValue = newConstantValue(IdlExprDollar[1].StringValue, 1)
		}
	case 52:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:384
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].BoolValue)
		}
	case 53:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:387
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].StringValue)
		}
	case 54:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:390
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].StringValue)
		}
	case 55:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:395
		{
			IdlExprVAL.BoolValue = true
		}
	case 56:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:398
		{
			IdlExprVAL.BoolValue = false
		}
	case 58:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:405
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 59:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:408
		{
			nativeDecl := NewNativeDeclaration(IdlExprDollar[1].Identifier)
			IdlExprVAL.DefinitionDeclaration = nativeDecl
		}
	case 60:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:412
		{

			if typeDecl, ok := IdlExprDollar[1].DefinitionDeclaration.(interfaces.ITypeDeclaration); ok {
				err := AddTypedefDcl(IdlExprlex, typeDecl)
				if err != nil {
					SendError(IdlExprlex, "AddTypedefDcl error")
					return ErrorOnAddTypedefDcl
				}
			} else {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}

		}
	case 61:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:427
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 62:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:431
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 63:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:434
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].ScopeName
		}
	case 64:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:438
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 65:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:441
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 66:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:444
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 67:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:447
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 68:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:450
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 69:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:453
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 70:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:457
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewFloatType()
		}
	case 71:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:460
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewDoubleType()
		}
	case 72:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:463
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewLongDoubleType()
		}
	case 73:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:467
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 74:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:470
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 75:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:474
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 76:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:477
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 77:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:480
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 78:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:484
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewSignedShortType()
		}
	case 79:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:488
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewSignedLongType()
		}
	case 80:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:492
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewSignedLongLongType()
		}
	case 81:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:497
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 82:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:500
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 83:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:503
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 84:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:508
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewUnSignedShortType()
		}
	case 85:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:512
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewUnsignedLongType()
		}
	case 86:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:516
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewUnsignedLongLongType()
		}
	case 87:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:521
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewCharType()
		}
	case 88:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:526
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewWideCharType()
		}
	case 89:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:530
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewBooleanType()
		}
	case 90:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:535
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewOctetType()
		}
	case 91:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:540
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 92:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:543
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 93:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:546
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 94:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:549
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 95:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:552
		{
		}
	case 96:
		IdlExprDollar = IdlExprS[IdlExprpt-18 : IdlExprpt+1]
//line yacc/idl.y:556
		{
			IdlExprVAL.DefinedType = NewBitField(IdlExprDollar[3].Identifier, IdlExprDollar[5].Identifier, IdlExprDollar[7].Identifier, IdlExprDollar[9].Identifier, IdlExprDollar[11].Identifier, IdlExprDollar[13].Identifier, IdlExprDollar[15].Identifier, IdlExprDollar[17].Identifier)
		}
	case 97:
		IdlExprDollar = IdlExprS[IdlExprpt-6 : IdlExprpt+1]
//line yacc/idl.y:562
		{
			IdlExprVAL.DefinedType = TempleteTypes.NewSequenceType(IdlExprDollar[3].DefinedType, IdlExprDollar[5].IntegerValue)
		}
	case 98:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:565
		{
			IdlExprVAL.DefinedType = TempleteTypes.NewSequenceType(IdlExprDollar[3].DefinedType, -1)
		}
	case 99:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:570
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewStringType(IdlExprDollar[3].IntegerValue)
		}
	case 100:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:574
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewStringType(-1)
		}
	case 101:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:579
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewWideStringType(IdlExprDollar[3].IntegerValue)
		}
	case 102:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:582
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewWideStringType(-1)
		}
	case 103:
		IdlExprDollar = IdlExprS[IdlExprpt-6 : IdlExprpt+1]
//line yacc/idl.y:588
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewFixedType()
		}
	case 104:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:593
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewFixedType()
		}
	case 105:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:598
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 106:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:601
		{
			IdlExprVAL.DefinitionDeclaration = Newunion_dcl()
		}
	case 107:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:604
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 108:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:612
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration

		}
	case 109:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:616
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 110:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:622
		{
			def := NewStructDefinition(IdlExprDollar[2].Identifier)
			member := IdlExprDollar[4].Member
			for member != nil {
				decl := member.Declarator
				for decl != nil {
					def.AddMember(member.DefinedType, decl)
					decl = decl.Next()
				}
				member = member.Next
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 111:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:635
		{
			def := NewStructDefinition(IdlExprDollar[2].Identifier)
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 112:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:642
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator, nil)
		}
	case 113:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:645
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].Member.DefinedType, IdlExprDollar[1].Member.Declarator, IdlExprDollar[2].Member)
		}
	case 114:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:652
		{
			IdlExprVAL.DefinitionDeclaration = Newstruct_forward_dcl()
		}
	case 132:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:667
		{
			def := NewEnumDcl(IdlExprDollar[2].Identifier)
			decl := IdlExprDollar[4].Declarator
			for decl != nil {
				def.AddMember(decl)
				decl = decl.Next()
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 133:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:677
		{
		}
	case 134:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:678
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
		}
	case 135:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:684
		{

		}
	case 136:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:689
		{

		}
	case 137:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:692
		{

		}
	case 138:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:697
		{
		}
	case 139:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:701
		{
			IdlExprVAL.Identifier = IdlExprDollar[2].Identifier
		}
	case 140:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:706
		{
			IdlExprVAL.Identifier = IdlExprDollar[1].Identifier
		}
	case 141:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:711
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[2].DefinitionDeclaration
		}
	case 142:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:720
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 143:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:723
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 144:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:726
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinitionDeclaration, IdlExprDollar[2].Declarator)
		}
	case 145:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:735
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 146:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:738
		{

		}
	case 147:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:741
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	case 148:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:750
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, IdlExprDollar[3].ConstValue)
		}
	case 149:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:753
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 150:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:756
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	}
	goto IdlExprstack /* stack new state and value */
}
