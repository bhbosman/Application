// Code generated by goyacc -o yacc/idl.go -p IdlExpr yacc/idl.y. DO NOT EDIT.

//line yacc/idl.y:2
package yacc

import __yyfmt__ "fmt"

//line yacc/idl.y:2
//go:generate goyacc -o idl.go -p "IdlExpr" idl.y
import (
	"github.com/bhbosman/gofintech/goidlgenerator/DefinedTypes"
	"github.com/bhbosman/gofintech/goidlgenerator/TempleteTypes"
	"github.com/bhbosman/gofintech/goidlgenerator/interfaces"
)

//line yacc/idl.y:55
type IdlExprSymType struct {
	yys                   int
	Identifier            string
	GenericValue          interface{}
	Member                *Member
	Declarator            interfaces.IDeclarator
	DefinedType           interfaces.IDefinedType
	DefinitionDeclaration interfaces.IDefinitionDeclaration
	ScopeName             interfaces.IScopeName
	Specification         []interfaces.IDefinitionDeclaration
}

const SingleLineComment = 57346
const Identifier = 57347
const Integer_literal = 57348
const Hex_literal = 57349
const Octet_literal = 57350
const Floating_pt_literal = 57351
const Fixed_pt_literal = 57352
const Character_literal = 57353
const Wide_character_literal = 57354
const String_literal = 57355
const Wide_string_literal = 57356
const Scope = 57357
const Shl = 57358
const Shr = 57359
const Whitespace = 57360
const Rwboolean = 57361
const Rwcase = 57362
const Rwchar = 57363
const Rwconst = 57364
const Rwdefault = 57365
const Rwdouble = 57366
const Rwenum = 57367
const RwFALSE = 57368
const Rwfixed = 57369
const Rwfloat = 57370
const Rwlong = 57371
const Rwmodule = 57372
const Rwnative = 57373
const Rwoctet = 57374
const Rwsequence = 57375
const Rwshort = 57376
const Rwstring = 57377
const Rwstruct = 57378
const Rwswitch = 57379
const RwTRUE = 57380
const Rwtypedef = 57381
const Rwunsigned = 57382
const Rwunion = 57383
const Rwvoid = 57384
const Rwwchar = 57385
const Rwwstring = 57386

var IdlExprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SingleLineComment",
	"Identifier",
	"Integer_literal",
	"Hex_literal",
	"Octet_literal",
	"Floating_pt_literal",
	"Fixed_pt_literal",
	"Character_literal",
	"Wide_character_literal",
	"String_literal",
	"Wide_string_literal",
	"Scope",
	"Shl",
	"Shr",
	"Whitespace",
	"Rwboolean",
	"Rwcase",
	"Rwchar",
	"Rwconst",
	"Rwdefault",
	"Rwdouble",
	"Rwenum",
	"RwFALSE",
	"Rwfixed",
	"Rwfloat",
	"Rwlong",
	"Rwmodule",
	"Rwnative",
	"Rwoctet",
	"Rwsequence",
	"Rwshort",
	"Rwstring",
	"Rwstruct",
	"Rwswitch",
	"RwTRUE",
	"Rwtypedef",
	"Rwunsigned",
	"Rwunion",
	"Rwvoid",
	"Rwwchar",
	"Rwwstring",
	"';'",
	"'{'",
	"'}'",
	"'='",
	"'|'",
	"'^'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'~'",
	"'('",
	"')'",
	"'<'",
	"','",
	"'>'",
	"':'",
	"'['",
	"']'",
}
var IdlExprStatenames = [...]string{}

const IdlExprEofCode = 1
const IdlExprErrCode = 2
const IdlExprInitialStackSize = 16

//line yacc/idl.y:675

//line yacctab:1
var IdlExprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const IdlExprPrivate = 57344

const IdlExprLast = 365

var IdlExprAct = [...]int{

	146, 123, 110, 150, 213, 117, 109, 211, 114, 145,
	39, 116, 78, 74, 113, 115, 147, 140, 69, 95,
	112, 35, 30, 119, 179, 3, 2, 76, 24, 198,
	141, 225, 62, 222, 171, 172, 33, 207, 206, 204,
	174, 52, 126, 167, 154, 127, 128, 129, 130, 132,
	133, 53, 176, 175, 175, 176, 138, 173, 102, 101,
	91, 90, 135, 205, 197, 162, 163, 164, 151, 160,
	161, 52, 126, 157, 134, 127, 128, 129, 130, 132,
	133, 53, 96, 96, 96, 156, 99, 100, 121, 120,
	155, 177, 135, 122, 125, 107, 216, 208, 136, 104,
	103, 85, 223, 69, 134, 142, 69, 27, 8, 144,
	153, 21, 106, 26, 25, 105, 7, 15, 94, 89,
	137, 88, 22, 93, 125, 16, 89, 23, 166, 148,
	9, 214, 24, 152, 215, 8, 159, 158, 21, 38,
	87, 63, 165, 7, 15, 37, 143, 67, 170, 22,
	69, 180, 16, 185, 23, 96, 72, 169, 168, 98,
	108, 92, 71, 65, 184, 182, 189, 86, 194, 195,
	196, 188, 192, 193, 190, 191, 187, 202, 199, 183,
	200, 69, 79, 77, 203, 201, 75, 84, 83, 82,
	28, 36, 34, 139, 97, 31, 218, 212, 210, 209,
	181, 20, 19, 13, 131, 11, 64, 14, 17, 18,
	12, 52, 5, 6, 69, 4, 219, 221, 220, 217,
	224, 53, 1, 73, 66, 48, 70, 46, 32, 29,
	43, 21, 41, 81, 42, 44, 56, 40, 49, 80,
	60, 50, 22, 52, 58, 59, 61, 23, 57, 47,
	51, 54, 68, 53, 55, 118, 124, 48, 111, 46,
	10, 0, 43, 52, 0, 0, 42, 44, 0, 0,
	49, 0, 60, 53, 0, 0, 0, 48, 61, 46,
	0, 47, 43, 0, 0, 178, 42, 44, 0, 0,
	49, 0, 60, 52, 0, 0, 0, 0, 61, 0,
	0, 47, 0, 53, 0, 149, 0, 48, 0, 46,
	0, 52, 43, 0, 0, 45, 42, 44, 0, 0,
	49, 53, 60, 50, 0, 48, 0, 46, 61, 52,
	43, 47, 51, 0, 42, 44, 0, 0, 49, 53,
	60, 0, 0, 48, 0, 46, 61, 0, 0, 47,
	0, 0, 0, 186, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 61,
}
var IdlExprPact = [...]int{

	113, -1000, 113, -1000, 69, 68, 62, 185, 288, -1000,
	-1000, -1000, -1000, -1000, -1000, 136, 206, -1000, -1000, -1000,
	-1000, 184, 183, 182, -1000, -1000, -1000, -1000, 55, 162,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 125,
	-1000, -1000, -1000, -1000, 97, -1000, -1000, -1000, -1000, -1000,
	1, 0, -1000, 156, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 89, -1000, -1000, -1000, 154, 154, 154, -1000, 125,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1, -2, 54, 53, 78, 113, 47, 155, -1000, -1000,
	36, 36, -1000, -1000, 91, -5, -1000, -1000, -34, -5,
	-5, 306, 36, 136, 258, 10, 86, 36, -1000, -18,
	-1000, 41, 35, 22, 120, 17, 11, -1000, 66, -1000,
	-1000, -1000, -1000, 125, -1000, 36, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -19, -1000, 154, -34,
	-1000, 36, -27, -1000, -4, -7, -9, 43, 238, -1000,
	136, 324, -1000, -1000, -1000, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, -1000, 5, -1000, -5, -1000,
	-36, 36, -1000, 36, -1000, 136, 136, 36, -1000, 306,
	-6, 4, -1000, -1000, -1000, 125, 90, 35, 22, 120,
	17, 17, 11, 11, -1000, -1000, -1000, -1000, -1000, -24,
	-25, -8, -9, -1000, -1000, 51, -1000, -1000, 111, 49,
	-1000, 111, 306, 111, 36, -30, -1000, -1000, 57, 136,
	-1000, -32, -1000, -1000, -9, -1000,
}
var IdlExprPgo = [...]int{

	0, 16, 260, 6, 2, 258, 20, 14, 8, 256,
	15, 11, 5, 23, 255, 24, 3, 254, 146, 186,
	252, 251, 27, 183, 13, 12, 182, 248, 245, 244,
	237, 236, 232, 1, 229, 228, 226, 224, 145, 139,
	223, 222, 25, 26, 215, 213, 212, 210, 209, 208,
	130, 207, 206, 205, 0, 19, 204, 203, 202, 201,
	200, 199, 198, 7, 197, 196, 4, 9, 196, 194,
	193, 17,
}
var IdlExprR1 = [...]int{

	0, 41, 43, 43, 42, 42, 42, 44, 33, 33,
	33, 46, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 4, 5, 5, 6, 6, 7, 7, 8,
	8, 8, 10, 10, 10, 11, 11, 11, 11, 12,
	12, 14, 14, 14, 13, 13, 13, 9, 9, 9,
	9, 9, 9, 9, 9, 56, 56, 3, 45, 45,
	45, 16, 18, 18, 20, 20, 20, 20, 20, 20,
	19, 19, 19, 24, 24, 30, 30, 30, 21, 17,
	31, 32, 32, 32, 27, 29, 28, 22, 23, 25,
	26, 37, 37, 37, 37, 36, 36, 38, 38, 39,
	39, 40, 35, 50, 50, 50, 47, 47, 49, 49,
	15, 15, 48, 57, 57, 58, 60, 60, 60, 60,
	61, 62, 62, 63, 64, 64, 66, 66, 65, 59,
	51, 67, 67, 68, 69, 70, 70, 71, 2, 1,
	53, 52, 52, 52, 55, 55, 55, 54, 54, 54,
}
var IdlExprR2 = [...]int{

	0, 1, 1, 2, 2, 2, 2, 5, 1, 2,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	3, 3, 1, 3, 3, 1, 3, 3, 3, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 4, 4, 1, 4,
	1, 6, 1, 1, 1, 1, 1, 1, 5, 4,
	3, 2, 2, 1, 1, 9, 1, 1, 1, 1,
	1, 1, 2, 3, 1, 2, 3, 2, 2, 2,
	5, 1, 3, 1, 2, 1, 2, 3, 2, 1,
	2, 2, 2, 2, 1, 1, 3, 3, 1, 3,
}
var IdlExprChk = [...]int{

	-1000, -41, -43, -42, -44, -46, -45, 30, 22, -50,
	-2, -53, -47, -57, -51, 31, 39, -49, -48, -58,
	-59, 25, 36, 41, -42, 45, 45, 45, 5, -34,
	-24, -19, -35, -22, -23, -25, -26, -38, -39, -33,
	-30, -32, 28, 24, 29, 27, 21, 43, 19, 32,
	35, 44, 5, 15, -21, -17, -31, -27, -29, -28,
	34, 40, -1, 5, -52, -18, -37, -50, -20, -33,
	-36, -38, -39, -40, -24, -19, -22, -23, -25, -26,
	33, 27, 5, 5, 5, 46, 5, 15, 24, 29,
	60, 60, 5, 34, 29, -55, -1, -69, 5, -55,
	-55, 60, 60, 46, 46, 37, -43, 48, 5, -3,
	-4, -5, -6, -7, -8, -10, -11, -12, -14, -13,
	53, 52, 57, -33, -9, 58, 6, 9, 10, 11,
	12, -56, 13, 14, 38, 26, -3, 29, 61, -70,
	-71, 64, -16, -18, -3, -67, -54, -1, -15, 47,
	-16, 58, 47, -4, 62, 49, 50, 51, 17, 16,
	52, 53, 54, 55, 56, -13, -4, 62, -55, -71,
	-3, 61, 62, 61, 47, 61, 61, 48, 47, -15,
	-54, -60, -24, -22, -25, -33, 29, -6, -7, -8,
	-10, -10, -11, -11, -12, -12, -12, 59, 65, -3,
	-3, -67, -54, -3, 45, 59, 62, 62, 46, -61,
	-62, -63, -64, -66, 20, 23, 47, -63, -65, -16,
	-66, -4, 63, 45, -54, 63,
}
var IdlExprDef = [...]int{

	0, -2, 1, 2, 0, 0, 0, 0, 0, 58,
	59, 60, 103, 104, 105, 0, 0, 106, 107, 113,
	114, 0, 0, 0, 3, 4, 5, 6, 0, 0,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	73, 74, 70, 71, 79, 102, 87, 88, 89, 90,
	98, 100, 8, 0, 75, 76, 77, 81, 82, 83,
	78, 0, 138, 139, 140, 0, 0, 0, 62, 63,
	91, 92, 93, 94, 64, 65, 66, 67, 68, 69,
	0, 0, 0, 112, 129, 0, 0, 0, 72, 80,
	0, 0, 9, 84, 85, 141, 144, 145, 139, 142,
	143, 0, 0, 0, 0, 0, 0, 0, 10, 0,
	57, 22, 23, 25, 27, 29, 32, 35, 0, 40,
	41, 42, 43, 44, 45, 0, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 0, 86, 0, 134,
	135, 0, 0, 61, 0, 0, 131, 148, 0, 109,
	0, 0, 7, 11, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 99, 146, 136,
	0, 0, 96, 0, 130, 0, 0, 0, 108, 111,
	0, 0, 116, 117, 118, 119, 79, 24, 26, 28,
	30, 31, 33, 34, 36, 37, 38, 46, 137, 0,
	0, 132, 149, 147, 110, 0, 95, 101, 0, 0,
	120, 121, 0, 124, 0, 0, 115, 122, 0, 0,
	125, 0, 127, 123, 128, 126,
}
var IdlExprTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 56, 51, 3,
	58, 59, 54, 52, 61, 53, 3, 55, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 45,
	60, 48, 62, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 64, 3, 65, 50, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 46, 49, 47, 57,
}
var IdlExprTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44,
}
var IdlExprTok3 = [...]int{
	0,
}

var IdlExprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	IdlExprDebug        = 0
	IdlExprErrorVerbose = false
)

type IdlExprLexer interface {
	Lex(lval *IdlExprSymType) int
	Error(s string)
}

type IdlExprParser interface {
	Parse(IdlExprLexer) int
	Lookahead() int
}

type IdlExprParserImpl struct {
	lval  IdlExprSymType
	stack [IdlExprInitialStackSize]IdlExprSymType
	char  int
}

func (p *IdlExprParserImpl) Lookahead() int {
	return p.char
}

func IdlExprNewParser() IdlExprParser {
	return &IdlExprParserImpl{}
}

const IdlExprFlag = -1000

func IdlExprTokname(c int) string {
	if c >= 1 && c-1 < len(IdlExprToknames) {
		if IdlExprToknames[c-1] != "" {
			return IdlExprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func IdlExprStatname(s int) string {
	if s >= 0 && s < len(IdlExprStatenames) {
		if IdlExprStatenames[s] != "" {
			return IdlExprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func IdlExprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !IdlExprErrorVerbose {
		return "syntax error"
	}

	for _, e := range IdlExprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + IdlExprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := IdlExprPact[state]
	for tok := TOKSTART; tok-1 < len(IdlExprToknames); tok++ {
		if n := base + tok; n >= 0 && n < IdlExprLast && IdlExprChk[IdlExprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if IdlExprDef[state] == -2 {
		i := 0
		for IdlExprExca[i] != -1 || IdlExprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; IdlExprExca[i] >= 0; i += 2 {
			tok := IdlExprExca[i]
			if tok < TOKSTART || IdlExprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if IdlExprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += IdlExprTokname(tok)
	}
	return res
}

func IdlExprlex1(lex IdlExprLexer, lval *IdlExprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = IdlExprTok1[0]
		goto out
	}
	if char < len(IdlExprTok1) {
		token = IdlExprTok1[char]
		goto out
	}
	if char >= IdlExprPrivate {
		if char < IdlExprPrivate+len(IdlExprTok2) {
			token = IdlExprTok2[char-IdlExprPrivate]
			goto out
		}
	}
	for i := 0; i < len(IdlExprTok3); i += 2 {
		token = IdlExprTok3[i+0]
		if token == char {
			token = IdlExprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = IdlExprTok2[1] /* unknown char */
	}
	if IdlExprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", IdlExprTokname(token), uint(char))
	}
	return char, token
}

func IdlExprParse(IdlExprlex IdlExprLexer) int {
	return IdlExprNewParser().Parse(IdlExprlex)
}

func (IdlExprrcvr *IdlExprParserImpl) Parse(IdlExprlex IdlExprLexer) int {
	var IdlExprn int
	var IdlExprVAL IdlExprSymType
	var IdlExprDollar []IdlExprSymType
	_ = IdlExprDollar // silence set and not used
	IdlExprS := IdlExprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	IdlExprstate := 0
	IdlExprrcvr.char = -1
	IdlExprtoken := -1 // IdlExprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		IdlExprstate = -1
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
	}()
	IdlExprp := -1
	goto IdlExprstack

ret0:
	return 0

ret1:
	return 1

IdlExprstack:
	/* put a state and value onto the stack */
	if IdlExprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", IdlExprTokname(IdlExprtoken), IdlExprStatname(IdlExprstate))
	}

	IdlExprp++
	if IdlExprp >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprS[IdlExprp] = IdlExprVAL
	IdlExprS[IdlExprp].yys = IdlExprstate

IdlExprnewstate:
	IdlExprn = IdlExprPact[IdlExprstate]
	if IdlExprn <= IdlExprFlag {
		goto IdlExprdefault /* simple state */
	}
	if IdlExprrcvr.char < 0 {
		IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
	}
	IdlExprn += IdlExprtoken
	if IdlExprn < 0 || IdlExprn >= IdlExprLast {
		goto IdlExprdefault
	}
	IdlExprn = IdlExprAct[IdlExprn]
	if IdlExprChk[IdlExprn] == IdlExprtoken { /* valid shift */
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
		IdlExprVAL = IdlExprrcvr.lval
		IdlExprstate = IdlExprn
		if Errflag > 0 {
			Errflag--
		}
		goto IdlExprstack
	}

IdlExprdefault:
	/* default state action */
	IdlExprn = IdlExprDef[IdlExprstate]
	if IdlExprn == -2 {
		if IdlExprrcvr.char < 0 {
			IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if IdlExprExca[xi+0] == -1 && IdlExprExca[xi+1] == IdlExprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			IdlExprn = IdlExprExca[xi+0]
			if IdlExprn < 0 || IdlExprn == IdlExprtoken {
				break
			}
		}
		IdlExprn = IdlExprExca[xi+1]
		if IdlExprn < 0 {
			goto ret0
		}
	}
	if IdlExprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			IdlExprlex.Error(IdlExprErrorMessage(IdlExprstate, IdlExprtoken))
			Nerrs++
			if IdlExprDebug >= 1 {
				__yyfmt__.Printf("%s", IdlExprStatname(IdlExprstate))
				__yyfmt__.Printf(" saw %s\n", IdlExprTokname(IdlExprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for IdlExprp >= 0 {
				IdlExprn = IdlExprPact[IdlExprS[IdlExprp].yys] + IdlExprErrCode
				if IdlExprn >= 0 && IdlExprn < IdlExprLast {
					IdlExprstate = IdlExprAct[IdlExprn] /* simulate a shift of "error" */
					if IdlExprChk[IdlExprstate] == IdlExprErrCode {
						goto IdlExprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if IdlExprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", IdlExprS[IdlExprp].yys)
				}
				IdlExprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if IdlExprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", IdlExprTokname(IdlExprtoken))
			}
			if IdlExprtoken == IdlExprEofCode {
				goto ret1
			}
			IdlExprrcvr.char = -1
			IdlExprtoken = -1
			goto IdlExprnewstate /* try again in the same state */
		}
	}

	/* reduction by production IdlExprn */
	if IdlExprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", IdlExprn, IdlExprStatname(IdlExprstate))
	}

	IdlExprnt := IdlExprn
	IdlExprpt := IdlExprp
	_ = IdlExprpt // guard against "declared and not used"

	IdlExprp -= IdlExprR2[IdlExprn]
	// IdlExprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if IdlExprp+1 >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprVAL = IdlExprS[IdlExprp+1]

	/* consult goto table to find next state */
	IdlExprn = IdlExprR1[IdlExprn]
	IdlExprg := IdlExprPgo[IdlExprn]
	IdlExprj := IdlExprg + IdlExprS[IdlExprp].yys + 1

	if IdlExprj >= IdlExprLast {
		IdlExprstate = IdlExprAct[IdlExprg]
	} else {
		IdlExprstate = IdlExprAct[IdlExprj]
		if IdlExprChk[IdlExprstate] != -IdlExprn {
			IdlExprstate = IdlExprAct[IdlExprg]
		}
	}
	// dummy call; replaced with literal code
	switch IdlExprnt {

	case 1:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:134
		{
			IdlExprVAL.Specification = AddDefinitions(IdlExprDollar[1].DefinitionDeclaration)
			context, _ := GetIdlExprContext(IdlExprlex)
			context.specification = IdlExprVAL.Specification
		}
	case 2:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:141
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 3:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:144
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
			GetLast(IdlExprVAL.DefinitionDeclaration).SetNext(IdlExprDollar[2].DefinitionDeclaration)
		}
	case 4:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:150
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 5:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:153
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 6:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:156
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 7:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:160
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[4].DefinitionDeclaration
		}
	case 8:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:164
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				definitionDeclaration := lex.FindScopeName(IdlExprDollar[1].Identifier)
				if definitionDeclaration == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Value %v is not declared", IdlExprDollar[1].Identifier))
					return DefNotFound
				} else {
					IdlExprVAL.ScopeName = definitionDeclaration
				}
			} else {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure", IdlExprDollar[1].Identifier))
				return NoLex
			}
		}
	case 9:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:179
		{
			lex, err := GetIdlExprLex(IdlExprlex)
			if err == nil && lex != nil {
				IdlExprVAL.ScopeName = NewScopeName(IdlExprDollar[2].Identifier)
			} else {
				return NoLex
			}

		}
	case 10:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:188
		{
			lex, err := GetIdlExprLex(IdlExprlex)
			if err == nil && lex != nil {
				IdlExprVAL.ScopeName = NewScopeName(IdlExprDollar[1].ScopeName.GetName() + IdlExprDollar[3].Identifier)
			} else {
				return NoLex
			}

		}
	case 11:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:198
		{
			IdlExprVAL.DefinitionDeclaration = Newconst_dcl()
		}
	case 12:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:202
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 13:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:205
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 14:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:208
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 15:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:211
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 16:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:214
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 17:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:217
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 18:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:220
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 19:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:223
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 20:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:226
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 21:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:229
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].ScopeName
		}
	case 39:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:252
		{
			IdlExprVAL.GenericValue = IdlExprDollar[2].GenericValue
		}
	case 40:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:255
		{
			IdlExprVAL.GenericValue = IdlExprDollar[1].GenericValue
		}
	case 41:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:260
		{
			IdlExprVAL.GenericValue = -1
		}
	case 42:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:263
		{
			IdlExprVAL.GenericValue = 0
		}
	case 43:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:267
		{
			IdlExprVAL.GenericValue = 99
		}
	case 44:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:272
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				data := lex.FindScopeName(IdlExprDollar[1].ScopeName.GetName())
				if data == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Could not find defined value %v", IdlExprDollar[1].ScopeName.GetName()))
					return 10003
				}
			} else {
				IdlExprlex.Error("Could not find lex")
				return NoLex
			}
		}
	case 45:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:285
		{
			IdlExprVAL.GenericValue = IdlExprDollar[1].GenericValue
		}
	case 46:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:288
		{
			IdlExprVAL.GenericValue = 0
		}
	case 47:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:293
		{
			IdlExprVAL.GenericValue = IdlExprDollar[1].GenericValue
		}
	case 48:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:296
		{
			IdlExprVAL.GenericValue = nil
		}
	case 49:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:299
		{
			IdlExprVAL.GenericValue = nil
		}
	case 50:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:302
		{
			IdlExprVAL.GenericValue = nil
		}
	case 51:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:305
		{
			IdlExprVAL.GenericValue = nil
		}
	case 52:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:308
		{
			IdlExprVAL.GenericValue = nil
		}
	case 53:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:311
		{
			IdlExprVAL.GenericValue = nil
		}
	case 54:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:314
		{
			IdlExprVAL.GenericValue = nil
		}
	case 58:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:325
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 59:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:328
		{
			nativeDecl := NewNativeDeclaration(IdlExprDollar[1].Identifier)
			err := AddNativeDcl(IdlExprlex, nativeDecl)
			if err != nil {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}
			IdlExprVAL.DefinitionDeclaration = nativeDecl
		}
	case 60:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:337
		{

			if typeDecl, ok := IdlExprDollar[1].DefinitionDeclaration.(interfaces.ITypeDeclaration); ok {
				err := AddTypedefDcl(IdlExprlex, typeDecl)
				if err != nil {
					SendError(IdlExprlex, "AddTypedefDcl error")
					return ErrorOnAddTypedefDcl
				}
			} else {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}

		}
	case 61:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:352
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 62:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:356
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 63:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:359
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].ScopeName
		}
	case 64:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:363
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 65:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:366
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 66:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:369
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 67:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:372
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 68:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:375
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 69:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:378
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 70:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:382
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewFloatType()
		}
	case 71:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:385
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewDoubleType()
		}
	case 72:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:388
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewLongDoubleType()
		}
	case 73:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:392
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 74:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:395
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 75:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:399
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 76:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:402
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 77:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:405
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 78:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:409
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewSignedShortType()
		}
	case 79:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:413
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewSignedLongType()
		}
	case 80:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:417
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewSignedLongLongType()
		}
	case 81:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:422
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 82:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:425
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 83:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:428
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 84:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:433
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewUnSignedShortType()
		}
	case 85:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:437
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewUnsignedLongType()
		}
	case 86:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:441
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewUnsignedLongLongType()
		}
	case 87:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:446
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewCharType()
		}
	case 88:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:451
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewWideCharType()
		}
	case 89:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:455
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewBooleanType()
		}
	case 90:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:460
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewOctetType()
		}
	case 91:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:465
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 92:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:468
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 93:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:471
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 94:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:474
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 95:
		IdlExprDollar = IdlExprS[IdlExprpt-6 : IdlExprpt+1]
//line yacc/idl.y:479
		{
			switch val := IdlExprDollar[5].GenericValue.(type) {
			case int:
				IdlExprVAL.DefinedType = TempleteTypes.NewSequenceType(IdlExprDollar[3].DefinedType, int64(val))
				break
			case int64:
				IdlExprVAL.DefinedType = TempleteTypes.NewSequenceType(IdlExprDollar[3].DefinedType, val)
				break
			default:
				IdlExprlex.Error(__yyfmt__.Sprintf("Unexpected type. wanted int or int64. Got %v", val))
				return 10001
			}
		}
	case 96:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:492
		{
			IdlExprVAL.DefinedType = TempleteTypes.NewSequenceType(IdlExprDollar[3].DefinedType, -1)
		}
	case 97:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:497
		{
			val, ok := IdlExprDollar[3].GenericValue.(int64)
			if ok {
				IdlExprVAL.DefinedType = DefinedTypes.NewStringType(val)
			}
		}
	case 98:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:504
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewStringType(-1)
		}
	case 99:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:509
		{
			val, ok := IdlExprDollar[3].GenericValue.(int64)
			if ok {
				IdlExprVAL.DefinedType = DefinedTypes.NewWideStringType(val)
			} else {
				return 9898
			}
		}
	case 100:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:517
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewWideStringType(-1)
		}
	case 101:
		IdlExprDollar = IdlExprS[IdlExprpt-6 : IdlExprpt+1]
//line yacc/idl.y:523
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewFixedType()
		}
	case 102:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:528
		{
			IdlExprVAL.DefinedType = DefinedTypes.NewFixedType()
		}
	case 103:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:533
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 104:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:536
		{
			IdlExprVAL.DefinitionDeclaration = Newunion_dcl()
		}
	case 105:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:539
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 106:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:547
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration

		}
	case 107:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:551
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 108:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:557
		{
			def := NewStructDefinition(IdlExprDollar[2].Identifier)
			member := IdlExprDollar[4].Member
			for member != nil {
				decl := member.Declarator
				for decl != nil {
					def.AddMember(member.DefinedType, decl)
					decl = decl.Next()
				}
				member = member.Next
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 109:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:570
		{
			def := NewStructDefinition(IdlExprDollar[2].Identifier)
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 110:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:577
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator, nil)
		}
	case 111:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:580
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].Member.DefinedType, IdlExprDollar[1].Member.Declarator, IdlExprDollar[2].Member)
		}
	case 112:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:587
		{
			IdlExprVAL.DefinitionDeclaration = Newstruct_forward_dcl()
		}
	case 130:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:602
		{
			IdlExprVAL.DefinitionDeclaration = Newenum_dcl()
		}
	case 138:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:612
		{
			IdlExprVAL.Identifier = IdlExprDollar[2].Identifier
		}
	case 139:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:616
		{
			IdlExprVAL.Identifier = IdlExprDollar[1].Identifier
		}
	case 140:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:621
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[2].DefinitionDeclaration
		}
	case 141:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:630
		{
			if IdlExprDollar[1].DefinedType == nil {
				SendError(IdlExprlex, "simple_type_spec can not be nil")
				return ErrorTypeisNull
			}
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 142:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:637
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 143:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:640
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinitionDeclaration, IdlExprDollar[2].Declarator)
		}
	case 144:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:649
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 145:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:652
		{

		}
	case 146:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:655
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	case 147:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:664
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, IdlExprDollar[3].GenericValue)
		}
	case 148:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:667
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 149:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:670
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	}
	goto IdlExprstack /* stack new state and value */
}
