// Code generated by goyacc -o yacc/idl.go -p IdlExpr yacc/idl.y. DO NOT EDIT.

//line yacc/idl.y:2
package yacc

import __yyfmt__ "fmt"

//line yacc/idl.y:2
//go:generate goyacc -o idl.go -p "IdlExpr" idl.y
import (
	"github.com/bhbosman/Application/goidlgenerator/TempleteTypes"
	"github.com/bhbosman/Application/goidlgenerator/interfaces"
)

//line yacc/idl.y:69
type IdlExprSymType struct {
	yys          int
	Identifier   string
	IntegerValue int64
	StringValue  string
	FloatValue   float64
	ConstValue   interfaces.IConstantValue
	BoolValue    bool

	Member                *Member
	Declarator            interfaces.IDeclarator
	DefinedType           interfaces.IDefinedType
	DefinitionDeclaration interfaces.IDefinitionDeclaration
	Specification         []interfaces.IDefinitionDeclaration
}

const SingleLineComment = 57346
const Identifier = 57347
const Integer_literal = 57348
const Hex_literal = 57349
const Octet_literal = 57350
const Floating_pt_literal = 57351
const Fixed_pt_literal = 57352
const Character_literal = 57353
const Wide_character_literal = 57354
const String_literal = 57355
const Wide_string_literal = 57356
const Scope = 57357
const Shl = 57358
const Shr = 57359
const Whitespace = 57360
const Rwboolean = 57361
const Rwcase = 57362
const Rwchar = 57363
const Rwconst = 57364
const Rwdefault = 57365
const Rwdouble = 57366
const Rwenum = 57367
const RwFALSE = 57368
const Rwfixed = 57369
const Rwfloat = 57370
const Rwlong = 57371
const Rwmodule = 57372
const Rwnative = 57373
const Rwoctet = 57374
const Rwsequence = 57375
const Rwshort = 57376
const Rwstring = 57377
const Rwstruct = 57378
const Rwswitch = 57379
const RwTRUE = 57380
const Rwtypedef = 57381
const Rwunsigned = 57382
const Rwunion = 57383
const Rwvoid = 57384
const Rwwchar = 57385
const Rwwstring = 57386
const RwMitchAlpha = 57387
const RwMitchBitField = 57388
const RwMitchByte = 57389
const RwMitchDate = 57390
const RwMitchTime = 57391
const RwMitchPrice04 = 57392
const RwMitchPrice08 = 57393
const RwMitchUInt08 = 57394
const RwMitchUInt16 = 57395
const RwMitchUInt32 = 57396
const RwMitchUInt64 = 57397

var IdlExprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SingleLineComment",
	"Identifier",
	"Integer_literal",
	"Hex_literal",
	"Octet_literal",
	"Floating_pt_literal",
	"Fixed_pt_literal",
	"Character_literal",
	"Wide_character_literal",
	"String_literal",
	"Wide_string_literal",
	"Scope",
	"Shl",
	"Shr",
	"Whitespace",
	"Rwboolean",
	"Rwcase",
	"Rwchar",
	"Rwconst",
	"Rwdefault",
	"Rwdouble",
	"Rwenum",
	"RwFALSE",
	"Rwfixed",
	"Rwfloat",
	"Rwlong",
	"Rwmodule",
	"Rwnative",
	"Rwoctet",
	"Rwsequence",
	"Rwshort",
	"Rwstring",
	"Rwstruct",
	"Rwswitch",
	"RwTRUE",
	"Rwtypedef",
	"Rwunsigned",
	"Rwunion",
	"Rwvoid",
	"Rwwchar",
	"Rwwstring",
	"RwMitchAlpha",
	"RwMitchBitField",
	"RwMitchByte",
	"RwMitchDate",
	"RwMitchTime",
	"RwMitchPrice04",
	"RwMitchPrice08",
	"RwMitchUInt08",
	"RwMitchUInt16",
	"RwMitchUInt32",
	"RwMitchUInt64",
	"';'",
	"'{'",
	"'}'",
	"'='",
	"'|'",
	"'^'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'~'",
	"'('",
	"')'",
	"'<'",
	"'>'",
	"','",
	"':'",
	"'['",
	"']'",
}
var IdlExprStatenames = [...]string{}

const IdlExprEofCode = 1
const IdlExprErrCode = 2
const IdlExprInitialStackSize = 16

//line yacc/idl.y:991

//line yacctab:1
var IdlExprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const IdlExprPrivate = 57344

const IdlExprLast = 456

var IdlExprAct = [...]int{

	159, 158, 133, 120, 228, 230, 134, 162, 126, 157,
	124, 39, 127, 104, 123, 119, 61, 129, 122, 69,
	89, 150, 125, 212, 193, 3, 85, 87, 24, 35,
	2, 151, 244, 240, 219, 30, 33, 52, 136, 188,
	251, 137, 138, 139, 140, 142, 143, 186, 185, 249,
	247, 190, 190, 245, 189, 52, 136, 233, 145, 137,
	138, 139, 140, 142, 143, 105, 105, 105, 189, 221,
	144, 148, 187, 184, 253, 223, 145, 222, 183, 108,
	109, 179, 166, 113, 112, 111, 110, 101, 144, 100,
	220, 211, 174, 175, 176, 131, 130, 163, 172, 173,
	132, 135, 169, 168, 167, 191, 118, 234, 224, 115,
	114, 96, 153, 242, 27, 69, 26, 146, 69, 135,
	154, 25, 165, 116, 99, 103, 152, 117, 147, 156,
	102, 9, 98, 8, 149, 231, 21, 99, 232, 178,
	160, 7, 15, 24, 171, 170, 177, 22, 66, 105,
	16, 8, 23, 62, 21, 38, 37, 155, 107, 7,
	15, 97, 180, 69, 194, 22, 199, 182, 16, 164,
	23, 181, 72, 71, 64, 95, 94, 93, 28, 106,
	203, 206, 207, 202, 198, 213, 201, 208, 209, 210,
	196, 197, 217, 204, 205, 90, 69, 236, 218, 216,
	229, 214, 227, 215, 36, 226, 136, 88, 86, 137,
	138, 139, 140, 142, 143, 195, 34, 31, 20, 19,
	13, 11, 225, 63, 14, 17, 145, 18, 12, 5,
	6, 4, 69, 235, 241, 239, 238, 237, 144, 243,
	52, 1, 73, 65, 70, 32, 246, 29, 248, 41,
	250, 55, 252, 40, 48, 57, 46, 58, 56, 43,
	21, 53, 92, 42, 44, 67, 68, 49, 91, 59,
	50, 22, 54, 141, 128, 60, 23, 52, 47, 51,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 48, 121, 46, 10, 0, 43, 0, 0, 0,
	42, 44, 0, 0, 49, 0, 59, 0, 0, 0,
	0, 0, 60, 0, 0, 47, 0, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 52, 52,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 48, 46, 46, 0, 43, 0, 0,
	0, 42, 44, 200, 0, 49, 0, 59, 59, 0,
	0, 0, 0, 60, 60, 0, 47, 0, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 52,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 46, 0, 0, 43, 0,
	0, 0, 42, 44, 0, 0, 49, 0, 59, 0,
	0, 0, 0, 0, 60, 0, 52, 47, 0, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	48, 0, 46, 0, 0, 43, 0, 0, 45, 42,
	44, 0, 0, 49, 0, 59, 50, 0, 0, 0,
	0, 60, 0, 0, 47, 51,
}
var IdlExprPact = [...]int{

	129, -1000, 129, -1000, 65, 60, 58, 173, 411, -1000,
	-1000, -1000, -1000, -1000, -1000, 148, 235, -1000, -1000, -1000,
	-1000, 172, 171, 170, -1000, -1000, -1000, -1000, 54, 156,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 108, -1000, -1000, -1000, -1000, -1000,
	18, 16, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	96, -1000, -1000, -1000, 153, 153, 153, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15, 14, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13, 12, 53, 52, 86, 129, 47, -1000, -1000,
	32, 32, -1000, 99, -2, -1000, -1000, -44, -2, -2,
	32, 148, 374, 32, 148, 323, 28, 111, 32, 10,
	-1000, 44, 42, 40, 128, 35, 27, -1000, 50, -1000,
	-1000, -1000, -1000, -1000, -1000, 32, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9, -1000, 153, -44,
	-1000, 32, 6, 0, -25, -1000, -1, -19, -21, 46,
	272, -1000, 148, 324, -1000, -1000, -1000, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, -1000, 21, -1000,
	-2, -1000, -53, -1000, 148, 32, -1000, 32, -1000, 148,
	148, 200, -1000, 374, -22, 20, -1000, -1000, -1000, -1000,
	95, 42, 40, 128, 35, 35, 27, 27, -1000, -1000,
	-1000, -1000, -1000, -4, 5, 3, -5, -21, -1000, -1000,
	51, 148, -1000, -1000, 115, -16, 49, -1000, 115, 374,
	115, 32, -41, 148, -1000, -1000, 57, 148, -1000, -42,
	-1000, -20, -1000, -21, -1000, 148, -23, 148, -24, 148,
	-33, 148, 2, -1000,
}
var IdlExprPgo = [...]int{

	0, 0, 294, 6, 17, 15, 3, 292, 18, 14,
	10, 22, 8, 12, 274, 273, 24, 7, 272, 157,
	208, 266, 265, 261, 27, 207, 26, 20, 195, 258,
	257, 255, 253, 251, 249, 2, 247, 245, 244, 243,
	156, 155, 242, 241, 25, 30, 231, 230, 229, 228,
	227, 225, 131, 224, 223, 221, 1, 13, 9, 220,
	219, 218, 215, 205, 202, 4, 200, 197, 5, 179,
	134, 21,
}
var IdlExprR1 = [...]int{

	0, 43, 45, 45, 44, 44, 44, 46, 35, 48,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	6, 7, 7, 8, 8, 9, 9, 10, 10, 10,
	11, 11, 11, 12, 12, 12, 12, 13, 13, 14,
	14, 14, 4, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 15, 15, 5, 47, 47, 47, 17,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 19, 19, 19, 21, 21, 21, 21, 21, 21,
	20, 20, 20, 26, 26, 32, 32, 32, 23, 18,
	33, 34, 34, 34, 29, 31, 30, 24, 25, 27,
	28, 39, 39, 39, 39, 38, 38, 40, 40, 41,
	41, 42, 37, 52, 52, 52, 49, 49, 51, 51,
	16, 16, 50, 59, 59, 60, 62, 62, 62, 62,
	63, 64, 64, 65, 66, 66, 68, 68, 67, 61,
	53, 58, 58, 69, 70, 70, 71, 2, 1, 55,
	54, 54, 54, 57, 57, 57, 56, 56, 56,
}
var IdlExprR2 = [...]int{

	0, 1, 1, 2, 2, 2, 2, 5, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 3, 2, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 18, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 4, 4, 1, 4,
	1, 6, 1, 1, 1, 1, 1, 1, 5, 4,
	3, 2, 2, 1, 1, 9, 1, 1, 1, 1,
	1, 1, 2, 3, 1, 2, 3, 2, 2, 2,
	5, 1, 3, 2, 1, 2, 3, 2, 1, 2,
	2, 2, 2, 1, 1, 3, 3, 1, 3,
}
var IdlExprChk = [...]int{

	-1000, -43, -45, -44, -46, -48, -47, 30, 22, -52,
	-2, -55, -49, -59, -53, 31, 39, -51, -50, -60,
	-61, 25, 36, 41, -44, 56, 56, 56, 5, -36,
	-26, -20, -37, -24, -25, -27, -28, -40, -41, -35,
	-32, -34, 28, 24, 29, 27, 21, 43, 19, 32,
	35, 44, 5, -23, -18, -33, -29, -31, -30, 34,
	40, -1, 5, -54, -19, -39, -52, -22, -21, -35,
	-38, -40, -41, -42, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, -26, -20, -24, -25, -27,
	-28, 33, 27, 5, 5, 5, 57, 5, 24, 29,
	71, 71, 34, 29, -57, -1, -69, 5, -57, -57,
	71, 71, 71, 71, 57, 57, 37, -45, 59, -5,
	-6, -7, -8, -9, -10, -11, -12, -13, -14, -4,
	64, 63, 68, -35, -3, 69, 6, 9, 10, 11,
	12, -15, 13, 14, 38, 26, -5, 29, 73, -70,
	-71, 75, -5, -1, -17, -19, -5, -58, -56, -1,
	-16, 58, -17, 69, 58, -6, 72, 60, 61, 62,
	17, 16, 63, 64, 65, 66, 67, -4, -6, 72,
	-57, -71, -5, 72, 73, 73, 72, 73, 58, 73,
	73, 59, 58, -16, -56, -62, -26, -24, -27, -35,
	29, -8, -9, -10, -11, -11, -12, -12, -13, -13,
	-13, 70, 76, -1, -5, -5, -58, -56, -3, 56,
	70, 73, 72, 72, 57, -1, -63, -64, -65, -66,
	-68, 20, 23, 73, 58, -65, -67, -17, -68, -6,
	74, -1, 56, -56, 74, 73, -1, 73, -1, 73,
	-1, 73, -1, 72,
}
var IdlExprDef = [...]int{

	0, -2, 1, 2, 0, 0, 0, 0, 0, 56,
	57, 58, 113, 114, 115, 0, 0, 116, 117, 123,
	124, 0, 0, 0, 3, 4, 5, 6, 0, 0,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	83, 84, 80, 81, 89, 112, 97, 98, 99, 100,
	108, 110, 8, 85, 86, 87, 91, 92, 93, 88,
	0, 147, 148, 149, 0, 0, 0, 71, 72, 73,
	101, 102, 103, 104, 0, 0, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 74, 75, 76, 77, 78,
	79, 0, 0, 0, 122, 139, 0, 0, 82, 90,
	0, 0, 94, 95, 150, 153, 154, 148, 151, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 20, 21, 23, 25, 27, 30, 33, 0, 38,
	39, 40, 41, 42, 43, 0, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 0, 96, 0, 143,
	144, 0, 0, 0, 0, 59, 0, 0, 141, 157,
	0, 119, 0, 0, 7, 9, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 0, 109,
	155, 145, 0, 60, 0, 0, 106, 0, 140, 0,
	0, 0, 118, 121, 0, 0, 126, 127, 128, 129,
	89, 22, 24, 26, 28, 29, 31, 32, 34, 35,
	36, 44, 146, 0, 0, 0, 142, 158, 156, 120,
	0, 0, 105, 111, 0, 0, 0, 130, 131, 0,
	134, 0, 0, 0, 125, 132, 0, 0, 135, 0,
	137, 0, 133, 138, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 61,
}
var IdlExprTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 67, 62, 3,
	69, 70, 65, 63, 73, 64, 3, 66, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 74, 56,
	71, 59, 72, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 75, 3, 76, 61, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 57, 60, 58, 68,
}
var IdlExprTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55,
}
var IdlExprTok3 = [...]int{
	0,
}

var IdlExprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	IdlExprDebug        = 0
	IdlExprErrorVerbose = false
)

type IdlExprLexer interface {
	Lex(lval *IdlExprSymType) int
	Error(s string)
}

type IdlExprParser interface {
	Parse(IdlExprLexer) int
	Lookahead() int
}

type IdlExprParserImpl struct {
	lval  IdlExprSymType
	stack [IdlExprInitialStackSize]IdlExprSymType
	char  int
}

func (p *IdlExprParserImpl) Lookahead() int {
	return p.char
}

func IdlExprNewParser() IdlExprParser {
	return &IdlExprParserImpl{}
}

const IdlExprFlag = -1000

func IdlExprTokname(c int) string {
	if c >= 1 && c-1 < len(IdlExprToknames) {
		if IdlExprToknames[c-1] != "" {
			return IdlExprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func IdlExprStatname(s int) string {
	if s >= 0 && s < len(IdlExprStatenames) {
		if IdlExprStatenames[s] != "" {
			return IdlExprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func IdlExprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !IdlExprErrorVerbose {
		return "syntax error"
	}

	for _, e := range IdlExprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + IdlExprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := IdlExprPact[state]
	for tok := TOKSTART; tok-1 < len(IdlExprToknames); tok++ {
		if n := base + tok; n >= 0 && n < IdlExprLast && IdlExprChk[IdlExprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if IdlExprDef[state] == -2 {
		i := 0
		for IdlExprExca[i] != -1 || IdlExprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; IdlExprExca[i] >= 0; i += 2 {
			tok := IdlExprExca[i]
			if tok < TOKSTART || IdlExprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if IdlExprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += IdlExprTokname(tok)
	}
	return res
}

func IdlExprlex1(lex IdlExprLexer, lval *IdlExprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = IdlExprTok1[0]
		goto out
	}
	if char < len(IdlExprTok1) {
		token = IdlExprTok1[char]
		goto out
	}
	if char >= IdlExprPrivate {
		if char < IdlExprPrivate+len(IdlExprTok2) {
			token = IdlExprTok2[char-IdlExprPrivate]
			goto out
		}
	}
	for i := 0; i < len(IdlExprTok3); i += 2 {
		token = IdlExprTok3[i+0]
		if token == char {
			token = IdlExprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = IdlExprTok2[1] /* unknown char */
	}
	if IdlExprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", IdlExprTokname(token), uint(char))
	}
	return char, token
}

func IdlExprParse(IdlExprlex IdlExprLexer) int {
	return IdlExprNewParser().Parse(IdlExprlex)
}

func (IdlExprrcvr *IdlExprParserImpl) Parse(IdlExprlex IdlExprLexer) int {
	var IdlExprn int
	var IdlExprVAL IdlExprSymType
	var IdlExprDollar []IdlExprSymType
	_ = IdlExprDollar // silence set and not used
	IdlExprS := IdlExprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	IdlExprstate := 0
	IdlExprrcvr.char = -1
	IdlExprtoken := -1 // IdlExprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		IdlExprstate = -1
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
	}()
	IdlExprp := -1
	goto IdlExprstack

ret0:
	return 0

ret1:
	return 1

IdlExprstack:
	/* put a state and value onto the stack */
	if IdlExprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", IdlExprTokname(IdlExprtoken), IdlExprStatname(IdlExprstate))
	}

	IdlExprp++
	if IdlExprp >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprS[IdlExprp] = IdlExprVAL
	IdlExprS[IdlExprp].yys = IdlExprstate

IdlExprnewstate:
	IdlExprn = IdlExprPact[IdlExprstate]
	if IdlExprn <= IdlExprFlag {
		goto IdlExprdefault /* simple state */
	}
	if IdlExprrcvr.char < 0 {
		IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
	}
	IdlExprn += IdlExprtoken
	if IdlExprn < 0 || IdlExprn >= IdlExprLast {
		goto IdlExprdefault
	}
	IdlExprn = IdlExprAct[IdlExprn]
	if IdlExprChk[IdlExprn] == IdlExprtoken { /* valid shift */
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
		IdlExprVAL = IdlExprrcvr.lval
		IdlExprstate = IdlExprn
		if Errflag > 0 {
			Errflag--
		}
		goto IdlExprstack
	}

IdlExprdefault:
	/* default state action */
	IdlExprn = IdlExprDef[IdlExprstate]
	if IdlExprn == -2 {
		if IdlExprrcvr.char < 0 {
			IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if IdlExprExca[xi+0] == -1 && IdlExprExca[xi+1] == IdlExprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			IdlExprn = IdlExprExca[xi+0]
			if IdlExprn < 0 || IdlExprn == IdlExprtoken {
				break
			}
		}
		IdlExprn = IdlExprExca[xi+1]
		if IdlExprn < 0 {
			goto ret0
		}
	}
	if IdlExprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			IdlExprlex.Error(IdlExprErrorMessage(IdlExprstate, IdlExprtoken))
			Nerrs++
			if IdlExprDebug >= 1 {
				__yyfmt__.Printf("%s", IdlExprStatname(IdlExprstate))
				__yyfmt__.Printf(" saw %s\n", IdlExprTokname(IdlExprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for IdlExprp >= 0 {
				IdlExprn = IdlExprPact[IdlExprS[IdlExprp].yys] + IdlExprErrCode
				if IdlExprn >= 0 && IdlExprn < IdlExprLast {
					IdlExprstate = IdlExprAct[IdlExprn] /* simulate a shift of "error" */
					if IdlExprChk[IdlExprstate] == IdlExprErrCode {
						goto IdlExprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if IdlExprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", IdlExprS[IdlExprp].yys)
				}
				IdlExprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if IdlExprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", IdlExprTokname(IdlExprtoken))
			}
			if IdlExprtoken == IdlExprEofCode {
				goto ret1
			}
			IdlExprrcvr.char = -1
			IdlExprtoken = -1
			goto IdlExprnewstate /* try again in the same state */
		}
	}

	/* reduction by production IdlExprn */
	if IdlExprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", IdlExprn, IdlExprStatname(IdlExprstate))
	}

	IdlExprnt := IdlExprn
	IdlExprpt := IdlExprp
	_ = IdlExprpt // guard against "declared and not used"

	IdlExprp -= IdlExprR2[IdlExprn]
	// IdlExprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if IdlExprp+1 >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprVAL = IdlExprS[IdlExprp+1]

	/* consult goto table to find next state */
	IdlExprn = IdlExprR1[IdlExprn]
	IdlExprg := IdlExprPgo[IdlExprn]
	IdlExprj := IdlExprg + IdlExprS[IdlExprp].yys + 1

	if IdlExprj >= IdlExprLast {
		IdlExprstate = IdlExprAct[IdlExprg]
	} else {
		IdlExprstate = IdlExprAct[IdlExprj]
		if IdlExprChk[IdlExprstate] != -IdlExprn {
			IdlExprstate = IdlExprAct[IdlExprg]
		}
	}
	// dummy call; replaced with literal code
	switch IdlExprnt {

	case 1:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:155
		{
			IdlExprVAL.Specification = AddDefinitions(IdlExprDollar[1].DefinitionDeclaration)
			context, _ := GetIdlExprContext(IdlExprlex)
			context.specification = IdlExprVAL.Specification
		}
	case 2:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:162
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 3:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:165
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
			GetLast(IdlExprVAL.DefinitionDeclaration).SetNext(IdlExprDollar[2].DefinitionDeclaration)
		}
	case 4:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:171
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 5:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:174
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 6:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:177
		{
			err := AddTypeDclToContext(IdlExprlex, IdlExprDollar[1].DefinitionDeclaration)
			if err != nil {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}

			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 7:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:187
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[4].DefinitionDeclaration
		}
	case 8:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:191
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				definitionDeclaration := lex.FindScopeName(IdlExprDollar[1].Identifier)
				if definitionDeclaration == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Value %v is not declared", IdlExprDollar[1].Identifier))
					return DefNotFound
				} else {
					IdlExprVAL.DefinedType = definitionDeclaration
				}
			} else {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure", IdlExprDollar[1].Identifier))
				return NoLex
			}
		}
	case 9:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:225
		{
			IdlExprVAL.DefinitionDeclaration = Newconst_dcl()
		}
	case 10:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:229
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 11:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:232
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 12:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:235
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 13:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:238
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 14:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:241
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 15:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:244
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 16:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:247
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 17:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:250
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 18:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:253
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 19:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:256
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 20:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:262
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 21:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:267
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 22:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:271
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 23:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:276
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 24:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:279
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 25:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:284
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 26:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:287
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 27:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:293
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 28:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:296
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 29:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:299
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 30:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:304
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 31:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:307
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue + IdlExprDollar[3].IntegerValue
		}
	case 32:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:310
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue - IdlExprDollar[3].IntegerValue
		}
	case 33:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:315
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 34:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:318
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue * IdlExprDollar[3].IntegerValue
		}
	case 35:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:321
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue / IdlExprDollar[3].IntegerValue
		}
	case 36:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:324
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue % IdlExprDollar[3].IntegerValue
		}
	case 37:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:329
		{
			value, ok := IdlExprDollar[2].ConstValue.Value().(int64)
			if ok {
				IdlExprVAL.IntegerValue = value
			} else {
				SendError(IdlExprlex, "Value must be an integer (int64)")
				return ErrorMustbeAnInt
			}
		}
	case 38:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:338
		{
			value, ok := IdlExprDollar[1].ConstValue.Value().(int64)
			if ok {
				IdlExprVAL.IntegerValue = value
			} else {
				SendError(IdlExprlex, "Value must be an integer (int64)")
				return ErrorMustbeAnInt
			}
		}
	case 39:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:349
		{
			IdlExprVAL.IntegerValue = -1
		}
	case 40:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:352
		{
			IdlExprVAL.IntegerValue = 0
		}
	case 41:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:356
		{
			IdlExprVAL.IntegerValue = 99
		}
	case 42:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:361
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				data := lex.FindScopeName(IdlExprDollar[1].DefinedType.GetName())
				if data == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Could not find defined value %v", IdlExprDollar[1].DefinedType.GetName()))
					return 10003
				}
			} else {
				IdlExprlex.Error("Could not find lex")
				return NoLex
			}
		}
	case 43:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:374
		{
			IdlExprVAL.ConstValue = IdlExprDollar[1].ConstValue
		}
	case 44:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:377
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[2].IntegerValue, interfaces.Int64)
		}
	case 45:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:382
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].IntegerValue, interfaces.Int64)
		}
	case 46:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:385
		{
			IdlExprVAL.ConstValue = nil
		}
	case 47:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:388
		{
			IdlExprVAL.ConstValue = nil
		}
	case 48:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:391
		{
			IdlExprVAL.ConstValue = newConstantValue(IdlExprDollar[1].StringValue, interfaces.Char, 1)
		}
	case 49:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:394
		{
			IdlExprVAL.ConstValue = newConstantValue(IdlExprDollar[1].StringValue, interfaces.WChar, 1)
		}
	case 50:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:397
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].BoolValue, interfaces.Bool)
		}
	case 51:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:400
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].StringValue, interfaces.String)
		}
	case 52:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:403
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].StringValue, interfaces.WideString)
		}
	case 53:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:408
		{
			IdlExprVAL.BoolValue = true
		}
	case 54:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:411
		{
			IdlExprVAL.BoolValue = false
		}
	case 56:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:418
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 57:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:421
		{
			nativeDecl := NewNativeDeclaration(IdlExprDollar[1].Identifier)
			IdlExprVAL.DefinitionDeclaration = nativeDecl
		}
	case 58:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:425
		{

			if typeDecl, ok := IdlExprDollar[1].DefinitionDeclaration.(interfaces.ITypeDeclaration); ok {
				err := AddTypedefDcl(IdlExprlex, typeDecl)
				if err != nil {
					SendError(IdlExprlex, "AddTypedefDcl error")
					return ErrorOnAddTypedefDcl
				}
			} else {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}

		}
	case 59:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:440
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 60:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:445
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchAlpha, IdlExprDollar[3].IntegerValue)
		}
	case 61:
		IdlExprDollar = IdlExprS[IdlExprpt-18 : IdlExprpt+1]
//line yacc/idl.y:453
		{
			IdlExprVAL.DefinedType = NewBitField(IdlExprDollar[3].Identifier, IdlExprDollar[5].Identifier, IdlExprDollar[7].Identifier, IdlExprDollar[9].Identifier, IdlExprDollar[11].Identifier, IdlExprDollar[13].Identifier, IdlExprDollar[15].Identifier, IdlExprDollar[17].Identifier)
		}
	case 62:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:456
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchByte, 0)
		}
	case 63:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:464
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchDate, 0)
		}
	case 64:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:472
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchTime, 0)

		}
	case 65:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:481
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchPrice04, 0)

		}
	case 66:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:490
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchPrice08, 0)
		}
	case 67:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:498
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchUInt08, 0)
		}
	case 68:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:506
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchUInt16, 0)
		}
	case 69:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:514
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchUInt32, 0)
		}
	case 70:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:522
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.MitchUInt64, 0)
		}
	case 71:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:532
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			if context.IDlBaseType.Name() != interfaces.IDlBaseType_Mitch {
				IdlExprlex.Error(__yyfmt__.Sprintf("IDlBaseType not set to IDlBaseType_Micth. %v is an invalid token", IdlExprDollar[1].DefinedType.GetName()))
				return NoLex

			}
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 72:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:547
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}

			if context.IDlBaseType.Name() != interfaces.IDlBaseType_Native {
				IdlExprlex.Error(__yyfmt__.Sprintf("IDlBaseType not set to IDlBaseType_Native. %v is an invalid token", IdlExprDollar[1].DefinedType))
				return NoLex

			}
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 73:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:561
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}

			if !context.IDlBaseType.CanScope(IdlExprDollar[1].DefinedType) {
				IdlExprlex.Error(__yyfmt__.Sprintf("No scoping allowed. %v is an invalid token", IdlExprDollar[1].DefinedType.GetName()))
				return ErrorNoScopingAllowed
			}
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType

		}
	case 74:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:579
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 75:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:582
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 76:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:585
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 77:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:588
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 78:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:591
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 79:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:594
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 80:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:598
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Float, 0)
		}
	case 81:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:606
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Double, 0)
		}
	case 82:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:614
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.LongDouble, 0)
		}
	case 83:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:623
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 84:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:626
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 85:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:630
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 86:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:633
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 87:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:636
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 88:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:640
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Int16, 0)
		}
	case 89:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:649
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Int32, 0)
		}
	case 90:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:658
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Int64, 0)
		}
	case 91:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:668
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 92:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:671
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 93:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:674
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 94:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:679
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Uint16, 0)
		}
	case 95:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:688
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Uint32, 0)
		}
	case 96:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:697
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Uint64, 0)
		}
	case 97:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:707
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Char, 0)
		}
	case 98:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:717
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.WChar, 0)
		}
	case 99:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:726
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Bool, 0)
		}
	case 100:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:736
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Octet, 0)
		}
	case 101:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:746
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 102:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:749
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 103:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:752
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 104:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:755
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 105:
		IdlExprDollar = IdlExprS[IdlExprpt-6 : IdlExprpt+1]
//line yacc/idl.y:760
		{
			IdlExprVAL.DefinedType = TempleteTypes.NewSequenceType(IdlExprDollar[3].DefinedType, IdlExprDollar[5].IntegerValue)
		}
	case 106:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:763
		{
			IdlExprVAL.DefinedType = TempleteTypes.NewSequenceType(IdlExprDollar[3].DefinedType, -1)
		}
	case 107:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:768
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.String, 0)
		}
	case 108:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:777
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.String, 0)
		}
	case 109:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:787
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.WideString, 0)
		}
	case 110:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:795
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.WideString, 0)
		}
	case 111:
		IdlExprDollar = IdlExprS[IdlExprpt-6 : IdlExprpt+1]
//line yacc/idl.y:806
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Fixed, 0)

		}
	case 112:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:819
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType = context.IDlBaseType.CreateType(interfaces.Fixed, 0)
		}
	case 113:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:829
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 114:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:832
		{
			IdlExprVAL.DefinitionDeclaration = Newunion_dcl()
		}
	case 115:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:835
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 116:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:843
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration

		}
	case 117:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:847
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 118:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:853
		{
			def := NewStructDefinition(IdlExprDollar[2].Identifier)
			member := IdlExprDollar[4].Member
			for member != nil {
				decl := member.Declarator
				for decl != nil {
					def.AddMember(member.DefinedType, decl)
					decl = decl.Next()
				}
				member = member.Next
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 119:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:866
		{
			def := NewStructDefinition(IdlExprDollar[2].Identifier)
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 120:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:873
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator, nil)
		}
	case 121:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:876
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].Member.DefinedType, IdlExprDollar[1].Member.Declarator, IdlExprDollar[2].Member)
		}
	case 122:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:883
		{
			IdlExprVAL.DefinitionDeclaration = Newstruct_forward_dcl()
		}
	case 140:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:898
		{
			def := NewEnumDcl(IdlExprDollar[2].Identifier)
			decl := IdlExprDollar[4].Declarator
			for decl != nil {
				def.AddMember(decl)
				decl = decl.Next()
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 141:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:908
		{
		}
	case 142:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:909
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
		}
	case 143:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:915
		{

		}
	case 144:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:920
		{

		}
	case 145:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:923
		{

		}
	case 146:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:928
		{
		}
	case 147:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:932
		{
			IdlExprVAL.Identifier = IdlExprDollar[2].Identifier
		}
	case 148:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:937
		{
			IdlExprVAL.Identifier = IdlExprDollar[1].Identifier
		}
	case 149:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:942
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[2].DefinitionDeclaration
		}
	case 150:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:951
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 151:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:954
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 152:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:957
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinitionDeclaration, IdlExprDollar[2].Declarator)
		}
	case 153:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:966
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 154:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:969
		{

		}
	case 155:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:972
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	case 156:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:981
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, IdlExprDollar[3].ConstValue)
		}
	case 157:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:984
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 158:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:987
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	}
	goto IdlExprstack /* stack new state and value */
}
