// Code generated by goyacc -o yacc/idl.go -p IdlExpr yacc/idl.y. DO NOT EDIT.

//line yacc/idl.y:2
package yacc

import __yyfmt__ "fmt"

//line yacc/idl.y:2
//go:generate goyacc -o idl.go -p "IdlExpr" idl.y
import (
	"github.com/bhbosman/Application/goidlgenerator/TempleteTypes"
	"github.com/bhbosman/Application/goidlgenerator/interfaces"
)

//line yacc/idl.y:70
type IdlExprSymType struct {
	yys          int
	Identifier   string
	IntegerValue int64
	StringValue  string
	FloatValue   float64
	ConstValue   interfaces.IConstantValue
	BoolValue    bool

	Member                *Member
	Declarator            interfaces.IDeclarator
	DefinedType           interfaces.IDefinedType
	DefinitionDeclaration interfaces.IDefinitionDeclaration
	Specification         []interfaces.IDefinitionDeclaration
}

const SingleLineComment = 57346
const Identifier = 57347
const Integer_literal = 57348
const Hex_literal = 57349
const Octet_literal = 57350
const Floating_pt_literal = 57351
const Fixed_pt_literal = 57352
const Character_literal = 57353
const Wide_character_literal = 57354
const String_literal = 57355
const Wide_string_literal = 57356
const Scope = 57357
const Shl = 57358
const Shr = 57359
const Whitespace = 57360
const Rwboolean = 57361
const Rwcase = 57362
const Rwchar = 57363
const Rwconst = 57364
const Rwdefault = 57365
const Rwdouble = 57366
const Rwenum = 57367
const RwFALSE = 57368
const Rwfixed = 57369
const Rwfloat = 57370
const Rwlong = 57371
const Rwmodule = 57372
const Rwnative = 57373
const Rwoctet = 57374
const Rwsequence = 57375
const Rwshort = 57376
const Rwstring = 57377
const Rwstruct = 57378
const Rwswitch = 57379
const RwTRUE = 57380
const Rwtypedef = 57381
const Rwunsigned = 57382
const Rwunion = 57383
const Rwvoid = 57384
const Rwwchar = 57385
const Rwwstring = 57386
const RwMitchAlpha = 57387
const RwMitchBitField = 57388
const RwMitchByte = 57389
const RwMitchDate = 57390
const RwMitchTime = 57391
const RwMitchPrice04 = 57392
const RwMitchPrice08 = 57393
const RwMitchUInt08 = 57394
const RwMitchUInt16 = 57395
const RwMitchUInt32 = 57396
const RwMitchUInt64 = 57397
const RwMitchMessageNumberType = 57398

var IdlExprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SingleLineComment",
	"Identifier",
	"Integer_literal",
	"Hex_literal",
	"Octet_literal",
	"Floating_pt_literal",
	"Fixed_pt_literal",
	"Character_literal",
	"Wide_character_literal",
	"String_literal",
	"Wide_string_literal",
	"Scope",
	"Shl",
	"Shr",
	"Whitespace",
	"Rwboolean",
	"Rwcase",
	"Rwchar",
	"Rwconst",
	"Rwdefault",
	"Rwdouble",
	"Rwenum",
	"RwFALSE",
	"Rwfixed",
	"Rwfloat",
	"Rwlong",
	"Rwmodule",
	"Rwnative",
	"Rwoctet",
	"Rwsequence",
	"Rwshort",
	"Rwstring",
	"Rwstruct",
	"Rwswitch",
	"RwTRUE",
	"Rwtypedef",
	"Rwunsigned",
	"Rwunion",
	"Rwvoid",
	"Rwwchar",
	"Rwwstring",
	"RwMitchAlpha",
	"RwMitchBitField",
	"RwMitchByte",
	"RwMitchDate",
	"RwMitchTime",
	"RwMitchPrice04",
	"RwMitchPrice08",
	"RwMitchUInt08",
	"RwMitchUInt16",
	"RwMitchUInt32",
	"RwMitchUInt64",
	"RwMitchMessageNumberType",
	"';'",
	"'{'",
	"'}'",
	"'='",
	"'|'",
	"'^'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'~'",
	"'('",
	"')'",
	"'<'",
	"'>'",
	"','",
	"':'",
	"'['",
	"']'",
}
var IdlExprStatenames = [...]string{}

const IdlExprEofCode = 1
const IdlExprErrCode = 2
const IdlExprInitialStackSize = 16

//line yacc/idl.y:1099

//line yacctab:1
var IdlExprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const IdlExprPrivate = 57344

const IdlExprLast = 463

var IdlExprAct = [...]int{

	163, 162, 235, 233, 123, 136, 137, 166, 130, 128,
	161, 125, 127, 129, 39, 106, 61, 122, 153, 126,
	3, 132, 69, 24, 2, 198, 90, 86, 88, 217,
	154, 249, 245, 224, 193, 35, 30, 33, 190, 189,
	256, 254, 252, 195, 250, 238, 194, 228, 151, 194,
	195, 192, 191, 258, 227, 226, 52, 188, 187, 183,
	170, 116, 115, 114, 113, 107, 107, 107, 112, 103,
	48, 102, 46, 225, 216, 43, 21, 167, 93, 42,
	44, 110, 111, 49, 92, 59, 50, 22, 178, 179,
	180, 60, 23, 173, 47, 51, 75, 94, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 176, 177,
	172, 171, 196, 121, 239, 229, 118, 160, 117, 98,
	69, 149, 157, 120, 69, 247, 169, 27, 26, 25,
	155, 156, 119, 159, 52, 101, 150, 8, 175, 174,
	21, 24, 105, 182, 164, 7, 15, 104, 48, 9,
	46, 22, 107, 181, 16, 100, 23, 62, 205, 236,
	101, 38, 237, 59, 37, 158, 66, 184, 199, 60,
	69, 185, 186, 204, 168, 109, 99, 97, 72, 96,
	95, 71, 64, 206, 209, 210, 208, 213, 214, 215,
	211, 212, 207, 220, 203, 201, 202, 222, 28, 91,
	152, 108, 241, 223, 69, 221, 234, 218, 36, 219,
	52, 139, 89, 87, 140, 141, 142, 143, 145, 146,
	232, 34, 31, 231, 200, 20, 19, 13, 11, 230,
	63, 148, 14, 17, 18, 12, 5, 240, 243, 246,
	69, 244, 242, 147, 248, 6, 4, 1, 73, 52,
	65, 251, 74, 253, 70, 255, 32, 257, 29, 41,
	55, 40, 57, 48, 58, 46, 56, 53, 43, 134,
	133, 67, 42, 44, 135, 138, 49, 68, 59, 54,
	144, 131, 124, 10, 60, 0, 0, 47, 0, 75,
	0, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 52, 139, 197, 52, 140, 141, 142, 143, 145,
	146, 0, 0, 0, 0, 0, 0, 0, 48, 0,
	46, 0, 148, 43, 0, 0, 0, 42, 44, 0,
	0, 49, 0, 59, 147, 0, 0, 0, 0, 60,
	0, 0, 47, 0, 75, 52, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 0, 0, 165, 48,
	0, 46, 0, 0, 43, 0, 138, 0, 42, 44,
	0, 0, 49, 0, 59, 0, 0, 0, 0, 0,
	60, 0, 0, 47, 52, 75, 0, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 0, 48, 0,
	46, 0, 0, 43, 0, 0, 45, 42, 44, 0,
	0, 49, 8, 59, 50, 21, 0, 0, 0, 60,
	7, 15, 47, 51, 0, 0, 22, 0, 0, 16,
	139, 23, 0, 140, 141, 142, 143, 145, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147,
}
var IdlExprPact = [...]int{

	390, -1000, 390, -1000, 72, 71, 70, 193, 379, -1000,
	-1000, -1000, -1000, -1000, -1000, 152, 51, -1000, -1000, -1000,
	-1000, 175, 174, 172, -1000, -1000, -1000, -1000, 61, 171,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 131, -1000, -1000, -1000, -1000, -1000,
	-1, -3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	113, -1000, -1000, -1000, 170, 170, 170, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -4, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -8, -1000, -1000, -1000, -1000,
	-1000, -1000, -9, -10, -11, 60, 58, 95, 390, 53,
	-1000, -1000, 205, 205, -1000, 107, -26, -1000, -1000, -46,
	-26, -26, 205, 205, 340, 205, 152, 152, 299, 7,
	115, 205, -13, -1000, 50, 48, 30, 122, 44, 22,
	-1000, 296, -1000, -1000, -1000, -1000, -1000, -1000, 205, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -14,
	-1000, 170, -46, -1000, 205, -15, -16, -35, -1000, -22,
	-23, -25, -31, 52, 244, -1000, 152, 129, -1000, -1000,
	-1000, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, -1000, 3, -1000, -26, -1000, -48, -1000, -1000, 205,
	-1000, 205, 152, -1000, 152, 152, 424, -1000, 340, -24,
	2, -1000, -1000, -1000, -1000, 106, 48, 30, 122, 44,
	44, 22, 22, -1000, -1000, -1000, -1000, -1000, -18, -19,
	-27, -28, -31, -1000, -1000, 57, -1000, -1000, 152, 139,
	-29, 55, -1000, 139, 340, 139, 205, -43, 152, -1000,
	-1000, 68, 152, -1000, -44, -1000, -30, -1000, -31, -1000,
	152, -32, 152, -33, 152, -34, 152, -20, -1000,
}
var IdlExprPgo = [...]int{

	0, 0, 283, 6, 21, 17, 4, 282, 11, 19,
	12, 9, 13, 8, 281, 280, 25, 7, 279, 165,
	213, 277, 271, 267, 28, 212, 27, 26, 199, 266,
	264, 262, 261, 260, 259, 5, 258, 256, 254, 252,
	250, 164, 161, 248, 247, 20, 24, 246, 245, 236,
	235, 234, 233, 149, 232, 230, 228, 1, 15, 10,
	227, 226, 225, 224, 223, 220, 3, 206, 202, 2,
	201, 200, 18,
}
var IdlExprR1 = [...]int{

	0, 44, 46, 46, 45, 45, 45, 47, 35, 49,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	6, 7, 7, 8, 8, 9, 9, 10, 10, 10,
	11, 11, 11, 12, 12, 12, 12, 13, 13, 14,
	14, 14, 4, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 15, 15, 5, 48, 48, 48, 17,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 19, 19, 19, 21, 21, 21, 21, 21, 21,
	20, 20, 20, 26, 26, 32, 32, 32, 23, 18,
	33, 34, 34, 34, 29, 31, 30, 24, 25, 27,
	28, 40, 40, 40, 40, 40, 39, 38, 38, 41,
	41, 42, 42, 43, 37, 53, 53, 53, 50, 50,
	52, 52, 16, 16, 51, 60, 60, 61, 63, 63,
	63, 63, 64, 65, 65, 66, 67, 67, 69, 69,
	68, 62, 54, 59, 59, 70, 71, 71, 72, 2,
	1, 56, 55, 55, 55, 58, 58, 58, 57, 57,
	57,
}
var IdlExprR2 = [...]int{

	0, 1, 1, 2, 2, 2, 2, 5, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 3, 2, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 18, 6, 4, 4,
	1, 4, 1, 6, 1, 1, 1, 1, 1, 1,
	5, 4, 3, 2, 2, 1, 1, 9, 1, 1,
	1, 1, 1, 1, 2, 3, 1, 2, 3, 2,
	2, 2, 5, 1, 3, 2, 1, 2, 3, 2,
	1, 2, 2, 2, 2, 1, 1, 3, 3, 1,
	3,
}
var IdlExprChk = [...]int{

	-1000, -44, -46, -45, -47, -49, -48, 30, 22, -53,
	-2, -56, -50, -60, -54, 31, 39, -52, -51, -61,
	-62, 25, 36, 41, -45, 57, 57, 57, 5, -36,
	-26, -20, -37, -24, -25, -27, -28, -41, -42, -35,
	-32, -34, 28, 24, 29, 27, 21, 43, 19, 32,
	35, 44, 5, -23, -18, -33, -29, -31, -30, 34,
	40, -1, 5, -55, -19, -40, -53, -22, -21, -35,
	-38, -41, -42, -43, -39, 45, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, -26, -20, -24, -25,
	-27, -28, 33, 27, 46, 5, 5, 5, 58, 5,
	24, 29, 72, 72, 34, 29, -58, -1, -70, 5,
	-58, -58, 72, 72, 72, 72, 72, 58, 58, 37,
	-46, 60, -5, -6, -7, -8, -9, -10, -11, -12,
	-13, -14, -4, 65, 64, 69, -35, -3, 70, 6,
	9, 10, 11, 12, -15, 13, 14, 38, 26, -5,
	29, 74, -71, -72, 76, -5, -5, -17, -19, -5,
	-1, -59, -57, -1, -16, 59, -17, 70, 59, -6,
	73, 61, 62, 63, 17, 16, 64, 65, 66, 67,
	68, -4, -6, 73, -58, -72, -5, 73, 73, 74,
	73, 74, 74, 59, 74, 74, 60, 59, -16, -57,
	-63, -26, -24, -27, -35, 29, -8, -9, -10, -11,
	-11, -12, -12, -13, -13, -13, 71, 77, -5, -5,
	-1, -59, -57, -3, 57, 71, 73, 73, 74, 58,
	-1, -64, -65, -66, -67, -69, 20, 23, 74, 59,
	-66, -68, -17, -69, -6, 75, -1, 57, -57, 75,
	74, -1, 74, -1, 74, -1, 74, -1, 73,
}
var IdlExprDef = [...]int{

	0, -2, 1, 2, 0, 0, 0, 0, 0, 56,
	57, 58, 115, 116, 117, 0, 0, 118, 119, 125,
	126, 0, 0, 0, 3, 4, 5, 6, 0, 0,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	83, 84, 80, 81, 89, 114, 97, 98, 99, 100,
	110, 112, 8, 85, 86, 87, 91, 92, 93, 88,
	0, 149, 150, 151, 0, 0, 0, 71, 72, 73,
	101, 102, 103, 104, 105, 0, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 0, 74, 75, 76, 77,
	78, 79, 0, 0, 0, 0, 124, 141, 0, 0,
	82, 90, 0, 0, 94, 95, 152, 155, 156, 150,
	153, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 20, 21, 23, 25, 27, 30,
	33, 0, 38, 39, 40, 41, 42, 43, 0, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 0,
	96, 0, 145, 146, 0, 0, 0, 0, 59, 0,
	0, 0, 143, 159, 0, 121, 0, 0, 7, 9,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 111, 157, 147, 0, 60, 70, 0,
	108, 0, 0, 142, 0, 0, 0, 120, 123, 0,
	0, 128, 129, 130, 131, 89, 22, 24, 26, 28,
	29, 31, 32, 34, 35, 36, 44, 148, 0, 0,
	0, 144, 160, 158, 122, 0, 107, 113, 0, 0,
	0, 0, 132, 133, 0, 136, 0, 0, 0, 127,
	134, 0, 0, 137, 0, 139, 0, 135, 140, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 106,
}
var IdlExprTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 68, 63, 3,
	70, 71, 66, 64, 74, 65, 3, 67, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 75, 57,
	72, 60, 73, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 76, 3, 77, 62, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 58, 61, 59, 69,
}
var IdlExprTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56,
}
var IdlExprTok3 = [...]int{
	0,
}

var IdlExprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	IdlExprDebug        = 0
	IdlExprErrorVerbose = false
)

type IdlExprLexer interface {
	Lex(lval *IdlExprSymType) int
	Error(s string)
}

type IdlExprParser interface {
	Parse(IdlExprLexer) int
	Lookahead() int
}

type IdlExprParserImpl struct {
	lval  IdlExprSymType
	stack [IdlExprInitialStackSize]IdlExprSymType
	char  int
}

func (p *IdlExprParserImpl) Lookahead() int {
	return p.char
}

func IdlExprNewParser() IdlExprParser {
	return &IdlExprParserImpl{}
}

const IdlExprFlag = -1000

func IdlExprTokname(c int) string {
	if c >= 1 && c-1 < len(IdlExprToknames) {
		if IdlExprToknames[c-1] != "" {
			return IdlExprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func IdlExprStatname(s int) string {
	if s >= 0 && s < len(IdlExprStatenames) {
		if IdlExprStatenames[s] != "" {
			return IdlExprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func IdlExprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !IdlExprErrorVerbose {
		return "syntax error"
	}

	for _, e := range IdlExprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + IdlExprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := IdlExprPact[state]
	for tok := TOKSTART; tok-1 < len(IdlExprToknames); tok++ {
		if n := base + tok; n >= 0 && n < IdlExprLast && IdlExprChk[IdlExprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if IdlExprDef[state] == -2 {
		i := 0
		for IdlExprExca[i] != -1 || IdlExprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; IdlExprExca[i] >= 0; i += 2 {
			tok := IdlExprExca[i]
			if tok < TOKSTART || IdlExprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if IdlExprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += IdlExprTokname(tok)
	}
	return res
}

func IdlExprlex1(lex IdlExprLexer, lval *IdlExprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = IdlExprTok1[0]
		goto out
	}
	if char < len(IdlExprTok1) {
		token = IdlExprTok1[char]
		goto out
	}
	if char >= IdlExprPrivate {
		if char < IdlExprPrivate+len(IdlExprTok2) {
			token = IdlExprTok2[char-IdlExprPrivate]
			goto out
		}
	}
	for i := 0; i < len(IdlExprTok3); i += 2 {
		token = IdlExprTok3[i+0]
		if token == char {
			token = IdlExprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = IdlExprTok2[1] /* unknown char */
	}
	if IdlExprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", IdlExprTokname(token), uint(char))
	}
	return char, token
}

func IdlExprParse(IdlExprlex IdlExprLexer) int {
	return IdlExprNewParser().Parse(IdlExprlex)
}

func (IdlExprrcvr *IdlExprParserImpl) Parse(IdlExprlex IdlExprLexer) int {
	var IdlExprn int
	var IdlExprVAL IdlExprSymType
	var IdlExprDollar []IdlExprSymType
	_ = IdlExprDollar // silence set and not used
	IdlExprS := IdlExprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	IdlExprstate := 0
	IdlExprrcvr.char = -1
	IdlExprtoken := -1 // IdlExprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		IdlExprstate = -1
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
	}()
	IdlExprp := -1
	goto IdlExprstack

ret0:
	return 0

ret1:
	return 1

IdlExprstack:
	/* put a state and value onto the stack */
	if IdlExprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", IdlExprTokname(IdlExprtoken), IdlExprStatname(IdlExprstate))
	}

	IdlExprp++
	if IdlExprp >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprS[IdlExprp] = IdlExprVAL
	IdlExprS[IdlExprp].yys = IdlExprstate

IdlExprnewstate:
	IdlExprn = IdlExprPact[IdlExprstate]
	if IdlExprn <= IdlExprFlag {
		goto IdlExprdefault /* simple state */
	}
	if IdlExprrcvr.char < 0 {
		IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
	}
	IdlExprn += IdlExprtoken
	if IdlExprn < 0 || IdlExprn >= IdlExprLast {
		goto IdlExprdefault
	}
	IdlExprn = IdlExprAct[IdlExprn]
	if IdlExprChk[IdlExprn] == IdlExprtoken { /* valid shift */
		IdlExprrcvr.char = -1
		IdlExprtoken = -1
		IdlExprVAL = IdlExprrcvr.lval
		IdlExprstate = IdlExprn
		if Errflag > 0 {
			Errflag--
		}
		goto IdlExprstack
	}

IdlExprdefault:
	/* default state action */
	IdlExprn = IdlExprDef[IdlExprstate]
	if IdlExprn == -2 {
		if IdlExprrcvr.char < 0 {
			IdlExprrcvr.char, IdlExprtoken = IdlExprlex1(IdlExprlex, &IdlExprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if IdlExprExca[xi+0] == -1 && IdlExprExca[xi+1] == IdlExprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			IdlExprn = IdlExprExca[xi+0]
			if IdlExprn < 0 || IdlExprn == IdlExprtoken {
				break
			}
		}
		IdlExprn = IdlExprExca[xi+1]
		if IdlExprn < 0 {
			goto ret0
		}
	}
	if IdlExprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			IdlExprlex.Error(IdlExprErrorMessage(IdlExprstate, IdlExprtoken))
			Nerrs++
			if IdlExprDebug >= 1 {
				__yyfmt__.Printf("%s", IdlExprStatname(IdlExprstate))
				__yyfmt__.Printf(" saw %s\n", IdlExprTokname(IdlExprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for IdlExprp >= 0 {
				IdlExprn = IdlExprPact[IdlExprS[IdlExprp].yys] + IdlExprErrCode
				if IdlExprn >= 0 && IdlExprn < IdlExprLast {
					IdlExprstate = IdlExprAct[IdlExprn] /* simulate a shift of "error" */
					if IdlExprChk[IdlExprstate] == IdlExprErrCode {
						goto IdlExprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if IdlExprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", IdlExprS[IdlExprp].yys)
				}
				IdlExprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if IdlExprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", IdlExprTokname(IdlExprtoken))
			}
			if IdlExprtoken == IdlExprEofCode {
				goto ret1
			}
			IdlExprrcvr.char = -1
			IdlExprtoken = -1
			goto IdlExprnewstate /* try again in the same state */
		}
	}

	/* reduction by production IdlExprn */
	if IdlExprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", IdlExprn, IdlExprStatname(IdlExprstate))
	}

	IdlExprnt := IdlExprn
	IdlExprpt := IdlExprp
	_ = IdlExprpt // guard against "declared and not used"

	IdlExprp -= IdlExprR2[IdlExprn]
	// IdlExprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if IdlExprp+1 >= len(IdlExprS) {
		nyys := make([]IdlExprSymType, len(IdlExprS)*2)
		copy(nyys, IdlExprS)
		IdlExprS = nyys
	}
	IdlExprVAL = IdlExprS[IdlExprp+1]

	/* consult goto table to find next state */
	IdlExprn = IdlExprR1[IdlExprn]
	IdlExprg := IdlExprPgo[IdlExprn]
	IdlExprj := IdlExprg + IdlExprS[IdlExprp].yys + 1

	if IdlExprj >= IdlExprLast {
		IdlExprstate = IdlExprAct[IdlExprg]
	} else {
		IdlExprstate = IdlExprAct[IdlExprj]
		if IdlExprChk[IdlExprstate] != -IdlExprn {
			IdlExprstate = IdlExprAct[IdlExprg]
		}
	}
	// dummy call; replaced with literal code
	switch IdlExprnt {

	case 1:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:156
		{
			IdlExprVAL.Specification = AddDefinitions(IdlExprDollar[1].DefinitionDeclaration)
			context, _ := GetIdlExprContext(IdlExprlex)
			context.specification = IdlExprVAL.Specification
		}
	case 2:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:163
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 3:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:166
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
			GetLast(IdlExprVAL.DefinitionDeclaration).SetNext(IdlExprDollar[2].DefinitionDeclaration)
		}
	case 4:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:172
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 5:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:175
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 6:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:178
		{
			err := AddTypeDclToContext(IdlExprlex, IdlExprDollar[1].DefinitionDeclaration)
			if err != nil {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}

			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 7:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:188
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[4].DefinitionDeclaration
		}
	case 8:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:192
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				definitionDeclaration := lex.FindScopeName(IdlExprDollar[1].Identifier)
				if definitionDeclaration == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Value %v is not declared", IdlExprDollar[1].Identifier))
					return DefNotFound
				} else {
					IdlExprVAL.DefinedType = definitionDeclaration
				}
			} else {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure. %v", IdlExprDollar[1].Identifier))
				return NoLex
			}
		}
	case 9:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:226
		{
			IdlExprVAL.DefinitionDeclaration = Newconst_dcl()
		}
	case 10:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:230
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 11:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:233
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 12:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:236
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 13:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:239
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 14:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:242
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 15:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:245
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 16:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:248
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 17:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:251
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 18:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:254
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 19:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:257
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 20:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:263
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 21:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:268
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 22:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:272
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 23:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:277
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 24:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:280
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 25:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:285
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 26:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:288
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 27:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:294
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 28:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:297
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 29:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:300
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 30:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:305
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 31:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:308
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue + IdlExprDollar[3].IntegerValue
		}
	case 32:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:311
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue - IdlExprDollar[3].IntegerValue
		}
	case 33:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:316
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue
		}
	case 34:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:319
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue * IdlExprDollar[3].IntegerValue
		}
	case 35:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:322
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue / IdlExprDollar[3].IntegerValue
		}
	case 36:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:325
		{
			IdlExprVAL.IntegerValue = IdlExprDollar[1].IntegerValue % IdlExprDollar[3].IntegerValue
		}
	case 37:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:330
		{
			value, ok := IdlExprDollar[2].ConstValue.Value().(int64)
			if ok {
				IdlExprVAL.IntegerValue = value
			} else {
				SendError(IdlExprlex, "Value must be an integer (int64)")
				return ErrorMustbeAnInt
			}
		}
	case 38:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:339
		{
			value, ok := IdlExprDollar[1].ConstValue.Value().(int64)
			if ok {
				IdlExprVAL.IntegerValue = value
			} else {
				SendError(IdlExprlex, "Value must be an integer (int64)")
				return ErrorMustbeAnInt
			}
		}
	case 39:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:350
		{
			IdlExprVAL.IntegerValue = -1
		}
	case 40:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:353
		{
			IdlExprVAL.IntegerValue = 0
		}
	case 41:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:357
		{
			IdlExprVAL.IntegerValue = 99
		}
	case 42:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:362
		{
			lex, err := GetIdlExprContext(IdlExprlex)
			if err == nil {
				data := lex.FindScopeName(IdlExprDollar[1].DefinedType.GetName())
				if data == nil {
					IdlExprlex.Error(__yyfmt__.Sprintf("Could not find defined value %v", IdlExprDollar[1].DefinedType.GetName()))
					return 10003
				}
			} else {
				IdlExprlex.Error("Could not find lex")
				return NoLex
			}
		}
	case 43:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:375
		{
			IdlExprVAL.ConstValue = IdlExprDollar[1].ConstValue
		}
	case 44:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:378
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[2].IntegerValue, interfaces.Int64)
		}
	case 45:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:383
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].IntegerValue, interfaces.Int64)
		}
	case 46:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:386
		{
			IdlExprVAL.ConstValue = nil
		}
	case 47:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:389
		{
			IdlExprVAL.ConstValue = nil
		}
	case 48:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:392
		{
			IdlExprVAL.ConstValue = newConstantValue(IdlExprDollar[1].StringValue, interfaces.Char, 1)
		}
	case 49:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:395
		{
			IdlExprVAL.ConstValue = newConstantValue(IdlExprDollar[1].StringValue, interfaces.WChar, 1)
		}
	case 50:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:398
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].BoolValue, interfaces.Bool)
		}
	case 51:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:401
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].StringValue, interfaces.String)
		}
	case 52:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:404
		{
			IdlExprVAL.ConstValue = newConstantValueWithNoLength(IdlExprDollar[1].StringValue, interfaces.WideString)
		}
	case 53:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:409
		{
			IdlExprVAL.BoolValue = true
		}
	case 54:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:412
		{
			IdlExprVAL.BoolValue = false
		}
	case 56:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:419
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 57:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:422
		{
			nativeDecl := NewNativeDeclaration(IdlExprDollar[1].Identifier)
			IdlExprVAL.DefinitionDeclaration = nativeDecl
		}
	case 58:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:426
		{
			if IdlExprDollar[1].DefinitionDeclaration == nil {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl

			}
			if typeDecl, ok := IdlExprDollar[1].DefinitionDeclaration.(interfaces.ITypeDeclaration); ok {
				err := AddTypedefDcl(IdlExprlex, typeDecl)
				if err != nil {
					SendError(IdlExprlex, "AddTypedefDcl error")
					return ErrorOnAddTypedefDcl
				}
			} else {
				SendError(IdlExprlex, "AddTypedefDcl error")
				return ErrorOnAddTypedefDcl
			}

		}
	case 59:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:445
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 60:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:450
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchAlpha, IdlExprDollar[3].IntegerValue)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 61:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:462
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchByte, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 62:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:474
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchDate, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 63:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:486
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchTime, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 64:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:498
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchPrice04, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 65:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:510
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchPrice08, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 66:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:522
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchUInt08, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 67:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:534
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchUInt16, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 68:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:546
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchUInt32, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 69:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:558
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchUInt64, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 70:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:569
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchMessageNumber, IdlExprDollar[3].IntegerValue)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}

		}
	case 71:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:584
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 72:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:587
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 73:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:590
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 74:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:594
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 75:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:597
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 76:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:600
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 77:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:603
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 78:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:606
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 79:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:609
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 80:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:613
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Float, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 81:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:625
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Double, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 82:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:637
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.LongDouble, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 83:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:650
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 84:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:653
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 85:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:657
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 86:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:660
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 87:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:663
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 88:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:667
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Int16, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 89:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:680
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Int32, 0)
			if IdlExprVAL.DefinedType == nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 90:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:693
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Int64, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 91:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:707
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 92:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:710
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 93:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:713
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 94:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:718
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Uint16, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 95:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:731
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Uint32, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 96:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:744
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Uint64, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 97:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:758
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Char, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 98:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:772
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.WChar, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 99:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:785
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Bool, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 100:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:799
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Octet, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 101:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:813
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 102:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:816
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 103:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:819
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 104:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:822
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 105:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:825
		{
			IdlExprVAL.DefinedType = IdlExprDollar[1].DefinedType
		}
	case 106:
		IdlExprDollar = IdlExprS[IdlExprpt-18 : IdlExprpt+1]
//line yacc/idl.y:830
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}

			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.MitchBitField, []string{IdlExprDollar[3].Identifier, IdlExprDollar[5].Identifier, IdlExprDollar[7].Identifier, IdlExprDollar[9].Identifier, IdlExprDollar[11].Identifier, IdlExprDollar[13].Identifier, IdlExprDollar[15].Identifier, IdlExprDollar[17].Identifier})
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 107:
		IdlExprDollar = IdlExprS[IdlExprpt-6 : IdlExprpt+1]
//line yacc/idl.y:847
		{
			IdlExprVAL.DefinedType = TempleteTypes.NewSequenceType(IdlExprDollar[3].DefinedType, IdlExprDollar[5].IntegerValue)
		}
	case 108:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:850
		{
			IdlExprVAL.DefinedType = TempleteTypes.NewSequenceType(IdlExprDollar[3].DefinedType, -1)
		}
	case 109:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:855
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.String, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 110:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:868
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.String, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 111:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:882
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.WideString, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 112:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:894
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.WideString, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 113:
		IdlExprDollar = IdlExprS[IdlExprpt-6 : IdlExprpt+1]
//line yacc/idl.y:909
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Fixed, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 114:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:923
		{
			context, err := GetIdlExprLex(IdlExprlex)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("GetIdlExprLex failure"))
				return NoLex
			}
			IdlExprVAL.DefinedType, err = context.IDlBaseType.CreateType(interfaces.Fixed, 0)
			if err != nil {
				IdlExprlex.Error(__yyfmt__.Sprintf("%v", err))
				return TypeNotAvailable
			}
		}
	case 115:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:937
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 116:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:940
		{
			IdlExprVAL.DefinitionDeclaration = Newunion_dcl()
		}
	case 117:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:943
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 118:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:951
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration

		}
	case 119:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:955
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[1].DefinitionDeclaration
		}
	case 120:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:961
		{
			def := NewStructDefinition(IdlExprDollar[2].Identifier)
			member := IdlExprDollar[4].Member
			for member != nil {
				decl := member.Declarator
				for decl != nil {
					def.AddMember(member.DefinedType, decl)
					decl = decl.Next()
				}
				member = member.Next
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 121:
		IdlExprDollar = IdlExprS[IdlExprpt-4 : IdlExprpt+1]
//line yacc/idl.y:974
		{
			def := NewStructDefinition(IdlExprDollar[2].Identifier)
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 122:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:981
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator, nil)
		}
	case 123:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:984
		{
			IdlExprVAL.Member = NewMember(IdlExprDollar[1].Member.DefinedType, IdlExprDollar[1].Member.Declarator, IdlExprDollar[2].Member)
		}
	case 124:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:991
		{
			IdlExprVAL.DefinitionDeclaration = Newstruct_forward_dcl()
		}
	case 142:
		IdlExprDollar = IdlExprS[IdlExprpt-5 : IdlExprpt+1]
//line yacc/idl.y:1006
		{
			def := NewEnumDcl(IdlExprDollar[2].Identifier)
			decl := IdlExprDollar[4].Declarator
			for decl != nil {
				def.AddMember(decl)
				decl = decl.Next()
			}
			IdlExprVAL.DefinitionDeclaration = def
		}
	case 143:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:1016
		{
		}
	case 144:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:1017
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
		}
	case 145:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:1023
		{

		}
	case 146:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:1028
		{

		}
	case 147:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:1031
		{

		}
	case 148:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:1036
		{
		}
	case 149:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:1040
		{
			IdlExprVAL.Identifier = IdlExprDollar[2].Identifier
		}
	case 150:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:1045
		{
			IdlExprVAL.Identifier = IdlExprDollar[1].Identifier
		}
	case 151:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:1050
		{
			IdlExprVAL.DefinitionDeclaration = IdlExprDollar[2].DefinitionDeclaration
		}
	case 152:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:1059
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 153:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:1062
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinedType, IdlExprDollar[2].Declarator)
		}
	case 154:
		IdlExprDollar = IdlExprS[IdlExprpt-2 : IdlExprpt+1]
//line yacc/idl.y:1065
		{
			IdlExprVAL.DefinitionDeclaration = Newtypedef_dcl(IdlExprDollar[1].DefinitionDeclaration, IdlExprDollar[2].Declarator)
		}
	case 155:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:1074
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 156:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:1077
		{

		}
	case 157:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:1080
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	case 158:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:1089
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, IdlExprDollar[3].ConstValue)
		}
	case 159:
		IdlExprDollar = IdlExprS[IdlExprpt-1 : IdlExprpt+1]
//line yacc/idl.y:1092
		{
			IdlExprVAL.Declarator = NewDeclarator(IdlExprDollar[1].Identifier, nil)
		}
	case 160:
		IdlExprDollar = IdlExprS[IdlExprpt-3 : IdlExprpt+1]
//line yacc/idl.y:1095
		{
			IdlExprDollar[1].Declarator.SetNext(IdlExprDollar[3].Declarator)
			IdlExprVAL.Declarator = IdlExprDollar[1].Declarator
		}
	}
	goto IdlExprstack /* stack new state and value */
}
