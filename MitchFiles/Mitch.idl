native  MitchAlpha001;
native  MitchAlpha004;
native  MitchAlpha006;
native  MitchAlpha012;
native  MitchAlpha025;
native  MitchAlpha030;
native  MitchAlpha189;


native  MitchBitField;
native  MitchByte;
native  MitchDate;
native  MitchTime;
native  MitchPrice04;
native  MitchPrice08;
native  MitchUInt08;
native  MitchUInt16;
native  MitchUInt32;
native  MitchUInt64;



//Time
//Sent by the server for every second for which at least one application message is generated. This message is not transmitted during periods where no other application messages are generated.
//√
//×
//√
//


struct Time
{
    MitchUInt16 Length = 7;
    MitchByte   MessageType = 0x54;
    MitchUInt32 Seconds;
};

//System Event
//Sent by the server to indicate the start and end of the day.
//√
//×
//√
//


enum TEventCode
{
    EndOfDay = 'C',
    StartOfDay = 'O'
};
struct SystemEvent
{
    MitchUInt16 Length = 8;
    MitchByte   MessageType = 0x53;
    MitchUInt32 Nanosecond;
    TEventCode   EventCode;
};


//Symbol Directory
//Used to disseminate information (e.g. Instrument ID, segment, ISIN, etc.) on each instrument. The previous closing price of each instrument is also disseminated.
//√
//√
//√
//


enum SymbolDirectorySymbolStatus
{
    Halted = 'H',
    Suspended = 'S',
    Inactive = 'a'
};


enum SymbolDirectoryOptionType{
    CallOption = 'C',
    PutOption = 'P'
};

typedef bitfield
    <
        InverseOrderBook,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > SymbolDirectoryFlags;

typedef bitfield
    <
        Regular,
        OffBook,
        b2,
        b3,
        b4,
        BulletinBoard,
        NegotiatedTrades,
        b7
    > SymbolDirectorySubBook;


enum SymbolDirectorySettlementMethod{
    Cash = 'C',
    Physical = 'P'
};

struct SymbolDirectory
{
    MitchUInt16                     Length;
    MitchByte                       MessageType = 0x52;
    MitchUInt32                     Nanosecond;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved;
    MitchByte                       Reserved;
    SymbolDirectorySymbolStatus     SymbolStatus;
    MitchAlpha012                   ISIN;
    MitchAlpha025                   Symbol;
    MitchAlpha012                   TIDM;
    MitchAlpha006                   Segment;
    MitchPrice08                      PreviousClosePrice;
    MitchDate                       ExpirationDate;
    MitchAlpha025                   Underlying;
    MitchPrice08                      StrikePrice;
    SymbolDirectoryOptionType       OptionType;
    MitchAlpha006                   Issuer;
    MitchDate                       IssueDate;
    MitchPrice08                      Coupon;
    SymbolDirectoryFlags            Flags;
    SymbolDirectorySubBook          SubBook;
    MitchAlpha189                   CorporateAction;
    MitchAlpha025                   Leg1Symbol;
    MitchAlpha025                   Leg2Symbol;
    MitchPrice08                      ContractMultiplier;
    SymbolDirectorySettlementMethod SettlementMethod;
    MitchAlpha030                   InstrumentSubCategory;
};


//Symbol Status
//Indicates the trading session (e.g. opening auction call, continuous trading, etc.) that currently applies to an instrument.
//√
//√
//√
//


enum SymbolStatusTradingStatus{
    Halt = 'H',
    RegularTrading = 'T',
    OpeningAuctionCall = 'a',
    PostClose = 'b',
    MarketClose = 'c',
    ClosingAuctionCall = 'd',
    VolatilityAuctionCall = 'e',
    EODVolumeAuctionCall = 'E',
    ReOpeningAuctionCall = 'f',
    Pause = 'l',
    FuturesCloseOut = 'p',
    ClosingPriceCross = 's',
    IntraDayAuctionCall = 'u',
    EndTradeReporting = 'v',
    NoActiveSession = 'w',
    EndOfPostClose = 'x',
    StarOofTrading = 'y',
    ClosingPricePublication = 'z'
};



enum SymbolStatusSessionChangeReason
{
    ScheduledTransition = 0,
    ExtendedByMarketOps = 1,
    ShortenedByMarketOps = 2,
    MarketOrderImbalance = 3,
    PriceOutsideRange = 4,
    CircuitBreakerTripped = 5,
    Unavailable = 9
};



enum SymbolStatusBookType
{
    OnBook           = 1,
    OffBook          = 2,
    BulletinBoard    = 9,
    NegotiatedTrades = 11
};

struct SymbolStatus
{
    MitchUInt16                     Length;
    MitchByte                       MessageType = 0x48;
    MitchUInt32                     Nanosecond;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved;
    MitchByte                       Reserved;
    SymbolStatusTradingStatus       TradingStatus;
    MitchBitField                   Flags;
    MitchAlpha004                   Reason;
    SymbolStatusSessionChangeReason SessionChangeReason;
    MitchTime                       NewEndTime;
    SymbolStatusBookType            BookType;
};

//Add Order
//Sent to indicate that a visible limit or market order is added to the order book.
//√
//√
//√
//


enum AddOrderSide
{
    BuyOrder = 'B',
    SellOrder = 'S'
};


typedef bitfield
    <
        b0,
        b1,
        b2,
        b3,
        MarketOrder,
        BulletinBoard,
        b6,
        b7
    > AddOrderFlags;




struct AddOrder
{
    MitchUInt16     Length;
    MitchByte       MessageType = 0x41;
    MitchUInt32     Nanosecond;
    MitchUInt64     OrderId;
    AddOrderSide    Side;
    MitchUInt32     Quantity;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved;
    MitchByte       Reserved;
    MitchPrice08      Price;
    AddOrderFlags   Flags;
};

//Add Attributed Order
//Indicates that an attributable limit order is added to the order book. The identity of the submitting firm is included in the message. Only applicable for Derivatives/Bonds markets.
//√
//√
//√
//

struct AddAttributedOrder
{
    MitchUInt16     Length;
    MitchByte       MessageType = 0x46;
    MitchUInt32     Nanosecond;
    MitchByte OrderID;
    MitchUInt32 Side;
    MitchUInt64 Quantity;
    MitchByte InstrumentID;
    MitchUInt32 Price;
    MitchUInt32 Attribution;
    MitchBitField Flags;
};

//Order Deleted
//Sent to indicate that the remainder of a visible order is cancelled.
//√
//×
//√
//
struct OrderDeleted
{
    MitchUInt16 Length;
    MitchByte MessageType;
    MitchUInt32 Nanosecond;
    MitchUInt64 OrderID;
};


//Order Modified
//Indicates that the quantity or price of a visible order has been updated. The message will include an indication whether the order has retained or lost its time priority.
//√
//×
//√
//

struct OrderModified
{
    MitchUInt16 Length;
    MitchByte MessageType;
    MitchUInt32 Nanosecond;
    MitchUInt64 OrderID;
    MitchUInt32 NewQuantity;
    MitchPrice08 NewPrice;
    MitchBitField Flags;
};

//Order Book Clear
//Sent to instruct Recipients to remove all orders from the order book for the specified instrument.
//√
//×
//√
//



struct OrderBookClear
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     InstrumentID;
    MitchUInt08 SubBook;
    MitchByte BookType;
};

//Order Executed
//(Automated Trade)
//Indicates that the visible portion of an order is fully or partially filled at its displayed price. The executed quantity is included in the message.
//√
//×
//√
//

struct OrderExecuted
{
    MitchUInt16 Length;
    MitchByte   MessageType;
    MitchUInt32 Nanosecond;
    MitchUInt64 OrderID;
    MitchUInt32 ExecutedQuantity;
    MitchUInt64 TradeID;
    MitchPrice08  LastOptPx;
    MitchPrice08  Volatility;
    MitchPrice08  UnderlyingReferencePrice;
};

//Order Executed With Price/ Size
//(Automated Trade)
//Sent if a visible order is fully or partially filled at a price that is different from its displayed price. The executed quantity and price is included in the message along with an indication of whether the trade should update time and sales and statistics displays.
//√
//×
//√
//




struct OrderExecutedWithPriceSize
{
    MitchUInt16 Length;
    MitchByte   MessageType;
    MitchUInt32 Nanosecond;
    MitchUInt64 OrderID;
    MitchUInt32 ExecutedQuantity;
    MitchUInt32 DisplayQuantity;
    MitchUInt64 TradeID;
    MitchByte   Printable;
    MitchPrice08  Price;
    MitchPrice08  LastOptPx;
    MitchPrice08  Volatility;
    MitchPrice08  UnderlyingReferencePrice;
};

//Trade
//(Automated)
//Sent if a hidden Pegged or Pegged limit order is fully or partially filled and therefore results in a trade.
//√
//×
//√
//






struct Trade
{
    MitchUInt16 Length;
    MitchByte   MessageType;
    MitchUInt32 Nanosecond;
    MitchUInt32 ExecutedQuantity;
    MitchUInt32 InstrumentID;
    MitchByte   Reserved;
    MitchByte   Reserved;
    MitchPrice08  Price;
    MitchUInt64 TradeID;
    MitchUInt08  SubBook;
    MitchBitField  Flags;
    MitchAlpha006  TradeSubType;
    MitchPrice08  LastOptPx;
    MitchPrice08  Volatility;
    MitchPrice08  UnderlyingReferencePrice;
};


//Auction Trade
//Sent to report details of any auction trades (e.g. opening, closing, etc.). The message indicates the price and bulk volume associated with the auction trades.
//√
//×
//√
//







struct AuctionTrade
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     Quantity;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved;
    MitchByte       Reserved;
    MitchPrice08    Price;
    MitchUInt64     TradeID;
    MitchByte       AuctionType;
    MitchPrice08    LastOptPx;
    MitchPrice08    Volatility;
    MitchPrice08    UnderlyingReferencePrice;
};

//Off Book Trade
//Sent to report the details of a trade negotiated outside the System yet reported to the System in accordance with the JSE Rules and Directives.
//√
//×
//√
//







struct OffBookTrade
{

    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     ExecutedQuantity;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved;
    MitchByte       Reserved;
    MitchPrice08    Price;
    MitchUInt64     TradeID;
    MitchAlpha006   OffBookTradeType;
    MitchTime       TradeTime;
    MitchDate       TradeDate;
    MitchPrice08    LastOptPx;
    MitchPrice08    Volatility;
    MitchPrice08    UnderlyingReferencePrice;
};

//Trade Break
//Indicates that a previously published trade (On Book or Off Book) is cancelled.
//√
//×
//√
//


struct TradeBreak
{
    MitchUInt16 Length;
    MitchByte   MessageType;
    MitchUInt32 Nanosecond;
    MitchUInt64 TradeID;
    MitchByte   TradeType;
};

//Recovery Trade
//Used to disseminate the details of missed On Book and Off Book trades on the Snapshot channel.
//×
//√
//×
//



struct RecoveryTrade
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     ExecutedQuantity;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved;
    MitchByte       Reserved;
    MitchPrice08    Price;
    MitchUInt64     TradeID;
    MitchByte       AuctionType;
    MitchAlpha006   OffBookRFQTradeType;
    MitchTime       TradeTime;
    MitchDate       TradeDate;
    MitchByte       ActionType;
    MitchUInt08     SubBook;
    MitchBitField   Flags;
    MitchPrice08    LastOptPx;
    MitchPrice08    Volatility;
    MitchPrice08    UnderlyingReferencePrice;
};


//Auction Info
//Used to disseminate the indicative auction price and the tradable quantity (volume) at this price.
//√
//×
//√
//








struct AuctionInfo
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     PairedQuantity;
    MitchUInt32     Reserved;
    MitchByte       ImbalanceDirection;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved;
    MitchByte       Reserved;
    MitchPrice08    Price;
    MitchByte       AuctionType;
};

//Statistics
//Used to disseminate the official opening and closing prices.
//√
//√
//√
//


struct Statistics
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved;
    MitchByte       Reserved;
    MitchAlpha006   StatisticType;
    MitchPrice08    Price;
    MitchAlpha006   OpenCloseIndicator;
    MitchUInt08      SubBook;
};

//Extended Statistics
//Used to disseminate the High Price, Low Price, VWAP, Volume, Turnover and Number of Trades.
//√
//√
//√
//



struct ExtendedStatistics
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     InstrumentID;
    MitchPrice08    HighPrice;
    MitchPrice08    LowPrice;
    MitchPrice08    VWAP;
    MitchUInt32     Volume;
    MitchPrice04    Turnover;
    MitchUInt32     NumberofTrades;
    MitchAlpha001   ReservedField;
    MitchUInt08      SubBook;
    MitchPrice08    NotionalExposure;
    MitchPrice08    NotionalDeltaExposure;
    MitchPrice08    OpenInterest;
};
//News
//Used to publish market operations announcements.
//√
//×
//√
//




struct News
{
    MitchUInt16 Length;
    MitchByte   MessageType;
    MitchUInt32 Nanosecond;
    MitchTime   Time;
    MitchByte   Urgency;
    MitchAlpha001  Headline;
    MitchAlpha001  Text;
    MitchAlpha001  Instruments;
    MitchAlpha001  Underlyings;
};

//Top Of Book
//Used to communicate the best bid and the best offer prices and sizes of an order book in Top of Book service
//√
//√
//×






struct TopOfBook
{
    MitchUInt16    Length;
    MitchByte      MessageType;
    MitchUInt32    Nanosecond;
    MitchUInt32    instrumentID;
    MitchUInt16    ReserveField;
    MitchBitField SubBook;
    MitchByte      Action;
    MitchByte      Side;
    MitchPrice08     Price;
    MitchUInt32    Quantity;
    MitchUInt32    MarketOrderQuantity;
    MitchUInt32   ReservedField;
};