//Time
//Sent by the server for every second for which at least one application message is generated. This message is not transmitted during periods where no other application messages are generated.
//√
//×
//√
//


struct TimeMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x54>    MessageType;
    MitchUInt32                     Seconds;
};

//System Event
//Sent by the server to indicate the start and end of the day.
//√
//×
//√
//


enum TEventCode
{
    EndOfDay = 'C',
    StartOfDay = 'O'
};

struct SystemEventMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x53>    MessageType;
    MitchUInt32                     Nanosecond;
    TEventCode                      EventCode;
};


//Symbol Directory
//Used to disseminate information (e.g. Instrument ID, segment, ISIN, etc.) on each instrument. The previous closing price of each instrument is also disseminated.
//√
//√
//√
//


enum SymbolDirectorySymbolStatus
{
    Halted ='H',
    Suspended ='S',
    Inactive ='a'
};


enum SymbolDirectoryOptionType{
    CallOption = 'C',
    PutOption = 'P'
};

typedef MitchBitField
    <
        InverseOrderBook,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > SymbolDirectoryFlags;

typedef  MitchBitField
    <
        Regular,
        OffBook,
        b2,
        b3,
        b4,
        BulletinBoard,
        NegotiatedTrades,
        b7
    > SymbolDirectorySubBook;


enum SymbolDirectorySettlementMethod{
    Cash = 'C',
    Physical ='P'
};

struct SymbolDirectoryMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x52>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    SymbolDirectorySymbolStatus     SymbolStatus;
    MitchAlpha<12>                   ISIN;
    MitchAlpha<25>                   Symbol;
    MitchAlpha<12>                   TIDM;
    MitchAlpha<6>                   Segment;
    MitchPrice08                      PreviousClosePrice;
    MitchDate                       ExpirationDate;
    MitchAlpha<25>                   Underlying;
    MitchPrice08                      StrikePrice;
    SymbolDirectoryOptionType       OptionType;
    MitchAlpha<6>                   Issuer;
    MitchDate                       IssueDate;
    MitchPrice08                      Coupon;
    SymbolDirectoryFlags            Flags;
    SymbolDirectorySubBook          SubBook;
    MitchAlpha<189>                   CorporateAction;
    MitchAlpha<25>                   Leg1Symbol;
    MitchAlpha<25>                   Leg2Symbol;
    MitchPrice08                      ContractMultiplier;
    SymbolDirectorySettlementMethod SettlementMethod;
    MitchAlpha<30>                   InstrumentSubCategory;
};


//Symbol Status
//Indicates the trading session (e.g. opening auction call, continuous trading, etc.) that currently applies to an instrument.
//√
//√
//√
//


enum SymbolStatusTradingStatus{
    Halt = 'H',
    RegularTrading = 'T',
    OpeningAuctionCall = 'a',
    PostClose = 'b',
    MarketClose = 'c',
    ClosingAuctionCall = 'd',
    VolatilityAuctionCall = 'e',
    EODVolumeAuctionCall = 'E',
    ReOpeningAuctionCall = 'f',
    Pause = 'l',
    FuturesCloseOut = 'p',
    ClosingPriceCross = 's',
    IntraDayAuctionCall = 'u',
    EndTradeReporting = 'v',
    NoActiveSession = 'w',
    EndOfPostClose = 'x',
    StarOofTrading = 'y',
    ClosingPricePublication = 'z'
};



enum SymbolStatusSessionChangeReason
{
    ScheduledTransition = 0,
    ExtendedByMarketOps = 1,
    ShortenedByMarketOps = 2,
    MarketOrderImbalance = 3,
    PriceOutsideRange = 4,
    CircuitBreakerTripped = 5,
    Unavailable = 9
};



enum SymbolStatusBookType
{
    OnBook = 1,
    OffBook = 2,
    BulletinBoard = 9,
    NegotiatedTrades = 11
};

typedef  MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > SymbolStatusMessageFlags;

struct SymbolStatusMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x48>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    SymbolStatusTradingStatus       TradingStatus;
    SymbolStatusMessageFlags        Flags;
    MitchAlpha<4>                   Reason;
    SymbolStatusSessionChangeReason SessionChangeReason;
    MitchTime                       NewEndTime;
    SymbolStatusBookType            BookType;
};

//Add Order
//Sent to indicate that a visible limit or market order is added to the order book.
//√
//√
//√
//


enum OrderSide
{
    BuyOrder = 'B',
    SellOrder = 'S'
};


typedef MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        MarketOrder,
        BulletinBoard,
        b6,
        b7
    > AddOrderFlags;




struct AddOrderMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x41>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderId;
    OrderSide                       Side;
    MitchUInt32                     Quantity;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    MitchPrice08                    Price;
    AddOrderFlags                   Flags;
};

//Add Attributed Order
//Indicates that an attributable limit order is added to the order book. The identity of the submitting firm is included in the message. Only applicable for Derivatives/Bonds markets.
//√
//√
//√
//





typedef MitchBitField
    <
        Regular,
        b1,
        b2,
        b3,
        b4,
        BulletinBoard,
        b6,
        b7
    > AddAttributedOrderFlags;




struct AddAttributedOrderMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x46>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
    OrderSide                       Side;
    MitchUInt32                     Quantity;
    MitchUInt32                     InstrumentID;
    MitchPrice08                    Price;
    MitchAlpha<11>                  Attribution;
    AddAttributedOrderFlags         Flags;
};

//Order Deleted
//Sent to indicate that the remainder of a visible order is cancelled.
//√
//×
//√
//
struct OrderDeletedMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x44>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
};


//Order Modified
//Indicates that the quantity or price of a visible order has been updated. The message will include an indication whether the order has retained or lost its time priority.
//√
//×
//√
//


typedef MitchBitField
    <
        PriorityFlag,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > OrderModifiedFlags;

struct OrderModifiedMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x55>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
    MitchUInt32                     NewQuantity;
    MitchPrice08                    NewPrice;
    OrderModifiedFlags              Flags;
};

//Order Book Clear
//Sent to instruct Recipients to remove all orders from the order book for the specified instrument.
//√
//×
//√
//








enum OrderBookClearSubBook
{
    OnBook = 1,
    OffBook = 2,
    BulletinBoard = 9,
    NegotiatedTrades = 11
};


enum OrderBookClearBookType
{
    MBO = 0,
    TopOfBook = 1
};


struct OrderBookClearMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x79>    MessageType = 0x79;
    MitchUInt32                     Nanosecond;
    MitchUInt32                     InstrumentID;
    OrderBookClearSubBook           SubBook;
    OrderBookClearBookType          BookType;
};

//Order Executed
//(Automated Trade)
//Indicates that the visible portion of an order is fully or partially filled at its displayed price. The executed quantity is included in the message.
//√
//×
//√
//

struct OrderExecutedMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x45>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
    MitchUInt32                     ExecutedQuantity;
    MitchUInt64                     TradeID;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};

//Order Executed With Price/ Size
//(Automated Trade)
//Sent if a visible order is fully or partially filled at a price that is different from its displayed price. The executed quantity and price is included in the message along with an indication of whether the trade should update time and sales and statistics displays.
//√
//×
//√
//




struct OrderExecutedWithPriceSizeMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x43>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
    MitchUInt32                     ExecutedQuantity;
    MitchUInt32                     DisplayQuantity;
    MitchUInt64                     TradeID;
    MitchByte                       Printable;
    MitchPrice08                    Price;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};

//Trade
//(Automated)
//Sent if a hidden Pegged or Pegged limit order is fully or partially filled and therefore results in a trade.
//√
//×
//√
//





typedef MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > TradeMessageFlags;



enum TradeMessageSubBook
{
    Regular = 1,
    NegotiatedTrades = 11
};




struct TradeMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x50>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt32                     ExecutedQuantity;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    MitchPrice08                    Price;
    MitchUInt64                     TradeID;
    TradeMessageSubBook             SubBook;
    TradeMessageFlags               Flags;
    MitchAlpha<4>                   TradeSubType;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};


//Auction Trade
//Sent to report details of any auction trades (e.g. opening, closing, etc.). The message indicates the price and bulk volume associated with the auction trades.
//√
//×
//√
//







struct AuctionTradeMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x51>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt32                     Quantity;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    MitchPrice08                    Price;
    MitchUInt64                     TradeID;
    MitchByte                       AuctionType;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};

//Off Book Trade
//Sent to report the details of a trade negotiated outside the System yet reported to the System in accordance with the JSE Rules and Directives.
//√
//×
//√
//







struct OffBookTradeMessage
{

    MitchUInt16                     Length;
    MitchMessageNumberType<0x78>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt32                     ExecutedQuantity;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    MitchPrice08                    Price;
    MitchUInt64                     TradeID;
    MitchAlpha<6>                   OffBookTradeType;
    MitchTime                       TradeTime;
    MitchDate                       TradeDate;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};

//Trade Break
//Indicates that a previously published trade (On Book or Off Book) is cancelled.
//√
//×
//√
//


struct TradeBreakMessage
{
    MitchUInt16 Length;
    MitchMessageNumberType<0x42>   MessageType;
    MitchUInt32 Nanosecond;
    MitchUInt64 TradeID;
    MitchByte   TradeType;
};

//Recovery Trade
//Used to disseminate the details of missed On Book and Off Book trades on the Snapshot channel.
//×
//√
//×
//


typedef MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > RecoveryTradeMessageFlags;




enum RecoveryTradeMessageSubBook
{
    Regular = 1,
    NegotiatedTrades = 11
};




struct RecoveryTradeMessage
{
    MitchUInt16                 Length;
    MitchMessageNumberType<0x76>                   MessageType;
    MitchUInt32                 Nanosecond;
    MitchUInt32                 ExecutedQuantity;
    MitchUInt32                 InstrumentID;
    MitchByte                   Reserved01;
    MitchByte                   Reserved02;
    MitchPrice08                Price;
    MitchUInt64                 TradeID;
    MitchByte                   AuctionType;
    MitchAlpha<6>               OffBookRFQTradeType;
    MitchTime                   TradeTime;
    MitchDate                   TradeDate;
    MitchByte                   ActionType;
    RecoveryTradeMessageSubBook SubBook;
    RecoveryTradeMessageFlags   Flags;
    MitchPrice08                LastOptPx;
    MitchPrice08                Volatility;
    MitchPrice08                UnderlyingReferencePrice;
};


//Auction Info
//Used to disseminate the indicative auction price and the tradable quantity (volume) at this price.
//√
//×
//√
//








struct AuctionInfoMessage
{
    MitchUInt16     Length;
    MitchMessageNumberType<0x49>       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     PairedQuantity;
    MitchUInt32     Reserved01;
    MitchByte       ImbalanceDirection;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved02;
    MitchByte       Reserved03;
    MitchPrice08    Price;
    MitchByte       AuctionType;
};

//Statistics
//Used to disseminate the official opening and closing prices.
//√
//√
//√
//





enum TStatisticsMessageOpenCloseIndicator{
    UT = 'A',
    AT = 'B',
    MidofBBO = 'C',
    LastAT = 'D',
    LastUT = 'E',
    Manual = 'F',
    VWAP = 'H',
    PreviousClose = 'I',
    Zero = 'J',
    BestBid = 'U',
    BestOffer = 'V',
    ReferencePrice = 'Y'
};


enum TStatisticsMessageSubBook{
    Regular =1,
    OffBook =2,
    BulletinBoard=9
};




struct StatisticsMessage
{
    MitchUInt16     Length;
    MitchMessageNumberType<0x77>       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved01;
    MitchByte       Reserved02;
    MitchAlpha<6>   StatisticType;
    MitchPrice08    Price;
    TStatisticsMessageOpenCloseIndicator   OpenCloseIndicator;
    TStatisticsMessageSubBook SubBook;
};

//Extended Statistics
//Used to disseminate the High Price, Low Price, VWAP, Volume, Turnover and Number of Trades.
//√
//√
//√
//



struct ExtendedStatisticsMessage
{
    MitchUInt16     Length;
    MitchMessageNumberType<0x80>       MessageType;
    MitchUInt32     Nanosecond;
    MitchUInt32     InstrumentID;
    MitchPrice08    HighPrice;
    MitchPrice08    LowPrice;
    MitchPrice08    VWAP;
    MitchUInt32     Volume;
    MitchPrice04    Turnover;
    MitchUInt32     NumberofTrades;
    MitchAlpha<1>   Reserved01;
    TStatisticsMessageSubBook      SubBook;
    MitchPrice08    NotionalExposure;
    MitchPrice08    NotionalDeltaExposure;
    MitchPrice08    OpenInterest;
};
//News
//Used to publish market operations announcements.
//√
//×
//√
//




struct NewsMessage
{
    MitchUInt16 Length;
    MitchMessageNumberType<0x75>   MessageType;
    MitchUInt32 Nanosecond;
    MitchTime   Time;
    MitchByte   Urgency;
    MitchAlpha<1>  Headline;
    MitchAlpha<1>  Text;
    MitchAlpha<1>  Instruments;
    MitchAlpha<1>  Underlyings;
};

//Top Of Book
//Used to communicate the best bid and the best offer prices and sizes of an order book in Top of Book service
//√
//√
//×


typedef MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > TopOfBookMessageSubBook;





struct TopOfBookMessage
{
    MitchUInt16                     Length;
    MitchMessageNumberType<0x71>    MessageType;
    MitchUInt32                     Nanosecond;
    MitchUInt32                     instrumentID;
    MitchUInt16                     ReserveField;
    TopOfBookMessageSubBook         SubBook;
    MitchByte                       Action;
    MitchByte                       Side;
    MitchPrice08                    Price;
    MitchUInt32                     Quantity;
    MitchUInt32                     MarketOrderQuantity;
    MitchUInt32                     Reserved01;
    MitchUInt32                     Reserved02;
};