native  MitchAlpha001;
native  MitchAlpha004;
native  MitchAlpha006;
native  MitchAlpha012;
native  MitchAlpha025;
native  MitchAlpha030;
native  MitchAlpha189;


native  MitchBitField;
native  MitchByte;
native  MitchDate;
native  MitchTime;
native  MitchPrice;
native  MitchUInt08;
native  MitchUInt16;
native  MitchUInt32;
native  MitchUInt64;

//Time
//Sent by the server for every second for which at least one application message is generated. This message is not transmitted during periods where no other application messages are generated.
//√
//×
//√
//


struct Time
{
    MitchUInt16 Length = 7;
    MitchByte   MessageType = 0x54;
    MitchUInt32 Seconds;
};

//System Event
//Sent by the server to indicate the start and end of the day.
//√
//×
//√
//


enum TEventCode
{
    EndOfDay = 'S',
    StartOfDay = '1'
};
struct SystemEvent
{
    MitchUInt16 Length = 8;
    MitchByte   MessageType = 0x53;
    MitchUInt32 Nanosecond;
    TEventCode   EventCode;
};


//Symbol Directory
//Used to disseminate information (e.g. Instrument ID, segment, ISIN, etc.) on each instrument. The previous closing price of each instrument is also disseminated.
//√
//√
//√
//
struct SymbolDirectory
{
    MitchUInt16     Length;
    MitchByte       MessageType = 0x52;
    MitchUInt32     Nanosecond;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved;
    MitchByte       Reserved;
    MitchAlpha001   SymbolStatus;
    MitchAlpha012   ISIN;
    MitchAlpha025   Symbol;
    MitchAlpha012   TIDM;
    MitchAlpha006   Segment;
    MitchPrice      PreviousClosePrice;
    MitchDate       ExpirationDate;
    MitchAlpha025   Underlying;
    MitchPrice      StrikePrice;
    MitchAlpha001   OptionType;
    MitchAlpha006   Issuer;
    MitchDate       IssueDate;
    MitchPrice      Coupon;
    MitchBitField   Flags;
    MitchBitField   SubBook;
    MitchAlpha189   CorporateAction;
    MitchAlpha025   Leg1Symbol;
    MitchAlpha025   Leg2Symbol;
    MitchPrice      ContractMultiplier;
    MitchAlpha001   SettlementMethod;
    MitchAlpha030   InstrumentSubCategory;


};


//Symbol Status
//Indicates the trading session (e.g. opening auction call, continuous trading, etc.) that currently applies to an instrument.
//√
//√
//√
//

struct SymbolStatus
{
    MitchUInt16     Length;
    MitchByte       MessageType = 0x48;
    MitchUInt32     Nanosecond;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved;
    MitchByte       Reserved;
    MitchByte       TradingStatus;
    MitchBitField   Flags;
    MitchAlpha004   Reason;
    MitchByte       SessionChangeReason;
    MitchTime       NewEndTime;
    MitchByte       BookType;
};

//Add Order
//Sent to indicate that a visible limit or market order is added to the order book.
//√
//√
//√
//

struct AddOrder
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Add Attributed Order
//Indicates that an attributable limit order is added to the order book. The identity of the submitting firm is included in the message. Only applicable for Derivatives/Bonds markets.
//√
//√
//√
//

struct AddAttributedOrder
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Order Deleted
//Sent to indicate that the remainder of a visible order is cancelled.
//√
//×
//√
//
struct OrderDeleted
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};


//Order Modified
//Indicates that the quantity or price of a visible order has been updated. The message will include an indication whether the order has retained or lost its time priority.
//√
//×
//√
//

struct OrderModified
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Order Book Clear
//Sent to instruct Recipients to remove all orders from the order book for the specified instrument.
//√
//×
//√
//

struct OrderBookClear
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Order Executed
//(Automated Trade)
//Indicates that the visible portion of an order is fully or partially filled at its displayed price. The executed quantity is included in the message.
//√
//×
//√
//

struct OrderExecuted
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Order Executed With Price/ Size
//(Automated Trade)
//Sent if a visible order is fully or partially filled at a price that is different from its displayed price. The executed quantity and price is included in the message along with an indication of whether the trade should update time and sales and statistics displays.
//√
//×
//√
//

struct OrderExecutedWithPriceSize
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Trade
//(Automated)
//Sent if a hidden Pegged or Pegged limit order is fully or partially filled and therefore results in a trade.
//√
//×
//√
//

struct Trade
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};


//Auction Trade
//Sent to report details of any auction trades (e.g. opening, closing, etc.). The message indicates the price and bulk volume associated with the auction trades.
//√
//×
//√
//

struct AuctionTrade
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Off Book Trade
//Sent to report the details of a trade negotiated outside the System yet reported to the System in accordance with the JSE Rules and Directives.
//√
//×
//√
//

struct OffBookTrade
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Trade Break
//Indicates that a previously published trade (On Book or Off Book) is cancelled.
//√
//×
//√
//
struct TradeBreak
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Recovery Trade
//Used to disseminate the details of missed On Book and Off Book trades on the Snapshot channel.
//×
//√
//×
//

struct RecoveryTrade
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};


//Auction Info
//Used to disseminate the indicative auction price and the tradable quantity (volume) at this price.
//√
//×
//√
//

struct AuctionInfo
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Statistics
//Used to disseminate the official opening and closing prices.
//√
//√
//√
//

struct Statistics
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Extended Statistics
//Used to disseminate the High Price, Low Price, VWAP, Volume, Turnover and Number of Trades.
//√
//√
//√
//

struct ExtendedStatistics
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};
//News
//Used to publish market operations announcements.
//√
//×
//√
//

struct News
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};

//Top Of Book
//Used to communicate the best bid and the best offer prices and sizes of an order book in Top of Book service
//√
//√
//×


struct TopOfBook
{
    MitchUInt16     Length;
    MitchByte       MessageType;
    MitchUInt32     Nanosecond;
};