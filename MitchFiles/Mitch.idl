struct UnitLength
{
    MitchUInt16 Length;
};

struct UnitHeader
{
    MitchByte MessageCount;
    MitchByte MarketDataGroup;
    MitchUInt32 SequenceNumber;
};

struct MessageHeader
{
    MitchUInt16 Length;
    MitchByte MessageType;
};



struct<7, 0x54> TimeMessage
{
    MitchUInt32                     Seconds;
};

enum TEventCode
{
    EndOfDay = 'C',
    StartOfDay = 'O'
};

struct<8, 0x53> SystemEventMessage
{
    MitchUInt32                     Nanosecond;
    TEventCode                      EventCode;
};

enum SymbolDirectorySymbolStatus
{
    Halted ='H',
    Suspended ='S',
    Inactive ='a'
};


enum SymbolDirectoryOptionType{
    CallOption = 'C',
    PutOption = 'P'
};

typedef MitchBitField
    <
        InverseOrderBook,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > SymbolDirectoryFlags;

typedef  MitchBitField
    <
        Regular,
        OffBook,
        b2,
        b3,
        b4,
        BulletinBoard,
        NegotiatedTrades,
        b7
    > SymbolDirectorySubBook;


enum SymbolDirectorySettlementMethod{
    Cash = 'C',
    Physical ='P'
};

struct<332, 0x52> SymbolDirectoryMessage
{
    MitchUInt32                         Nanosecond;
    MitchUInt32                         InstrumentID;
    MitchByte                           Reserved01;
    MitchByte                           Reserved02;
    SymbolDirectorySymbolStatus         SymbolStatus;
    MitchAlpha<12>                      Isin;
    MitchAlpha<25>                      Symbol;
    MitchAlpha<12>                      Tidm;
    MitchAlpha<6>                       Segment;
    MitchPrice08                        PreviousClosePrice;
    MitchDate                           ExpirationDate;
    MitchAlpha<25>                      Underlying;
    MitchPrice08                        StrikePrice;
    SymbolDirectoryOptionType           OptionType;
    MitchAlpha<6>                       Issuer;
    MitchDate                           IssueDate;
    MitchPrice08                        Coupon;
    SymbolDirectoryFlags                Flags;
    SymbolDirectorySubBook              SubBook;
    MitchAlpha<189>                     CorporateAction;
//    MitchAlpha<25>                      Leg1Symbol;
//    MitchAlpha<25>                      Leg2Symbol;
//    MitchPrice08                        ContractMultiplier;
//    SymbolDirectorySettlementMethod     SettlementMethod;
//    MitchAlpha<30>                      InstrumentSubCategory;
};


enum SymbolStatusTradingStatus{
    Halt = 'H',
    RegularTrading = 'T',
    OpeningAuctionCall = 'a',
    PostClose = 'b',
    MarketClose = 'c',
    ClosingAuctionCall = 'd',
    VolatilityAuctionCall = 'e',
    EODVolumeAuctionCall = 'E',
    ReOpeningAuctionCall = 'f',
    Pause = 'l',
    FuturesCloseOut = 'p',
    ClosingPriceCross = 's',
    IntraDayAuctionCall = 'u',
    EndTradeReporting = 'v',
    NoActiveSession = 'w',
    EndOfPostClose = 'x',
    StarOofTrading = 'y',
    ClosingPricePublication = 'z'
};



enum SymbolStatusSessionChangeReason
{
    ScheduledTransition = 0,
    ExtendedByMarketOps = 1,
    ShortenedByMarketOps = 2,
    MarketOrderImbalance = 3,
    PriceOutsideRange = 4,
    CircuitBreakerTripped = 5,
    Unavailable = 9
};



enum SymbolStatusBookType
{
    OnBook = 1,
    OffBook = 2,
    BulletinBoard = 9,
    NegotiatedTrades = 11
};

typedef  MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > SymbolStatusMessageFlags;

struct<29, 0x48> SymbolStatusMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    SymbolStatusTradingStatus       TradingStatus;
    SymbolStatusMessageFlags        Flags;
    MitchAlpha<4>                   Reason;
    SymbolStatusSessionChangeReason SessionChangeReason;
    MitchTime                       NewEndTime;
    SymbolStatusBookType            BookType;
};



enum OrderSide
{
    BuyOrder = 'B',
    SellOrder = 'S'
};


typedef MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        MarketOrder,
        BulletinBoard,
        b6,
        b7
    > AddOrderFlags;




struct<35, 0x41> AddOrderMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderId;
    OrderSide                       Side;
    MitchUInt32                     Quantity;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    MitchPrice08                    Price;
    AddOrderFlags                   Flags;
};



typedef MitchBitField
    <
        Regular,
        b1,
        b2,
        b3,
        b4,
        BulletinBoard,
        b6,
        b7
    > AddAttributedOrderFlags;




struct<44, 0x46> AddAttributedOrderMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
    OrderSide                       Side;
    MitchUInt32                     Quantity;
    MitchUInt32                     InstrumentID;
    MitchPrice08                    Price;
    MitchAlpha<11>                  Attribution;
    AddAttributedOrderFlags         Flags;
};

struct<15, 0x44> OrderDeletedMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
};



typedef MitchBitField
    <
        PriorityFlag,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > OrderModifiedFlags;

struct<28, 0x55> OrderModifiedMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
    MitchUInt32                     NewQuantity;
    MitchPrice08                    NewPrice;
    OrderModifiedFlags              Flags;
};



enum OrderBookClearSubBook
{
    OnBook = 1,
    OffBook = 2,
    BulletinBoard = 9,
    NegotiatedTrades = 11
};


enum OrderBookClearBookType
{
    MBO = 0,
    TopOfBook = 1
};


struct<13, 0x79> OrderBookClearMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt32                     InstrumentID;
    OrderBookClearSubBook           SubBook;
    OrderBookClearBookType          BookType;
};


struct<51, 0x45> OrderExecutedMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
    MitchUInt32                     ExecutedQuantity;
    MitchUInt64                     TradeID;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};





struct<64, 0x43> OrderExecutedWithPriceSizeMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt64                     OrderID;
    MitchUInt32                     ExecutedQuantity;
    MitchUInt32                     DisplayQuantity;
    MitchUInt64                     TradeID;
    MitchByte                       Printable;
    MitchPrice08                    Price;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};



typedef MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > TradeMessageFlags;



enum TradeMessageSubBook
{
    Regular = 1,
    NegotiatedTrades = 11
};




struct<63, 0x50> TradeMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt32                     ExecutedQuantity;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    MitchPrice08                    Price;
    MitchUInt64                     TradeID;
    TradeMessageSubBook             SubBook;
    TradeMessageFlags               Flags;
    MitchAlpha<4>                   TradeSubType;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};

struct<58, 0x51> AuctionTradeMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt32                     Quantity;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    MitchPrice08                    Price;
    MitchUInt64                     TradeID;
    MitchByte                       AuctionType;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};

struct<77, 0x78> OffBookTradeMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt32                     ExecutedQuantity;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    MitchPrice08                    Price;
    MitchUInt64                     TradeID;
    MitchAlpha<4>                   OffBookTradeType;
    MitchTime                       TradeTime;
    MitchDate                       TradeDate;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};

struct<16, 0x42> TradeBreakMessage
{
    MitchUInt32 Nanosecond;
    MitchUInt64 TradeID;
    MitchByte   TradeType;
};

typedef MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > RecoveryTradeMessageFlags;

enum RecoveryTradeMessageSubBook
{
    Regular = 1,
    NegotiatedTrades = 11
};

struct<81, 0x76> RecoveryTradeMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt32                     ExecutedQuantity;
    MitchUInt32                     InstrumentID;
    MitchByte                       Reserved01;
    MitchByte                       Reserved02;
    MitchPrice08                    Price;
    MitchUInt64                     TradeID;
    MitchByte                       AuctionType;
    MitchAlpha<4>                   OffBookRFQTradeType;
    MitchTime                       TradeTime;
    MitchDate                       TradeDate;
    MitchByte                       ActionType;
    RecoveryTradeMessageSubBook     SubBook;
    RecoveryTradeMessageFlags       Flags;
    MitchPrice08                    LastOptPx;
    MitchPrice08                    Volatility;
    MitchPrice08                    UnderlyingReferencePrice;
};

struct<31, 0x49> AuctionInfoMessage
{
    MitchUInt32     Nanosecond;
    MitchUInt32     PairedQuantity;
    MitchUInt32     Reserved01;
    MitchByte       ImbalanceDirection;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved02;
    MitchByte       Reserved03;
    MitchPrice08    Price;
    MitchByte       AuctionType;
};

enum TStatisticsMessageOpenCloseIndicator
{
    UT = 'A',
    AT = 'B',
    MidOfBBO = 'C',
    LastAT = 'D',
    LastUT = 'E',
    Manual = 'F',
    Vwap = 'H',
    PreviousClose = 'I',
    Zero = 'J',
    BestBid = 'U',
    BestOffer = 'V',
    ReferencePrice = 'Y'
};


enum TStatisticsMessageSubBook{
    Regular =1,
    OffBook =2,
    BulletinBoard=9
};

struct<24, 0x77> StatisticsMessage
{
    MitchUInt32     Nanosecond;
    MitchUInt32     InstrumentID;
    MitchByte       Reserved01;
    MitchByte       Reserved02;
    MitchAlpha<1>   StatisticType;
    MitchPrice08    Price;
    TStatisticsMessageOpenCloseIndicator   OpenCloseIndicator;
    TStatisticsMessageSubBook SubBook;
};




struct<84, 0x80> ExtendedStatisticsMessage
{
    MitchUInt32     Nanosecond;
    MitchUInt32     InstrumentID;
    MitchPrice08    HighPrice;
    MitchPrice08    LowPrice;
    MitchPrice08    Vwap;
    MitchUInt32     Volume;
    MitchPrice04    Turnover;
    MitchUInt32     NumberOfTrades;
    MitchAlpha<8>   Reserved01;
    TStatisticsMessageSubBook      SubBook;
    MitchPrice08    NotionalExposure;
    MitchPrice08    NotionalDeltaExposure;
    MitchPrice08    OpenInterest;
};

struct<1066, 0x75> NewsMessage
{
    MitchUInt32 Nanosecond;
    MitchTime   Time;
    MitchByte   Urgency;
    MitchAlpha<100>  Headline;
    MitchAlpha<750>  Text;
    MitchAlpha<100>  Instruments;
    MitchAlpha<100>  Underlyings;
};



typedef MitchBitField
    <
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7
    > TopOfBookMessageSubBook;





struct<34, 0x71> TopOfBookMessage
{
    MitchUInt32                     Nanosecond;
    MitchUInt32                     InstrumentID;
    MitchUInt16                     ReserveField;
    TopOfBookMessageSubBook         SubBook;
    MitchByte                       Action;
    MitchByte                       Side;
    MitchPrice08                    Price;
    MitchUInt32                     Quantity;
    MitchUInt32                     MarketOrderQuantity;
    MitchUInt16                     Reserved01;
};