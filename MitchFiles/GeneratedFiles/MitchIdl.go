// Code generated by goyacc -o idl.go -p IdlExpr idl.y. DO NOT EDIT.

package GeneratedFiles

import "fmt"
import "time"
import "github.com/bhbosman/Application/Streams"

// Declared typed
// TimeMessage MessageType: 0x54(84)
// TEventCode
// SystemEventMessage MessageType: 0x53(83)
// SymbolDirectorySymbolStatus
// SymbolDirectoryOptionType
// SymbolDirectoryFlags
// SymbolDirectorySubBook
// SymbolDirectorySettlementMethod
// SymbolDirectoryMessage MessageType: 0x52(82)
// SymbolStatusTradingStatus
// SymbolStatusSessionChangeReason
// SymbolStatusBookType
// SymbolStatusMessageFlags
// SymbolStatusMessage MessageType: 0x48(72)
// OrderSide
// AddOrderFlags
// AddOrderMessage MessageType: 0x41(65)
// AddAttributedOrderFlags
// AddAttributedOrderMessage MessageType: 0x46(70)
// OrderDeletedMessage MessageType: 0x44(68)
// OrderModifiedFlags
// OrderModifiedMessage MessageType: 0x55(85)
// OrderBookClearSubBook
// OrderBookClearBookType
// OrderBookClearMessage MessageType: 0x79(121)
// OrderExecutedMessage MessageType: 0x45(69)
// OrderExecutedWithPriceSizeMessage MessageType: 0x43(67)
// TradeMessageFlags
// TradeMessageSubBook
// TradeMessage MessageType: 0x50(80)
// AuctionTradeMessage MessageType: 0x51(81)
// OffBookTradeMessage MessageType: 0x78(120)
// TradeBreakMessage MessageType: 0x42(66)
// RecoveryTradeMessageFlags
// RecoveryTradeMessageSubBook
// RecoveryTradeMessage MessageType: 0x76(118)
// AuctionInfoMessage MessageType: 0x49(73)
// TStatisticsMessageOpenCloseIndicator
// TStatisticsMessageSubBook
// StatisticsMessage MessageType: 0x77(119)
// ExtendedStatisticsMessage MessageType: 0x80(128)
// NewsMessage MessageType: 0x75(117)
// TopOfBookMessageSubBook
// TopOfBookMessage MessageType: 0x71(113)
//
// UnitLength Declaration TypeCode: 0x4722da65
type UnitLength struct {
	Length uint16 `json:"Length" xml:"Length,attr"`
}

type UnitLengthFactoryType struct {
}

var UnitLengthFactory UnitLengthFactoryType = UnitLengthFactoryType{}

func (self UnitLengthFactoryType) New() (*UnitLength, error) {
	return &UnitLength{}, nil
}

func (self UnitLengthFactoryType) ReadMessageHeader(instance *UnitLength, stream Streams.IMitchReader) (byteCount int, err error) {
	return 0, nil
}

func (self UnitLengthFactoryType) ReadMessageData(instance *UnitLength, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Length, Type: uint16
	instance.Length, n, err = stream.Read_uint16()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self UnitLengthFactoryType) ReadMessageInFull(instance *UnitLength, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// UnitLength writer
func Write_UnitLength(stream Streams.IMitchWriter, value *UnitLength) (byteCount int, err error) {
	var n int
	//
	//
	// Index: 0, Member Name: Length, Type: uint16
	//
	//
	n, err = stream.Write_uint16(value.Length)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// UnitHeader Declaration TypeCode: 0x79047ea2
type UnitHeader struct {
	MessageCount    byte   `json:"MessageCount" xml:"MessageCount,attr"`
	MarketDataGroup byte   `json:"MarketDataGroup" xml:"MarketDataGroup,attr"`
	SequenceNumber  uint32 `json:"SequenceNumber" xml:"SequenceNumber,attr"`
}

type UnitHeaderFactoryType struct {
}

var UnitHeaderFactory UnitHeaderFactoryType = UnitHeaderFactoryType{}

func (self UnitHeaderFactoryType) New() (*UnitHeader, error) {
	return &UnitHeader{}, nil
}

func (self UnitHeaderFactoryType) ReadMessageHeader(instance *UnitHeader, stream Streams.IMitchReader) (byteCount int, err error) {
	return 0, nil
}

func (self UnitHeaderFactoryType) ReadMessageData(instance *UnitHeader, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: MessageCount, Type: byte
	instance.MessageCount, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: MarketDataGroup, Type: byte
	instance.MarketDataGroup, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: SequenceNumber, Type: uint32
	instance.SequenceNumber, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self UnitHeaderFactoryType) ReadMessageInFull(instance *UnitHeader, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// UnitHeader writer
func Write_UnitHeader(stream Streams.IMitchWriter, value *UnitHeader) (byteCount int, err error) {
	var n int
	//
	//
	// Index: 0, Member Name: MessageCount, Type: byte
	//
	//
	n, err = stream.Write_byte(value.MessageCount)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: MarketDataGroup, Type: byte
	//
	//
	n, err = stream.Write_byte(value.MarketDataGroup)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: SequenceNumber, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.SequenceNumber)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// MessageHeader Declaration TypeCode: 0x4e32cf38
type MessageHeader struct {
	Length      uint16 `json:"Length" xml:"Length,attr"`
	MessageType byte   `json:"MessageType" xml:"MessageType,attr"`
}

type MessageHeaderFactoryType struct {
}

var MessageHeaderFactory MessageHeaderFactoryType = MessageHeaderFactoryType{}

func (self MessageHeaderFactoryType) New() (*MessageHeader, error) {
	return &MessageHeader{}, nil
}

func (self MessageHeaderFactoryType) ReadMessageHeader(instance *MessageHeader, stream Streams.IMitchReader) (byteCount int, err error) {
	return 0, nil
}

func (self MessageHeaderFactoryType) ReadMessageData(instance *MessageHeader, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Length, Type: uint16
	instance.Length, n, err = stream.Read_uint16()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: MessageType, Type: byte
	instance.MessageType, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self MessageHeaderFactoryType) ReadMessageInFull(instance *MessageHeader, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// MessageHeader writer
func Write_MessageHeader(stream Streams.IMitchWriter, value *MessageHeader) (byteCount int, err error) {
	var n int
	//
	//
	// Index: 0, Member Name: Length, Type: uint16
	//
	//
	n, err = stream.Write_uint16(value.Length)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: MessageType, Type: byte
	//
	//
	n, err = stream.Write_byte(value.MessageType)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// TimeMessage Declaration TypeCode: 0xafbd7a0e
type TimeMessage struct {
	Seconds uint32 `json:"Seconds" xml:"Seconds,attr"`
}

type TimeMessageFactoryType struct {
}

var TimeMessageFactory TimeMessageFactoryType = TimeMessageFactoryType{}

const TimeMessageMessageType byte = 0x54 //84
const TimeMessageMessageLength uint16 = 7

func (self TimeMessageFactoryType) New() (*TimeMessage, error) {
	return &TimeMessage{}, nil
}

func (self TimeMessageFactoryType) ReadMessageHeader(instance *TimeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x7 {
		return 0, fmt.Errorf("message length incorrect. For Message TimeMessage was expected 0x7, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x54 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message TimeMessage was expected 0x54, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self TimeMessageFactoryType) ReadMessageData(instance *TimeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Seconds, Type: uint32
	instance.Seconds, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self TimeMessageFactoryType) ReadMessageInFull(instance *TimeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// TimeMessage writer
func Write_TimeMessage(stream Streams.IMitchWriter, value *TimeMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(7)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(84)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Seconds, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Seconds)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type TEventCode byte

//noinspection ALL
const (
	TEventCode_EndOfDay   = 67 // char value: 'C'
	TEventCode_StartOfDay = 79 // char value: 'O'
)

type TEventCodeFactoryType struct {
}

var TEventCodeFactory TEventCodeFactoryType = TEventCodeFactoryType{}

func (self TEventCodeFactoryType) ReadValue(stream Streams.IMitchReader) (TEventCode, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return TEventCode(0), 0, err
	}
	return TEventCode(b), n, nil
}

// TEventCode Declaration TypeCode: 0x2ff833d1
// TEventCode writer
func Write_TEventCode(stream Streams.IMitchWriter, value TEventCode) (int, error) {
	return stream.Write_byte(byte(value))
}

// SystemEventMessage Declaration TypeCode: 0x27b7b6f7
type SystemEventMessage struct {
	Nanosecond uint32     `json:"Nanosecond" xml:"Nanosecond,attr"`
	EventCode  TEventCode `json:"EventCode" xml:"EventCode,attr"`
}

type SystemEventMessageFactoryType struct {
}

var SystemEventMessageFactory SystemEventMessageFactoryType = SystemEventMessageFactoryType{}

const SystemEventMessageMessageType byte = 0x53 //83
const SystemEventMessageMessageLength uint16 = 8

func (self SystemEventMessageFactoryType) New() (*SystemEventMessage, error) {
	return &SystemEventMessage{}, nil
}

func (self SystemEventMessageFactoryType) ReadMessageHeader(instance *SystemEventMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x8 {
		return 0, fmt.Errorf("message length incorrect. For Message SystemEventMessage was expected 0x8, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x53 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message SystemEventMessage was expected 0x53, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self SystemEventMessageFactoryType) ReadMessageData(instance *SystemEventMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: EventCode, Type: TEventCode
	instance.EventCode, n, err = TEventCodeFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self SystemEventMessageFactoryType) ReadMessageInFull(instance *SystemEventMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// SystemEventMessage writer
func Write_SystemEventMessage(stream Streams.IMitchWriter, value *SystemEventMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(8)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(83)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: EventCode, Type: TEventCode
	//
	//
	n, err = stream.Write_byte(byte(value.EventCode))
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type SymbolDirectorySymbolStatus byte

//noinspection ALL
const (
	SymbolDirectorySymbolStatus_Halted    = 72 // char value: 'H'
	SymbolDirectorySymbolStatus_Suspended = 83 // char value: 'S'
	SymbolDirectorySymbolStatus_Inactive  = 97 // char value: 'a'
)

type SymbolDirectorySymbolStatusFactoryType struct {
}

var SymbolDirectorySymbolStatusFactory SymbolDirectorySymbolStatusFactoryType = SymbolDirectorySymbolStatusFactoryType{}

func (self SymbolDirectorySymbolStatusFactoryType) ReadValue(stream Streams.IMitchReader) (SymbolDirectorySymbolStatus, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return SymbolDirectorySymbolStatus(0), 0, err
	}
	return SymbolDirectorySymbolStatus(b), n, nil
}

// SymbolDirectorySymbolStatus Declaration TypeCode: 0x810d8fde
// SymbolDirectorySymbolStatus writer
func Write_SymbolDirectorySymbolStatus(stream Streams.IMitchWriter, value SymbolDirectorySymbolStatus) (int, error) {
	return stream.Write_byte(byte(value))
}

type SymbolDirectoryOptionType byte

//noinspection ALL
const (
	SymbolDirectoryOptionType_CallOption = 67 // char value: 'C'
	SymbolDirectoryOptionType_PutOption  = 80 // char value: 'P'
)

type SymbolDirectoryOptionTypeFactoryType struct {
}

var SymbolDirectoryOptionTypeFactory SymbolDirectoryOptionTypeFactoryType = SymbolDirectoryOptionTypeFactoryType{}

func (self SymbolDirectoryOptionTypeFactoryType) ReadValue(stream Streams.IMitchReader) (SymbolDirectoryOptionType, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return SymbolDirectoryOptionType(0), 0, err
	}
	return SymbolDirectoryOptionType(b), n, nil
}

// SymbolDirectoryOptionType Declaration TypeCode: 0x8ca314f2
// SymbolDirectoryOptionType writer
func Write_SymbolDirectoryOptionType(stream Streams.IMitchWriter, value SymbolDirectoryOptionType) (int, error) {
	return stream.Write_byte(byte(value))
}

type SymbolDirectoryFlags struct {
	Flags byte
}

func NewSymbolDirectoryFlags() SymbolDirectoryFlags {
	return SymbolDirectoryFlags{}
}

// SymbolDirectoryFlags Declaration TypeCode: 0xcc630022
// SymbolDirectoryFlags writer
func Write_SymbolDirectoryFlags(stream Streams.IMitchWriter, value SymbolDirectoryFlags) (byteCount int, err error) {
	return stream.Write_byte(byte(value.Flags))
}

// SymbolDirectoryFlags reader
func Read_SymbolDirectoryFlags(stream Streams.IMitchReader) (value SymbolDirectoryFlags, byteCount int, err error) {
	value = NewSymbolDirectoryFlags()
	value.Flags, byteCount, err = stream.Read_byte()
	return value, byteCount, err
}

type SymbolDirectorySubBook struct {
	Flags byte
}

func NewSymbolDirectorySubBook() SymbolDirectorySubBook {
	return SymbolDirectorySubBook{}
}

// SymbolDirectorySubBook Declaration TypeCode: 0x03b3c050
// SymbolDirectorySubBook writer
func Write_SymbolDirectorySubBook(stream Streams.IMitchWriter, value SymbolDirectorySubBook) (byteCount int, err error) {
	return stream.Write_byte(byte(value.Flags))
}

// SymbolDirectorySubBook reader
func Read_SymbolDirectorySubBook(stream Streams.IMitchReader) (value SymbolDirectorySubBook, byteCount int, err error) {
	value = NewSymbolDirectorySubBook()
	value.Flags, byteCount, err = stream.Read_byte()
	return value, byteCount, err
}

type SymbolDirectorySettlementMethod byte

//noinspection ALL
const (
	SymbolDirectorySettlementMethod_Cash     = 67 // char value: 'C'
	SymbolDirectorySettlementMethod_Physical = 80 // char value: 'P'
)

type SymbolDirectorySettlementMethodFactoryType struct {
}

var SymbolDirectorySettlementMethodFactory SymbolDirectorySettlementMethodFactoryType = SymbolDirectorySettlementMethodFactoryType{}

func (self SymbolDirectorySettlementMethodFactoryType) ReadValue(stream Streams.IMitchReader) (SymbolDirectorySettlementMethod, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return SymbolDirectorySettlementMethod(0), 0, err
	}
	return SymbolDirectorySettlementMethod(b), n, nil
}

// SymbolDirectorySettlementMethod Declaration TypeCode: 0xc1ac87fd
// SymbolDirectorySettlementMethod writer
func Write_SymbolDirectorySettlementMethod(stream Streams.IMitchWriter, value SymbolDirectorySettlementMethod) (int, error) {
	return stream.Write_byte(byte(value))
}

// SymbolDirectoryMessage Declaration TypeCode: 0xcd19edf6
type SymbolDirectoryMessage struct {
	Nanosecond         uint32                      `json:"Nanosecond" xml:"Nanosecond,attr"`
	InstrumentID       uint32                      `json:"InstrumentID" xml:"InstrumentID,attr"`
	Reserved01         byte                        `json:"Reserved01" xml:"Reserved01,attr"`
	Reserved02         byte                        `json:"Reserved02" xml:"Reserved02,attr"`
	SymbolStatus       SymbolDirectorySymbolStatus `json:"SymbolStatus" xml:"SymbolStatus,attr"`
	Isin               string                      `json:"Isin" xml:"Isin,attr"`
	Symbol             string                      `json:"Symbol" xml:"Symbol,attr"`
	Tidm               string                      `json:"Tidm" xml:"Tidm,attr"`
	Segment            string                      `json:"Segment" xml:"Segment,attr"`
	PreviousClosePrice float64                     `json:"PreviousClosePrice" xml:"PreviousClosePrice,attr"`
	ExpirationDate     time.Time                   `json:"ExpirationDate" xml:"ExpirationDate,attr"`
	Underlying         string                      `json:"Underlying" xml:"Underlying,attr"`
	StrikePrice        float64                     `json:"StrikePrice" xml:"StrikePrice,attr"`
	OptionType         SymbolDirectoryOptionType   `json:"OptionType" xml:"OptionType,attr"`
	Issuer             string                      `json:"Issuer" xml:"Issuer,attr"`
	IssueDate          time.Time                   `json:"IssueDate" xml:"IssueDate,attr"`
	Coupon             float64                     `json:"Coupon" xml:"Coupon,attr"`
	Flags              SymbolDirectoryFlags        `json:"Flags" xml:"Flags,attr"`
	SubBook            SymbolDirectorySubBook      `json:"SubBook" xml:"SubBook,attr"`
	CorporateAction    string                      `json:"CorporateAction" xml:"CorporateAction,attr"`
}

type SymbolDirectoryMessageFactoryType struct {
}

var SymbolDirectoryMessageFactory SymbolDirectoryMessageFactoryType = SymbolDirectoryMessageFactoryType{}

const SymbolDirectoryMessageMessageType byte = 0x52 //82
const SymbolDirectoryMessageMessageLength uint16 = 332

func (self SymbolDirectoryMessageFactoryType) New() (*SymbolDirectoryMessage, error) {
	return &SymbolDirectoryMessage{}, nil
}

func (self SymbolDirectoryMessageFactoryType) ReadMessageHeader(instance *SymbolDirectoryMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x14c {
		return 0, fmt.Errorf("message length incorrect. For Message SymbolDirectoryMessage was expected 0x14c, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x52 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message SymbolDirectoryMessage was expected 0x52, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self SymbolDirectoryMessageFactoryType) ReadMessageData(instance *SymbolDirectoryMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: Reserved01, Type: byte
	instance.Reserved01, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Reserved02, Type: byte
	instance.Reserved02, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: SymbolStatus, Type: SymbolDirectorySymbolStatus
	instance.SymbolStatus, n, err = SymbolDirectorySymbolStatusFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Isin, Type: string
	instance.Isin, n, err = stream.Read_string(12)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: Symbol, Type: string
	instance.Symbol, n, err = stream.Read_string(25)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: Tidm, Type: string
	instance.Tidm, n, err = stream.Read_string(12)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: Segment, Type: string
	instance.Segment, n, err = stream.Read_string(6)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 9, Member Name: PreviousClosePrice, Type: float64
	instance.PreviousClosePrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 10, Member Name: ExpirationDate, Type: Time
	instance.ExpirationDate, n, err = stream.Read_mitch_date()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 11, Member Name: Underlying, Type: string
	instance.Underlying, n, err = stream.Read_string(25)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 12, Member Name: StrikePrice, Type: float64
	instance.StrikePrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 13, Member Name: OptionType, Type: SymbolDirectoryOptionType
	instance.OptionType, n, err = SymbolDirectoryOptionTypeFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 14, Member Name: Issuer, Type: string
	instance.Issuer, n, err = stream.Read_string(6)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 15, Member Name: IssueDate, Type: Time
	instance.IssueDate, n, err = stream.Read_mitch_date()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 16, Member Name: Coupon, Type: float64
	instance.Coupon, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 17, Member Name: Flags, Type: SymbolDirectoryFlags
	instance.Flags, n, err = Read_SymbolDirectoryFlags(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 18, Member Name: SubBook, Type: SymbolDirectorySubBook
	instance.SubBook, n, err = Read_SymbolDirectorySubBook(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 19, Member Name: CorporateAction, Type: string
	instance.CorporateAction, n, err = stream.Read_string(189)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self SymbolDirectoryMessageFactoryType) ReadMessageInFull(instance *SymbolDirectoryMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// SymbolDirectoryMessage writer
func Write_SymbolDirectoryMessage(stream Streams.IMitchWriter, value *SymbolDirectoryMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(332)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(82)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: Reserved01, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Reserved02, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved02)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: SymbolStatus, Type: SymbolDirectorySymbolStatus
	//
	//
	n, err = stream.Write_byte(byte(value.SymbolStatus))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Isin, Type: string
	//
	//
	n, err = stream.Write_string(value.Isin, 12)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: Symbol, Type: string
	//
	//
	n, err = stream.Write_string(value.Symbol, 25)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: Tidm, Type: string
	//
	//
	n, err = stream.Write_string(value.Tidm, 12)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: Segment, Type: string
	//
	//
	n, err = stream.Write_string(value.Segment, 6)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 9, Member Name: PreviousClosePrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.PreviousClosePrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 10, Member Name: ExpirationDate, Type: Time
	//
	//
	n, err = stream.Write_mitch_date(value.ExpirationDate)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 11, Member Name: Underlying, Type: string
	//
	//
	n, err = stream.Write_string(value.Underlying, 25)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 12, Member Name: StrikePrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.StrikePrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 13, Member Name: OptionType, Type: SymbolDirectoryOptionType
	//
	//
	n, err = stream.Write_byte(byte(value.OptionType))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 14, Member Name: Issuer, Type: string
	//
	//
	n, err = stream.Write_string(value.Issuer, 6)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 15, Member Name: IssueDate, Type: Time
	//
	//
	n, err = stream.Write_mitch_date(value.IssueDate)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 16, Member Name: Coupon, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Coupon)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 17, Member Name: Flags, Type: SymbolDirectoryFlags
	//
	//
	n, err = Write_SymbolDirectoryFlags(stream, value.Flags)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 18, Member Name: SubBook, Type: SymbolDirectorySubBook
	//
	//
	n, err = Write_SymbolDirectorySubBook(stream, value.SubBook)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 19, Member Name: CorporateAction, Type: string
	//
	//
	n, err = stream.Write_string(value.CorporateAction, 189)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type SymbolStatusTradingStatus byte

//noinspection ALL
const (
	SymbolStatusTradingStatus_Halt                    = 72  // char value: 'H'
	SymbolStatusTradingStatus_RegularTrading          = 84  // char value: 'T'
	SymbolStatusTradingStatus_OpeningAuctionCall      = 97  // char value: 'a'
	SymbolStatusTradingStatus_PostClose               = 98  // char value: 'b'
	SymbolStatusTradingStatus_MarketClose             = 99  // char value: 'c'
	SymbolStatusTradingStatus_ClosingAuctionCall      = 100 // char value: 'd'
	SymbolStatusTradingStatus_VolatilityAuctionCall   = 101 // char value: 'e'
	SymbolStatusTradingStatus_EODVolumeAuctionCall    = 69  // char value: 'E'
	SymbolStatusTradingStatus_ReOpeningAuctionCall    = 102 // char value: 'f'
	SymbolStatusTradingStatus_Pause                   = 108 // char value: 'l'
	SymbolStatusTradingStatus_FuturesCloseOut         = 112 // char value: 'p'
	SymbolStatusTradingStatus_ClosingPriceCross       = 115 // char value: 's'
	SymbolStatusTradingStatus_IntraDayAuctionCall     = 117 // char value: 'u'
	SymbolStatusTradingStatus_EndTradeReporting       = 118 // char value: 'v'
	SymbolStatusTradingStatus_NoActiveSession         = 119 // char value: 'w'
	SymbolStatusTradingStatus_EndOfPostClose          = 120 // char value: 'x'
	SymbolStatusTradingStatus_StarOofTrading          = 121 // char value: 'y'
	SymbolStatusTradingStatus_ClosingPricePublication = 122 // char value: 'z'
)

type SymbolStatusTradingStatusFactoryType struct {
}

var SymbolStatusTradingStatusFactory SymbolStatusTradingStatusFactoryType = SymbolStatusTradingStatusFactoryType{}

func (self SymbolStatusTradingStatusFactoryType) ReadValue(stream Streams.IMitchReader) (SymbolStatusTradingStatus, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return SymbolStatusTradingStatus(0), 0, err
	}
	return SymbolStatusTradingStatus(b), n, nil
}

// SymbolStatusTradingStatus Declaration TypeCode: 0xdeb92876
// SymbolStatusTradingStatus writer
func Write_SymbolStatusTradingStatus(stream Streams.IMitchWriter, value SymbolStatusTradingStatus) (int, error) {
	return stream.Write_byte(byte(value))
}

type SymbolStatusSessionChangeReason byte

//noinspection ALL
const (
	SymbolStatusSessionChangeReason_ScheduledTransition   = 0 // default value: byte(0)
	SymbolStatusSessionChangeReason_ExtendedByMarketOps   = 1 // default value: byte(1)
	SymbolStatusSessionChangeReason_ShortenedByMarketOps  = 2 // default value: byte(2)
	SymbolStatusSessionChangeReason_MarketOrderImbalance  = 3 // default value: byte(3)
	SymbolStatusSessionChangeReason_PriceOutsideRange     = 4 // default value: byte(4)
	SymbolStatusSessionChangeReason_CircuitBreakerTripped = 5 // default value: byte(5)
	SymbolStatusSessionChangeReason_Unavailable           = 9 // default value: byte(9)
)

type SymbolStatusSessionChangeReasonFactoryType struct {
}

var SymbolStatusSessionChangeReasonFactory SymbolStatusSessionChangeReasonFactoryType = SymbolStatusSessionChangeReasonFactoryType{}

func (self SymbolStatusSessionChangeReasonFactoryType) ReadValue(stream Streams.IMitchReader) (SymbolStatusSessionChangeReason, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return SymbolStatusSessionChangeReason(0), 0, err
	}
	return SymbolStatusSessionChangeReason(b), n, nil
}

// SymbolStatusSessionChangeReason Declaration TypeCode: 0xfee8af4f
// SymbolStatusSessionChangeReason writer
func Write_SymbolStatusSessionChangeReason(stream Streams.IMitchWriter, value SymbolStatusSessionChangeReason) (int, error) {
	return stream.Write_byte(byte(value))
}

type SymbolStatusBookType byte

//noinspection ALL
const (
	SymbolStatusBookType_OnBook           = 1  // default value: byte(1)
	SymbolStatusBookType_OffBook          = 2  // default value: byte(2)
	SymbolStatusBookType_BulletinBoard    = 9  // default value: byte(9)
	SymbolStatusBookType_NegotiatedTrades = 11 // default value: byte(11)
)

type SymbolStatusBookTypeFactoryType struct {
}

var SymbolStatusBookTypeFactory SymbolStatusBookTypeFactoryType = SymbolStatusBookTypeFactoryType{}

func (self SymbolStatusBookTypeFactoryType) ReadValue(stream Streams.IMitchReader) (SymbolStatusBookType, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return SymbolStatusBookType(0), 0, err
	}
	return SymbolStatusBookType(b), n, nil
}

// SymbolStatusBookType Declaration TypeCode: 0x0b2355a5
// SymbolStatusBookType writer
func Write_SymbolStatusBookType(stream Streams.IMitchWriter, value SymbolStatusBookType) (int, error) {
	return stream.Write_byte(byte(value))
}

type SymbolStatusMessageFlags struct {
	Flags byte
}

func NewSymbolStatusMessageFlags() SymbolStatusMessageFlags {
	return SymbolStatusMessageFlags{}
}

// SymbolStatusMessageFlags Declaration TypeCode: 0x5cadcb8d
// SymbolStatusMessageFlags writer
func Write_SymbolStatusMessageFlags(stream Streams.IMitchWriter, value SymbolStatusMessageFlags) (byteCount int, err error) {
	return stream.Write_byte(byte(value.Flags))
}

// SymbolStatusMessageFlags reader
func Read_SymbolStatusMessageFlags(stream Streams.IMitchReader) (value SymbolStatusMessageFlags, byteCount int, err error) {
	value = NewSymbolStatusMessageFlags()
	value.Flags, byteCount, err = stream.Read_byte()
	return value, byteCount, err
}

// SymbolStatusMessage Declaration TypeCode: 0x5533b1cc
type SymbolStatusMessage struct {
	Nanosecond          uint32                          `json:"Nanosecond" xml:"Nanosecond,attr"`
	InstrumentID        uint32                          `json:"InstrumentID" xml:"InstrumentID,attr"`
	Reserved01          byte                            `json:"Reserved01" xml:"Reserved01,attr"`
	Reserved02          byte                            `json:"Reserved02" xml:"Reserved02,attr"`
	TradingStatus       SymbolStatusTradingStatus       `json:"TradingStatus" xml:"TradingStatus,attr"`
	Flags               SymbolStatusMessageFlags        `json:"Flags" xml:"Flags,attr"`
	Reason              string                          `json:"Reason" xml:"Reason,attr"`
	SessionChangeReason SymbolStatusSessionChangeReason `json:"SessionChangeReason" xml:"SessionChangeReason,attr"`
	NewEndTime          time.Time                       `json:"NewEndTime" xml:"NewEndTime,attr"`
	BookType            SymbolStatusBookType            `json:"BookType" xml:"BookType,attr"`
}

type SymbolStatusMessageFactoryType struct {
}

var SymbolStatusMessageFactory SymbolStatusMessageFactoryType = SymbolStatusMessageFactoryType{}

const SymbolStatusMessageMessageType byte = 0x48 //72
const SymbolStatusMessageMessageLength uint16 = 29

func (self SymbolStatusMessageFactoryType) New() (*SymbolStatusMessage, error) {
	return &SymbolStatusMessage{}, nil
}

func (self SymbolStatusMessageFactoryType) ReadMessageHeader(instance *SymbolStatusMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x1d {
		return 0, fmt.Errorf("message length incorrect. For Message SymbolStatusMessage was expected 0x1d, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x48 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message SymbolStatusMessage was expected 0x48, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self SymbolStatusMessageFactoryType) ReadMessageData(instance *SymbolStatusMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: Reserved01, Type: byte
	instance.Reserved01, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Reserved02, Type: byte
	instance.Reserved02, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: TradingStatus, Type: SymbolStatusTradingStatus
	instance.TradingStatus, n, err = SymbolStatusTradingStatusFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Flags, Type: SymbolStatusMessageFlags
	instance.Flags, n, err = Read_SymbolStatusMessageFlags(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: Reason, Type: string
	instance.Reason, n, err = stream.Read_string(4)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: SessionChangeReason, Type: SymbolStatusSessionChangeReason
	instance.SessionChangeReason, n, err = SymbolStatusSessionChangeReasonFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: NewEndTime, Type: Time
	instance.NewEndTime, n, err = stream.Read_mitch_time()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 9, Member Name: BookType, Type: SymbolStatusBookType
	instance.BookType, n, err = SymbolStatusBookTypeFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self SymbolStatusMessageFactoryType) ReadMessageInFull(instance *SymbolStatusMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// SymbolStatusMessage writer
func Write_SymbolStatusMessage(stream Streams.IMitchWriter, value *SymbolStatusMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(29)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(72)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: Reserved01, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Reserved02, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved02)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: TradingStatus, Type: SymbolStatusTradingStatus
	//
	//
	n, err = stream.Write_byte(byte(value.TradingStatus))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Flags, Type: SymbolStatusMessageFlags
	//
	//
	n, err = Write_SymbolStatusMessageFlags(stream, value.Flags)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: Reason, Type: string
	//
	//
	n, err = stream.Write_string(value.Reason, 4)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: SessionChangeReason, Type: SymbolStatusSessionChangeReason
	//
	//
	n, err = stream.Write_byte(byte(value.SessionChangeReason))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: NewEndTime, Type: Time
	//
	//
	n, err = stream.Write_mitch_time(value.NewEndTime)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 9, Member Name: BookType, Type: SymbolStatusBookType
	//
	//
	n, err = stream.Write_byte(byte(value.BookType))
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type OrderSide byte

//noinspection ALL
const (
	OrderSide_BuyOrder  = 66 // char value: 'B'
	OrderSide_SellOrder = 83 // char value: 'S'
)

type OrderSideFactoryType struct {
}

var OrderSideFactory OrderSideFactoryType = OrderSideFactoryType{}

func (self OrderSideFactoryType) ReadValue(stream Streams.IMitchReader) (OrderSide, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return OrderSide(0), 0, err
	}
	return OrderSide(b), n, nil
}

// OrderSide Declaration TypeCode: 0x22a70cb8
// OrderSide writer
func Write_OrderSide(stream Streams.IMitchWriter, value OrderSide) (int, error) {
	return stream.Write_byte(byte(value))
}

type AddOrderFlags struct {
	Flags byte
}

func NewAddOrderFlags() AddOrderFlags {
	return AddOrderFlags{}
}

// AddOrderFlags Declaration TypeCode: 0xf14d9a43
// AddOrderFlags writer
func Write_AddOrderFlags(stream Streams.IMitchWriter, value AddOrderFlags) (byteCount int, err error) {
	return stream.Write_byte(byte(value.Flags))
}

// AddOrderFlags reader
func Read_AddOrderFlags(stream Streams.IMitchReader) (value AddOrderFlags, byteCount int, err error) {
	value = NewAddOrderFlags()
	value.Flags, byteCount, err = stream.Read_byte()
	return value, byteCount, err
}

// AddOrderMessage Declaration TypeCode: 0x4ace6131
type AddOrderMessage struct {
	Nanosecond   uint32        `json:"Nanosecond" xml:"Nanosecond,attr"`
	OrderId      uint64        `json:"OrderId" xml:"OrderId,attr"`
	Side         OrderSide     `json:"Side" xml:"Side,attr"`
	Quantity     uint32        `json:"Quantity" xml:"Quantity,attr"`
	InstrumentID uint32        `json:"InstrumentID" xml:"InstrumentID,attr"`
	Reserved01   byte          `json:"Reserved01" xml:"Reserved01,attr"`
	Reserved02   byte          `json:"Reserved02" xml:"Reserved02,attr"`
	Price        float64       `json:"Price" xml:"Price,attr"`
	Flags        AddOrderFlags `json:"Flags" xml:"Flags,attr"`
}

type AddOrderMessageFactoryType struct {
}

var AddOrderMessageFactory AddOrderMessageFactoryType = AddOrderMessageFactoryType{}

const AddOrderMessageMessageType byte = 0x41 //65
const AddOrderMessageMessageLength uint16 = 35

func (self AddOrderMessageFactoryType) New() (*AddOrderMessage, error) {
	return &AddOrderMessage{}, nil
}

func (self AddOrderMessageFactoryType) ReadMessageHeader(instance *AddOrderMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x23 {
		return 0, fmt.Errorf("message length incorrect. For Message AddOrderMessage was expected 0x23, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x41 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message AddOrderMessage was expected 0x41, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self AddOrderMessageFactoryType) ReadMessageData(instance *AddOrderMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: OrderId, Type: uint64
	instance.OrderId, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: Side, Type: OrderSide
	instance.Side, n, err = OrderSideFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Quantity, Type: uint32
	instance.Quantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Reserved01, Type: byte
	instance.Reserved01, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: Reserved02, Type: byte
	instance.Reserved02, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: Flags, Type: AddOrderFlags
	instance.Flags, n, err = Read_AddOrderFlags(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self AddOrderMessageFactoryType) ReadMessageInFull(instance *AddOrderMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// AddOrderMessage writer
func Write_AddOrderMessage(stream Streams.IMitchWriter, value *AddOrderMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(35)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(65)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: OrderId, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.OrderId)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: Side, Type: OrderSide
	//
	//
	n, err = stream.Write_byte(byte(value.Side))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Quantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Quantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Reserved01, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: Reserved02, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved02)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: Flags, Type: AddOrderFlags
	//
	//
	n, err = Write_AddOrderFlags(stream, value.Flags)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type AddAttributedOrderFlags struct {
	Flags byte
}

func NewAddAttributedOrderFlags() AddAttributedOrderFlags {
	return AddAttributedOrderFlags{}
}

// AddAttributedOrderFlags Declaration TypeCode: 0xcf3c7356
// AddAttributedOrderFlags writer
func Write_AddAttributedOrderFlags(stream Streams.IMitchWriter, value AddAttributedOrderFlags) (byteCount int, err error) {
	return stream.Write_byte(byte(value.Flags))
}

// AddAttributedOrderFlags reader
func Read_AddAttributedOrderFlags(stream Streams.IMitchReader) (value AddAttributedOrderFlags, byteCount int, err error) {
	value = NewAddAttributedOrderFlags()
	value.Flags, byteCount, err = stream.Read_byte()
	return value, byteCount, err
}

// AddAttributedOrderMessage Declaration TypeCode: 0x2ac24905
type AddAttributedOrderMessage struct {
	Nanosecond   uint32                  `json:"Nanosecond" xml:"Nanosecond,attr"`
	OrderID      uint64                  `json:"OrderID" xml:"OrderID,attr"`
	Side         OrderSide               `json:"Side" xml:"Side,attr"`
	Quantity     uint32                  `json:"Quantity" xml:"Quantity,attr"`
	InstrumentID uint32                  `json:"InstrumentID" xml:"InstrumentID,attr"`
	Price        float64                 `json:"Price" xml:"Price,attr"`
	Attribution  string                  `json:"Attribution" xml:"Attribution,attr"`
	Flags        AddAttributedOrderFlags `json:"Flags" xml:"Flags,attr"`
}

type AddAttributedOrderMessageFactoryType struct {
}

var AddAttributedOrderMessageFactory AddAttributedOrderMessageFactoryType = AddAttributedOrderMessageFactoryType{}

const AddAttributedOrderMessageMessageType byte = 0x46 //70
const AddAttributedOrderMessageMessageLength uint16 = 44

func (self AddAttributedOrderMessageFactoryType) New() (*AddAttributedOrderMessage, error) {
	return &AddAttributedOrderMessage{}, nil
}

func (self AddAttributedOrderMessageFactoryType) ReadMessageHeader(instance *AddAttributedOrderMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x2c {
		return 0, fmt.Errorf("message length incorrect. For Message AddAttributedOrderMessage was expected 0x2c, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x46 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message AddAttributedOrderMessage was expected 0x46, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self AddAttributedOrderMessageFactoryType) ReadMessageData(instance *AddAttributedOrderMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: OrderID, Type: uint64
	instance.OrderID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: Side, Type: OrderSide
	instance.Side, n, err = OrderSideFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Quantity, Type: uint32
	instance.Quantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: Attribution, Type: string
	instance.Attribution, n, err = stream.Read_string(11)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: Flags, Type: AddAttributedOrderFlags
	instance.Flags, n, err = Read_AddAttributedOrderFlags(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self AddAttributedOrderMessageFactoryType) ReadMessageInFull(instance *AddAttributedOrderMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// AddAttributedOrderMessage writer
func Write_AddAttributedOrderMessage(stream Streams.IMitchWriter, value *AddAttributedOrderMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(44)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(70)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: OrderID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.OrderID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: Side, Type: OrderSide
	//
	//
	n, err = stream.Write_byte(byte(value.Side))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Quantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Quantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: Attribution, Type: string
	//
	//
	n, err = stream.Write_string(value.Attribution, 11)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: Flags, Type: AddAttributedOrderFlags
	//
	//
	n, err = Write_AddAttributedOrderFlags(stream, value.Flags)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// OrderDeletedMessage Declaration TypeCode: 0x71ebfeee
type OrderDeletedMessage struct {
	Nanosecond uint32 `json:"Nanosecond" xml:"Nanosecond,attr"`
	OrderID    uint64 `json:"OrderID" xml:"OrderID,attr"`
}

type OrderDeletedMessageFactoryType struct {
}

var OrderDeletedMessageFactory OrderDeletedMessageFactoryType = OrderDeletedMessageFactoryType{}

const OrderDeletedMessageMessageType byte = 0x44 //68
const OrderDeletedMessageMessageLength uint16 = 15

func (self OrderDeletedMessageFactoryType) New() (*OrderDeletedMessage, error) {
	return &OrderDeletedMessage{}, nil
}

func (self OrderDeletedMessageFactoryType) ReadMessageHeader(instance *OrderDeletedMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0xf {
		return 0, fmt.Errorf("message length incorrect. For Message OrderDeletedMessage was expected 0xf, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x44 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message OrderDeletedMessage was expected 0x44, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self OrderDeletedMessageFactoryType) ReadMessageData(instance *OrderDeletedMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: OrderID, Type: uint64
	instance.OrderID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self OrderDeletedMessageFactoryType) ReadMessageInFull(instance *OrderDeletedMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// OrderDeletedMessage writer
func Write_OrderDeletedMessage(stream Streams.IMitchWriter, value *OrderDeletedMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(15)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(68)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: OrderID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.OrderID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type OrderModifiedFlags struct {
	Flags byte
}

func NewOrderModifiedFlags() OrderModifiedFlags {
	return OrderModifiedFlags{}
}

// OrderModifiedFlags Declaration TypeCode: 0x4bfbc52c
// OrderModifiedFlags writer
func Write_OrderModifiedFlags(stream Streams.IMitchWriter, value OrderModifiedFlags) (byteCount int, err error) {
	return stream.Write_byte(byte(value.Flags))
}

// OrderModifiedFlags reader
func Read_OrderModifiedFlags(stream Streams.IMitchReader) (value OrderModifiedFlags, byteCount int, err error) {
	value = NewOrderModifiedFlags()
	value.Flags, byteCount, err = stream.Read_byte()
	return value, byteCount, err
}

// OrderModifiedMessage Declaration TypeCode: 0x34838f04
type OrderModifiedMessage struct {
	Nanosecond  uint32             `json:"Nanosecond" xml:"Nanosecond,attr"`
	OrderID     uint64             `json:"OrderID" xml:"OrderID,attr"`
	NewQuantity uint32             `json:"NewQuantity" xml:"NewQuantity,attr"`
	NewPrice    float64            `json:"NewPrice" xml:"NewPrice,attr"`
	Flags       OrderModifiedFlags `json:"Flags" xml:"Flags,attr"`
}

type OrderModifiedMessageFactoryType struct {
}

var OrderModifiedMessageFactory OrderModifiedMessageFactoryType = OrderModifiedMessageFactoryType{}

const OrderModifiedMessageMessageType byte = 0x55 //85
const OrderModifiedMessageMessageLength uint16 = 28

func (self OrderModifiedMessageFactoryType) New() (*OrderModifiedMessage, error) {
	return &OrderModifiedMessage{}, nil
}

func (self OrderModifiedMessageFactoryType) ReadMessageHeader(instance *OrderModifiedMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x1c {
		return 0, fmt.Errorf("message length incorrect. For Message OrderModifiedMessage was expected 0x1c, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x55 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message OrderModifiedMessage was expected 0x55, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self OrderModifiedMessageFactoryType) ReadMessageData(instance *OrderModifiedMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: OrderID, Type: uint64
	instance.OrderID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: NewQuantity, Type: uint32
	instance.NewQuantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: NewPrice, Type: float64
	instance.NewPrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: Flags, Type: OrderModifiedFlags
	instance.Flags, n, err = Read_OrderModifiedFlags(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self OrderModifiedMessageFactoryType) ReadMessageInFull(instance *OrderModifiedMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// OrderModifiedMessage writer
func Write_OrderModifiedMessage(stream Streams.IMitchWriter, value *OrderModifiedMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(28)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(85)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: OrderID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.OrderID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: NewQuantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.NewQuantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: NewPrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.NewPrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: Flags, Type: OrderModifiedFlags
	//
	//
	n, err = Write_OrderModifiedFlags(stream, value.Flags)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type OrderBookClearSubBook byte

//noinspection ALL
const (
	OrderBookClearSubBook_OnBook           = 1  // default value: byte(1)
	OrderBookClearSubBook_OffBook          = 2  // default value: byte(2)
	OrderBookClearSubBook_BulletinBoard    = 9  // default value: byte(9)
	OrderBookClearSubBook_NegotiatedTrades = 11 // default value: byte(11)
)

type OrderBookClearSubBookFactoryType struct {
}

var OrderBookClearSubBookFactory OrderBookClearSubBookFactoryType = OrderBookClearSubBookFactoryType{}

func (self OrderBookClearSubBookFactoryType) ReadValue(stream Streams.IMitchReader) (OrderBookClearSubBook, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return OrderBookClearSubBook(0), 0, err
	}
	return OrderBookClearSubBook(b), n, nil
}

// OrderBookClearSubBook Declaration TypeCode: 0x5ead6996
// OrderBookClearSubBook writer
func Write_OrderBookClearSubBook(stream Streams.IMitchWriter, value OrderBookClearSubBook) (int, error) {
	return stream.Write_byte(byte(value))
}

type OrderBookClearBookType byte

//noinspection ALL
const (
	OrderBookClearBookType_MBO       = 0 // default value: byte(0)
	OrderBookClearBookType_TopOfBook = 1 // default value: byte(1)
)

type OrderBookClearBookTypeFactoryType struct {
}

var OrderBookClearBookTypeFactory OrderBookClearBookTypeFactoryType = OrderBookClearBookTypeFactoryType{}

func (self OrderBookClearBookTypeFactoryType) ReadValue(stream Streams.IMitchReader) (OrderBookClearBookType, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return OrderBookClearBookType(0), 0, err
	}
	return OrderBookClearBookType(b), n, nil
}

// OrderBookClearBookType Declaration TypeCode: 0x7d3b6454
// OrderBookClearBookType writer
func Write_OrderBookClearBookType(stream Streams.IMitchWriter, value OrderBookClearBookType) (int, error) {
	return stream.Write_byte(byte(value))
}

// OrderBookClearMessage Declaration TypeCode: 0x90074430
type OrderBookClearMessage struct {
	Nanosecond   uint32                 `json:"Nanosecond" xml:"Nanosecond,attr"`
	InstrumentID uint32                 `json:"InstrumentID" xml:"InstrumentID,attr"`
	SubBook      OrderBookClearSubBook  `json:"SubBook" xml:"SubBook,attr"`
	BookType     OrderBookClearBookType `json:"BookType" xml:"BookType,attr"`
}

type OrderBookClearMessageFactoryType struct {
}

var OrderBookClearMessageFactory OrderBookClearMessageFactoryType = OrderBookClearMessageFactoryType{}

const OrderBookClearMessageMessageType byte = 0x79 //121
const OrderBookClearMessageMessageLength uint16 = 13

func (self OrderBookClearMessageFactoryType) New() (*OrderBookClearMessage, error) {
	return &OrderBookClearMessage{}, nil
}

func (self OrderBookClearMessageFactoryType) ReadMessageHeader(instance *OrderBookClearMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0xd {
		return 0, fmt.Errorf("message length incorrect. For Message OrderBookClearMessage was expected 0xd, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x79 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message OrderBookClearMessage was expected 0x79, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self OrderBookClearMessageFactoryType) ReadMessageData(instance *OrderBookClearMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: SubBook, Type: OrderBookClearSubBook
	instance.SubBook, n, err = OrderBookClearSubBookFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: BookType, Type: OrderBookClearBookType
	instance.BookType, n, err = OrderBookClearBookTypeFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self OrderBookClearMessageFactoryType) ReadMessageInFull(instance *OrderBookClearMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// OrderBookClearMessage writer
func Write_OrderBookClearMessage(stream Streams.IMitchWriter, value *OrderBookClearMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(13)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(121)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: SubBook, Type: OrderBookClearSubBook
	//
	//
	n, err = stream.Write_byte(byte(value.SubBook))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: BookType, Type: OrderBookClearBookType
	//
	//
	n, err = stream.Write_byte(byte(value.BookType))
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// OrderExecutedMessage Declaration TypeCode: 0xf694c0e7
type OrderExecutedMessage struct {
	Nanosecond               uint32  `json:"Nanosecond" xml:"Nanosecond,attr"`
	OrderID                  uint64  `json:"OrderID" xml:"OrderID,attr"`
	ExecutedQuantity         uint32  `json:"ExecutedQuantity" xml:"ExecutedQuantity,attr"`
	TradeID                  uint64  `json:"TradeID" xml:"TradeID,attr"`
	LastOptPx                float64 `json:"LastOptPx" xml:"LastOptPx,attr"`
	Volatility               float64 `json:"Volatility" xml:"Volatility,attr"`
	UnderlyingReferencePrice float64 `json:"UnderlyingReferencePrice" xml:"UnderlyingReferencePrice,attr"`
}

type OrderExecutedMessageFactoryType struct {
}

var OrderExecutedMessageFactory OrderExecutedMessageFactoryType = OrderExecutedMessageFactoryType{}

const OrderExecutedMessageMessageType byte = 0x45 //69
const OrderExecutedMessageMessageLength uint16 = 51

func (self OrderExecutedMessageFactoryType) New() (*OrderExecutedMessage, error) {
	return &OrderExecutedMessage{}, nil
}

func (self OrderExecutedMessageFactoryType) ReadMessageHeader(instance *OrderExecutedMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x33 {
		return 0, fmt.Errorf("message length incorrect. For Message OrderExecutedMessage was expected 0x33, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x45 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message OrderExecutedMessage was expected 0x45, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self OrderExecutedMessageFactoryType) ReadMessageData(instance *OrderExecutedMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: OrderID, Type: uint64
	instance.OrderID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: ExecutedQuantity, Type: uint32
	instance.ExecutedQuantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: TradeID, Type: uint64
	instance.TradeID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: LastOptPx, Type: float64
	instance.LastOptPx, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Volatility, Type: float64
	instance.Volatility, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: UnderlyingReferencePrice, Type: float64
	instance.UnderlyingReferencePrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self OrderExecutedMessageFactoryType) ReadMessageInFull(instance *OrderExecutedMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// OrderExecutedMessage writer
func Write_OrderExecutedMessage(stream Streams.IMitchWriter, value *OrderExecutedMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(51)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(69)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: OrderID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.OrderID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: ExecutedQuantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.ExecutedQuantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: TradeID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.TradeID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: LastOptPx, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.LastOptPx)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Volatility, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Volatility)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: UnderlyingReferencePrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.UnderlyingReferencePrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// OrderExecutedWithPriceSizeMessage Declaration TypeCode: 0xca49e936
type OrderExecutedWithPriceSizeMessage struct {
	Nanosecond               uint32  `json:"Nanosecond" xml:"Nanosecond,attr"`
	OrderID                  uint64  `json:"OrderID" xml:"OrderID,attr"`
	ExecutedQuantity         uint32  `json:"ExecutedQuantity" xml:"ExecutedQuantity,attr"`
	DisplayQuantity          uint32  `json:"DisplayQuantity" xml:"DisplayQuantity,attr"`
	TradeID                  uint64  `json:"TradeID" xml:"TradeID,attr"`
	Printable                byte    `json:"Printable" xml:"Printable,attr"`
	Price                    float64 `json:"Price" xml:"Price,attr"`
	LastOptPx                float64 `json:"LastOptPx" xml:"LastOptPx,attr"`
	Volatility               float64 `json:"Volatility" xml:"Volatility,attr"`
	UnderlyingReferencePrice float64 `json:"UnderlyingReferencePrice" xml:"UnderlyingReferencePrice,attr"`
}

type OrderExecutedWithPriceSizeMessageFactoryType struct {
}

var OrderExecutedWithPriceSizeMessageFactory OrderExecutedWithPriceSizeMessageFactoryType = OrderExecutedWithPriceSizeMessageFactoryType{}

const OrderExecutedWithPriceSizeMessageMessageType byte = 0x43 //67
const OrderExecutedWithPriceSizeMessageMessageLength uint16 = 64

func (self OrderExecutedWithPriceSizeMessageFactoryType) New() (*OrderExecutedWithPriceSizeMessage, error) {
	return &OrderExecutedWithPriceSizeMessage{}, nil
}

func (self OrderExecutedWithPriceSizeMessageFactoryType) ReadMessageHeader(instance *OrderExecutedWithPriceSizeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x40 {
		return 0, fmt.Errorf("message length incorrect. For Message OrderExecutedWithPriceSizeMessage was expected 0x40, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x43 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message OrderExecutedWithPriceSizeMessage was expected 0x43, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self OrderExecutedWithPriceSizeMessageFactoryType) ReadMessageData(instance *OrderExecutedWithPriceSizeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: OrderID, Type: uint64
	instance.OrderID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: ExecutedQuantity, Type: uint32
	instance.ExecutedQuantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: DisplayQuantity, Type: uint32
	instance.DisplayQuantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: TradeID, Type: uint64
	instance.TradeID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Printable, Type: byte
	instance.Printable, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: LastOptPx, Type: float64
	instance.LastOptPx, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: Volatility, Type: float64
	instance.Volatility, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 9, Member Name: UnderlyingReferencePrice, Type: float64
	instance.UnderlyingReferencePrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self OrderExecutedWithPriceSizeMessageFactoryType) ReadMessageInFull(instance *OrderExecutedWithPriceSizeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// OrderExecutedWithPriceSizeMessage writer
func Write_OrderExecutedWithPriceSizeMessage(stream Streams.IMitchWriter, value *OrderExecutedWithPriceSizeMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(64)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(67)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: OrderID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.OrderID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: ExecutedQuantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.ExecutedQuantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: DisplayQuantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.DisplayQuantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: TradeID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.TradeID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Printable, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Printable)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: LastOptPx, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.LastOptPx)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: Volatility, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Volatility)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 9, Member Name: UnderlyingReferencePrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.UnderlyingReferencePrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type TradeMessageFlags struct {
	Flags byte
}

func NewTradeMessageFlags() TradeMessageFlags {
	return TradeMessageFlags{}
}

// TradeMessageFlags Declaration TypeCode: 0x8fa6f67d
// TradeMessageFlags writer
func Write_TradeMessageFlags(stream Streams.IMitchWriter, value TradeMessageFlags) (byteCount int, err error) {
	return stream.Write_byte(byte(value.Flags))
}

// TradeMessageFlags reader
func Read_TradeMessageFlags(stream Streams.IMitchReader) (value TradeMessageFlags, byteCount int, err error) {
	value = NewTradeMessageFlags()
	value.Flags, byteCount, err = stream.Read_byte()
	return value, byteCount, err
}

type TradeMessageSubBook byte

//noinspection ALL
const (
	TradeMessageSubBook_Regular          = 1  // default value: byte(1)
	TradeMessageSubBook_NegotiatedTrades = 11 // default value: byte(11)
)

type TradeMessageSubBookFactoryType struct {
}

var TradeMessageSubBookFactory TradeMessageSubBookFactoryType = TradeMessageSubBookFactoryType{}

func (self TradeMessageSubBookFactoryType) ReadValue(stream Streams.IMitchReader) (TradeMessageSubBook, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return TradeMessageSubBook(0), 0, err
	}
	return TradeMessageSubBook(b), n, nil
}

// TradeMessageSubBook Declaration TypeCode: 0x09c46d4d
// TradeMessageSubBook writer
func Write_TradeMessageSubBook(stream Streams.IMitchWriter, value TradeMessageSubBook) (int, error) {
	return stream.Write_byte(byte(value))
}

// TradeMessage Declaration TypeCode: 0xb1ce427e
type TradeMessage struct {
	Nanosecond               uint32              `json:"Nanosecond" xml:"Nanosecond,attr"`
	ExecutedQuantity         uint32              `json:"ExecutedQuantity" xml:"ExecutedQuantity,attr"`
	InstrumentID             uint32              `json:"InstrumentID" xml:"InstrumentID,attr"`
	Reserved01               byte                `json:"Reserved01" xml:"Reserved01,attr"`
	Reserved02               byte                `json:"Reserved02" xml:"Reserved02,attr"`
	Price                    float64             `json:"Price" xml:"Price,attr"`
	TradeID                  uint64              `json:"TradeID" xml:"TradeID,attr"`
	SubBook                  TradeMessageSubBook `json:"SubBook" xml:"SubBook,attr"`
	Flags                    TradeMessageFlags   `json:"Flags" xml:"Flags,attr"`
	TradeSubType             string              `json:"TradeSubType" xml:"TradeSubType,attr"`
	LastOptPx                float64             `json:"LastOptPx" xml:"LastOptPx,attr"`
	Volatility               float64             `json:"Volatility" xml:"Volatility,attr"`
	UnderlyingReferencePrice float64             `json:"UnderlyingReferencePrice" xml:"UnderlyingReferencePrice,attr"`
}

type TradeMessageFactoryType struct {
}

var TradeMessageFactory TradeMessageFactoryType = TradeMessageFactoryType{}

const TradeMessageMessageType byte = 0x50 //80
const TradeMessageMessageLength uint16 = 63

func (self TradeMessageFactoryType) New() (*TradeMessage, error) {
	return &TradeMessage{}, nil
}

func (self TradeMessageFactoryType) ReadMessageHeader(instance *TradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x3f {
		return 0, fmt.Errorf("message length incorrect. For Message TradeMessage was expected 0x3f, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x50 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message TradeMessage was expected 0x50, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self TradeMessageFactoryType) ReadMessageData(instance *TradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: ExecutedQuantity, Type: uint32
	instance.ExecutedQuantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Reserved01, Type: byte
	instance.Reserved01, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: Reserved02, Type: byte
	instance.Reserved02, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: TradeID, Type: uint64
	instance.TradeID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: SubBook, Type: TradeMessageSubBook
	instance.SubBook, n, err = TradeMessageSubBookFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: Flags, Type: TradeMessageFlags
	instance.Flags, n, err = Read_TradeMessageFlags(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 9, Member Name: TradeSubType, Type: string
	instance.TradeSubType, n, err = stream.Read_string(4)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 10, Member Name: LastOptPx, Type: float64
	instance.LastOptPx, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 11, Member Name: Volatility, Type: float64
	instance.Volatility, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 12, Member Name: UnderlyingReferencePrice, Type: float64
	instance.UnderlyingReferencePrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self TradeMessageFactoryType) ReadMessageInFull(instance *TradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// TradeMessage writer
func Write_TradeMessage(stream Streams.IMitchWriter, value *TradeMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(63)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(80)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: ExecutedQuantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.ExecutedQuantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Reserved01, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: Reserved02, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved02)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: TradeID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.TradeID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: SubBook, Type: TradeMessageSubBook
	//
	//
	n, err = stream.Write_byte(byte(value.SubBook))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: Flags, Type: TradeMessageFlags
	//
	//
	n, err = Write_TradeMessageFlags(stream, value.Flags)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 9, Member Name: TradeSubType, Type: string
	//
	//
	n, err = stream.Write_string(value.TradeSubType, 4)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 10, Member Name: LastOptPx, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.LastOptPx)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 11, Member Name: Volatility, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Volatility)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 12, Member Name: UnderlyingReferencePrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.UnderlyingReferencePrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// AuctionTradeMessage Declaration TypeCode: 0x8569a219
type AuctionTradeMessage struct {
	Nanosecond               uint32  `json:"Nanosecond" xml:"Nanosecond,attr"`
	Quantity                 uint32  `json:"Quantity" xml:"Quantity,attr"`
	InstrumentID             uint32  `json:"InstrumentID" xml:"InstrumentID,attr"`
	Reserved01               byte    `json:"Reserved01" xml:"Reserved01,attr"`
	Reserved02               byte    `json:"Reserved02" xml:"Reserved02,attr"`
	Price                    float64 `json:"Price" xml:"Price,attr"`
	TradeID                  uint64  `json:"TradeID" xml:"TradeID,attr"`
	AuctionType              byte    `json:"AuctionType" xml:"AuctionType,attr"`
	LastOptPx                float64 `json:"LastOptPx" xml:"LastOptPx,attr"`
	Volatility               float64 `json:"Volatility" xml:"Volatility,attr"`
	UnderlyingReferencePrice float64 `json:"UnderlyingReferencePrice" xml:"UnderlyingReferencePrice,attr"`
}

type AuctionTradeMessageFactoryType struct {
}

var AuctionTradeMessageFactory AuctionTradeMessageFactoryType = AuctionTradeMessageFactoryType{}

const AuctionTradeMessageMessageType byte = 0x51 //81
const AuctionTradeMessageMessageLength uint16 = 58

func (self AuctionTradeMessageFactoryType) New() (*AuctionTradeMessage, error) {
	return &AuctionTradeMessage{}, nil
}

func (self AuctionTradeMessageFactoryType) ReadMessageHeader(instance *AuctionTradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x3a {
		return 0, fmt.Errorf("message length incorrect. For Message AuctionTradeMessage was expected 0x3a, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x51 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message AuctionTradeMessage was expected 0x51, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self AuctionTradeMessageFactoryType) ReadMessageData(instance *AuctionTradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: Quantity, Type: uint32
	instance.Quantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Reserved01, Type: byte
	instance.Reserved01, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: Reserved02, Type: byte
	instance.Reserved02, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: TradeID, Type: uint64
	instance.TradeID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: AuctionType, Type: byte
	instance.AuctionType, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: LastOptPx, Type: float64
	instance.LastOptPx, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 9, Member Name: Volatility, Type: float64
	instance.Volatility, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 10, Member Name: UnderlyingReferencePrice, Type: float64
	instance.UnderlyingReferencePrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self AuctionTradeMessageFactoryType) ReadMessageInFull(instance *AuctionTradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// AuctionTradeMessage writer
func Write_AuctionTradeMessage(stream Streams.IMitchWriter, value *AuctionTradeMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(58)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(81)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: Quantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Quantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Reserved01, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: Reserved02, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved02)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: TradeID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.TradeID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: AuctionType, Type: byte
	//
	//
	n, err = stream.Write_byte(value.AuctionType)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: LastOptPx, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.LastOptPx)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 9, Member Name: Volatility, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Volatility)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 10, Member Name: UnderlyingReferencePrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.UnderlyingReferencePrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// OffBookTradeMessage Declaration TypeCode: 0xa7b5c913
type OffBookTradeMessage struct {
	Nanosecond               uint32    `json:"Nanosecond" xml:"Nanosecond,attr"`
	ExecutedQuantity         uint32    `json:"ExecutedQuantity" xml:"ExecutedQuantity,attr"`
	InstrumentID             uint32    `json:"InstrumentID" xml:"InstrumentID,attr"`
	Reserved01               byte      `json:"Reserved01" xml:"Reserved01,attr"`
	Reserved02               byte      `json:"Reserved02" xml:"Reserved02,attr"`
	Price                    float64   `json:"Price" xml:"Price,attr"`
	TradeID                  uint64    `json:"TradeID" xml:"TradeID,attr"`
	OffBookTradeType         string    `json:"OffBookTradeType" xml:"OffBookTradeType,attr"`
	TradeTime                time.Time `json:"TradeTime" xml:"TradeTime,attr"`
	TradeDate                time.Time `json:"TradeDate" xml:"TradeDate,attr"`
	LastOptPx                float64   `json:"LastOptPx" xml:"LastOptPx,attr"`
	Volatility               float64   `json:"Volatility" xml:"Volatility,attr"`
	UnderlyingReferencePrice float64   `json:"UnderlyingReferencePrice" xml:"UnderlyingReferencePrice,attr"`
}

type OffBookTradeMessageFactoryType struct {
}

var OffBookTradeMessageFactory OffBookTradeMessageFactoryType = OffBookTradeMessageFactoryType{}

const OffBookTradeMessageMessageType byte = 0x78 //120
const OffBookTradeMessageMessageLength uint16 = 77

func (self OffBookTradeMessageFactoryType) New() (*OffBookTradeMessage, error) {
	return &OffBookTradeMessage{}, nil
}

func (self OffBookTradeMessageFactoryType) ReadMessageHeader(instance *OffBookTradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x4d {
		return 0, fmt.Errorf("message length incorrect. For Message OffBookTradeMessage was expected 0x4d, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x78 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message OffBookTradeMessage was expected 0x78, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self OffBookTradeMessageFactoryType) ReadMessageData(instance *OffBookTradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: ExecutedQuantity, Type: uint32
	instance.ExecutedQuantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Reserved01, Type: byte
	instance.Reserved01, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: Reserved02, Type: byte
	instance.Reserved02, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: TradeID, Type: uint64
	instance.TradeID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: OffBookTradeType, Type: string
	instance.OffBookTradeType, n, err = stream.Read_string(4)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: TradeTime, Type: Time
	instance.TradeTime, n, err = stream.Read_mitch_time()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 9, Member Name: TradeDate, Type: Time
	instance.TradeDate, n, err = stream.Read_mitch_date()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 10, Member Name: LastOptPx, Type: float64
	instance.LastOptPx, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 11, Member Name: Volatility, Type: float64
	instance.Volatility, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 12, Member Name: UnderlyingReferencePrice, Type: float64
	instance.UnderlyingReferencePrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self OffBookTradeMessageFactoryType) ReadMessageInFull(instance *OffBookTradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// OffBookTradeMessage writer
func Write_OffBookTradeMessage(stream Streams.IMitchWriter, value *OffBookTradeMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(77)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(120)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: ExecutedQuantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.ExecutedQuantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Reserved01, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: Reserved02, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved02)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: TradeID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.TradeID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: OffBookTradeType, Type: string
	//
	//
	n, err = stream.Write_string(value.OffBookTradeType, 4)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: TradeTime, Type: Time
	//
	//
	n, err = stream.Write_mitch_time(value.TradeTime)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 9, Member Name: TradeDate, Type: Time
	//
	//
	n, err = stream.Write_mitch_date(value.TradeDate)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 10, Member Name: LastOptPx, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.LastOptPx)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 11, Member Name: Volatility, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Volatility)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 12, Member Name: UnderlyingReferencePrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.UnderlyingReferencePrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// TradeBreakMessage Declaration TypeCode: 0x6c216472
type TradeBreakMessage struct {
	Nanosecond uint32 `json:"Nanosecond" xml:"Nanosecond,attr"`
	TradeID    uint64 `json:"TradeID" xml:"TradeID,attr"`
	TradeType  byte   `json:"TradeType" xml:"TradeType,attr"`
}

type TradeBreakMessageFactoryType struct {
}

var TradeBreakMessageFactory TradeBreakMessageFactoryType = TradeBreakMessageFactoryType{}

const TradeBreakMessageMessageType byte = 0x42 //66
const TradeBreakMessageMessageLength uint16 = 16

func (self TradeBreakMessageFactoryType) New() (*TradeBreakMessage, error) {
	return &TradeBreakMessage{}, nil
}

func (self TradeBreakMessageFactoryType) ReadMessageHeader(instance *TradeBreakMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x10 {
		return 0, fmt.Errorf("message length incorrect. For Message TradeBreakMessage was expected 0x10, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x42 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message TradeBreakMessage was expected 0x42, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self TradeBreakMessageFactoryType) ReadMessageData(instance *TradeBreakMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: TradeID, Type: uint64
	instance.TradeID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: TradeType, Type: byte
	instance.TradeType, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self TradeBreakMessageFactoryType) ReadMessageInFull(instance *TradeBreakMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// TradeBreakMessage writer
func Write_TradeBreakMessage(stream Streams.IMitchWriter, value *TradeBreakMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(16)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(66)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: TradeID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.TradeID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: TradeType, Type: byte
	//
	//
	n, err = stream.Write_byte(value.TradeType)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type RecoveryTradeMessageFlags struct {
	Flags byte
}

func NewRecoveryTradeMessageFlags() RecoveryTradeMessageFlags {
	return RecoveryTradeMessageFlags{}
}

// RecoveryTradeMessageFlags Declaration TypeCode: 0x041c16c8
// RecoveryTradeMessageFlags writer
func Write_RecoveryTradeMessageFlags(stream Streams.IMitchWriter, value RecoveryTradeMessageFlags) (byteCount int, err error) {
	return stream.Write_byte(byte(value.Flags))
}

// RecoveryTradeMessageFlags reader
func Read_RecoveryTradeMessageFlags(stream Streams.IMitchReader) (value RecoveryTradeMessageFlags, byteCount int, err error) {
	value = NewRecoveryTradeMessageFlags()
	value.Flags, byteCount, err = stream.Read_byte()
	return value, byteCount, err
}

type RecoveryTradeMessageSubBook byte

//noinspection ALL
const (
	RecoveryTradeMessageSubBook_Regular          = 1  // default value: byte(1)
	RecoveryTradeMessageSubBook_NegotiatedTrades = 11 // default value: byte(11)
)

type RecoveryTradeMessageSubBookFactoryType struct {
}

var RecoveryTradeMessageSubBookFactory RecoveryTradeMessageSubBookFactoryType = RecoveryTradeMessageSubBookFactoryType{}

func (self RecoveryTradeMessageSubBookFactoryType) ReadValue(stream Streams.IMitchReader) (RecoveryTradeMessageSubBook, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return RecoveryTradeMessageSubBook(0), 0, err
	}
	return RecoveryTradeMessageSubBook(b), n, nil
}

// RecoveryTradeMessageSubBook Declaration TypeCode: 0x8d246869
// RecoveryTradeMessageSubBook writer
func Write_RecoveryTradeMessageSubBook(stream Streams.IMitchWriter, value RecoveryTradeMessageSubBook) (int, error) {
	return stream.Write_byte(byte(value))
}

// RecoveryTradeMessage Declaration TypeCode: 0x800fdbc2
type RecoveryTradeMessage struct {
	Nanosecond               uint32                      `json:"Nanosecond" xml:"Nanosecond,attr"`
	ExecutedQuantity         uint32                      `json:"ExecutedQuantity" xml:"ExecutedQuantity,attr"`
	InstrumentID             uint32                      `json:"InstrumentID" xml:"InstrumentID,attr"`
	Reserved01               byte                        `json:"Reserved01" xml:"Reserved01,attr"`
	Reserved02               byte                        `json:"Reserved02" xml:"Reserved02,attr"`
	Price                    float64                     `json:"Price" xml:"Price,attr"`
	TradeID                  uint64                      `json:"TradeID" xml:"TradeID,attr"`
	AuctionType              byte                        `json:"AuctionType" xml:"AuctionType,attr"`
	OffBookRFQTradeType      string                      `json:"OffBookRFQTradeType" xml:"OffBookRFQTradeType,attr"`
	TradeTime                time.Time                   `json:"TradeTime" xml:"TradeTime,attr"`
	TradeDate                time.Time                   `json:"TradeDate" xml:"TradeDate,attr"`
	ActionType               byte                        `json:"ActionType" xml:"ActionType,attr"`
	SubBook                  RecoveryTradeMessageSubBook `json:"SubBook" xml:"SubBook,attr"`
	Flags                    RecoveryTradeMessageFlags   `json:"Flags" xml:"Flags,attr"`
	LastOptPx                float64                     `json:"LastOptPx" xml:"LastOptPx,attr"`
	Volatility               float64                     `json:"Volatility" xml:"Volatility,attr"`
	UnderlyingReferencePrice float64                     `json:"UnderlyingReferencePrice" xml:"UnderlyingReferencePrice,attr"`
}

type RecoveryTradeMessageFactoryType struct {
}

var RecoveryTradeMessageFactory RecoveryTradeMessageFactoryType = RecoveryTradeMessageFactoryType{}

const RecoveryTradeMessageMessageType byte = 0x76 //118
const RecoveryTradeMessageMessageLength uint16 = 81

func (self RecoveryTradeMessageFactoryType) New() (*RecoveryTradeMessage, error) {
	return &RecoveryTradeMessage{}, nil
}

func (self RecoveryTradeMessageFactoryType) ReadMessageHeader(instance *RecoveryTradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x51 {
		return 0, fmt.Errorf("message length incorrect. For Message RecoveryTradeMessage was expected 0x51, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x76 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message RecoveryTradeMessage was expected 0x76, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self RecoveryTradeMessageFactoryType) ReadMessageData(instance *RecoveryTradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: ExecutedQuantity, Type: uint32
	instance.ExecutedQuantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Reserved01, Type: byte
	instance.Reserved01, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: Reserved02, Type: byte
	instance.Reserved02, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: TradeID, Type: uint64
	instance.TradeID, n, err = stream.Read_uint64()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: AuctionType, Type: byte
	instance.AuctionType, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: OffBookRFQTradeType, Type: string
	instance.OffBookRFQTradeType, n, err = stream.Read_string(4)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 9, Member Name: TradeTime, Type: Time
	instance.TradeTime, n, err = stream.Read_mitch_time()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 10, Member Name: TradeDate, Type: Time
	instance.TradeDate, n, err = stream.Read_mitch_date()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 11, Member Name: ActionType, Type: byte
	instance.ActionType, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 12, Member Name: SubBook, Type: RecoveryTradeMessageSubBook
	instance.SubBook, n, err = RecoveryTradeMessageSubBookFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 13, Member Name: Flags, Type: RecoveryTradeMessageFlags
	instance.Flags, n, err = Read_RecoveryTradeMessageFlags(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 14, Member Name: LastOptPx, Type: float64
	instance.LastOptPx, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 15, Member Name: Volatility, Type: float64
	instance.Volatility, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 16, Member Name: UnderlyingReferencePrice, Type: float64
	instance.UnderlyingReferencePrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self RecoveryTradeMessageFactoryType) ReadMessageInFull(instance *RecoveryTradeMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// RecoveryTradeMessage writer
func Write_RecoveryTradeMessage(stream Streams.IMitchWriter, value *RecoveryTradeMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(81)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(118)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: ExecutedQuantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.ExecutedQuantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Reserved01, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: Reserved02, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved02)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: TradeID, Type: uint64
	//
	//
	n, err = stream.Write_uint64(value.TradeID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: AuctionType, Type: byte
	//
	//
	n, err = stream.Write_byte(value.AuctionType)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: OffBookRFQTradeType, Type: string
	//
	//
	n, err = stream.Write_string(value.OffBookRFQTradeType, 4)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 9, Member Name: TradeTime, Type: Time
	//
	//
	n, err = stream.Write_mitch_time(value.TradeTime)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 10, Member Name: TradeDate, Type: Time
	//
	//
	n, err = stream.Write_mitch_date(value.TradeDate)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 11, Member Name: ActionType, Type: byte
	//
	//
	n, err = stream.Write_byte(value.ActionType)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 12, Member Name: SubBook, Type: RecoveryTradeMessageSubBook
	//
	//
	n, err = stream.Write_byte(byte(value.SubBook))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 13, Member Name: Flags, Type: RecoveryTradeMessageFlags
	//
	//
	n, err = Write_RecoveryTradeMessageFlags(stream, value.Flags)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 14, Member Name: LastOptPx, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.LastOptPx)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 15, Member Name: Volatility, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Volatility)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 16, Member Name: UnderlyingReferencePrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.UnderlyingReferencePrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// AuctionInfoMessage Declaration TypeCode: 0x12617b15
type AuctionInfoMessage struct {
	Nanosecond         uint32  `json:"Nanosecond" xml:"Nanosecond,attr"`
	PairedQuantity     uint32  `json:"PairedQuantity" xml:"PairedQuantity,attr"`
	Reserved01         uint32  `json:"Reserved01" xml:"Reserved01,attr"`
	ImbalanceDirection byte    `json:"ImbalanceDirection" xml:"ImbalanceDirection,attr"`
	InstrumentID       uint32  `json:"InstrumentID" xml:"InstrumentID,attr"`
	Reserved02         byte    `json:"Reserved02" xml:"Reserved02,attr"`
	Reserved03         byte    `json:"Reserved03" xml:"Reserved03,attr"`
	Price              float64 `json:"Price" xml:"Price,attr"`
	AuctionType        byte    `json:"AuctionType" xml:"AuctionType,attr"`
}

type AuctionInfoMessageFactoryType struct {
}

var AuctionInfoMessageFactory AuctionInfoMessageFactoryType = AuctionInfoMessageFactoryType{}

const AuctionInfoMessageMessageType byte = 0x49 //73
const AuctionInfoMessageMessageLength uint16 = 31

func (self AuctionInfoMessageFactoryType) New() (*AuctionInfoMessage, error) {
	return &AuctionInfoMessage{}, nil
}

func (self AuctionInfoMessageFactoryType) ReadMessageHeader(instance *AuctionInfoMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x1f {
		return 0, fmt.Errorf("message length incorrect. For Message AuctionInfoMessage was expected 0x1f, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x49 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message AuctionInfoMessage was expected 0x49, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self AuctionInfoMessageFactoryType) ReadMessageData(instance *AuctionInfoMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: PairedQuantity, Type: uint32
	instance.PairedQuantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: Reserved01, Type: uint32
	instance.Reserved01, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: ImbalanceDirection, Type: byte
	instance.ImbalanceDirection, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Reserved02, Type: byte
	instance.Reserved02, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: Reserved03, Type: byte
	instance.Reserved03, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: AuctionType, Type: byte
	instance.AuctionType, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self AuctionInfoMessageFactoryType) ReadMessageInFull(instance *AuctionInfoMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// AuctionInfoMessage writer
func Write_AuctionInfoMessage(stream Streams.IMitchWriter, value *AuctionInfoMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(31)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(73)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: PairedQuantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.PairedQuantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: Reserved01, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: ImbalanceDirection, Type: byte
	//
	//
	n, err = stream.Write_byte(value.ImbalanceDirection)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Reserved02, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved02)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: Reserved03, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved03)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: AuctionType, Type: byte
	//
	//
	n, err = stream.Write_byte(value.AuctionType)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type TStatisticsMessageOpenCloseIndicator byte

//noinspection ALL
const (
	TStatisticsMessageOpenCloseIndicator_UT             = 65 // char value: 'A'
	TStatisticsMessageOpenCloseIndicator_AT             = 66 // char value: 'B'
	TStatisticsMessageOpenCloseIndicator_MidOfBBO       = 67 // char value: 'C'
	TStatisticsMessageOpenCloseIndicator_LastAT         = 68 // char value: 'D'
	TStatisticsMessageOpenCloseIndicator_LastUT         = 69 // char value: 'E'
	TStatisticsMessageOpenCloseIndicator_Manual         = 70 // char value: 'F'
	TStatisticsMessageOpenCloseIndicator_Vwap           = 72 // char value: 'H'
	TStatisticsMessageOpenCloseIndicator_PreviousClose  = 73 // char value: 'I'
	TStatisticsMessageOpenCloseIndicator_Zero           = 74 // char value: 'J'
	TStatisticsMessageOpenCloseIndicator_BestBid        = 85 // char value: 'U'
	TStatisticsMessageOpenCloseIndicator_BestOffer      = 86 // char value: 'V'
	TStatisticsMessageOpenCloseIndicator_ReferencePrice = 89 // char value: 'Y'
)

type TStatisticsMessageOpenCloseIndicatorFactoryType struct {
}

var TStatisticsMessageOpenCloseIndicatorFactory TStatisticsMessageOpenCloseIndicatorFactoryType = TStatisticsMessageOpenCloseIndicatorFactoryType{}

func (self TStatisticsMessageOpenCloseIndicatorFactoryType) ReadValue(stream Streams.IMitchReader) (TStatisticsMessageOpenCloseIndicator, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return TStatisticsMessageOpenCloseIndicator(0), 0, err
	}
	return TStatisticsMessageOpenCloseIndicator(b), n, nil
}

// TStatisticsMessageOpenCloseIndicator Declaration TypeCode: 0x9313c377
// TStatisticsMessageOpenCloseIndicator writer
func Write_TStatisticsMessageOpenCloseIndicator(stream Streams.IMitchWriter, value TStatisticsMessageOpenCloseIndicator) (int, error) {
	return stream.Write_byte(byte(value))
}

type TStatisticsMessageSubBook byte

//noinspection ALL
const (
	TStatisticsMessageSubBook_Regular       = 1 // default value: byte(1)
	TStatisticsMessageSubBook_OffBook       = 2 // default value: byte(2)
	TStatisticsMessageSubBook_BulletinBoard = 9 // default value: byte(9)
)

type TStatisticsMessageSubBookFactoryType struct {
}

var TStatisticsMessageSubBookFactory TStatisticsMessageSubBookFactoryType = TStatisticsMessageSubBookFactoryType{}

func (self TStatisticsMessageSubBookFactoryType) ReadValue(stream Streams.IMitchReader) (TStatisticsMessageSubBook, int, error) {
	var n int
	var b byte
	var err error
	b, n, err = stream.Read_byte()
	if err != nil {
		return TStatisticsMessageSubBook(0), 0, err
	}
	return TStatisticsMessageSubBook(b), n, nil
}

// TStatisticsMessageSubBook Declaration TypeCode: 0x7362a31a
// TStatisticsMessageSubBook writer
func Write_TStatisticsMessageSubBook(stream Streams.IMitchWriter, value TStatisticsMessageSubBook) (int, error) {
	return stream.Write_byte(byte(value))
}

// StatisticsMessage Declaration TypeCode: 0xc87d7e5a
type StatisticsMessage struct {
	Nanosecond         uint32                               `json:"Nanosecond" xml:"Nanosecond,attr"`
	InstrumentID       uint32                               `json:"InstrumentID" xml:"InstrumentID,attr"`
	Reserved01         byte                                 `json:"Reserved01" xml:"Reserved01,attr"`
	Reserved02         byte                                 `json:"Reserved02" xml:"Reserved02,attr"`
	StatisticType      string                               `json:"StatisticType" xml:"StatisticType,attr"`
	Price              float64                              `json:"Price" xml:"Price,attr"`
	OpenCloseIndicator TStatisticsMessageOpenCloseIndicator `json:"OpenCloseIndicator" xml:"OpenCloseIndicator,attr"`
	SubBook            TStatisticsMessageSubBook            `json:"SubBook" xml:"SubBook,attr"`
}

type StatisticsMessageFactoryType struct {
}

var StatisticsMessageFactory StatisticsMessageFactoryType = StatisticsMessageFactoryType{}

const StatisticsMessageMessageType byte = 0x77 //119
const StatisticsMessageMessageLength uint16 = 24

func (self StatisticsMessageFactoryType) New() (*StatisticsMessage, error) {
	return &StatisticsMessage{}, nil
}

func (self StatisticsMessageFactoryType) ReadMessageHeader(instance *StatisticsMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x18 {
		return 0, fmt.Errorf("message length incorrect. For Message StatisticsMessage was expected 0x18, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x77 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message StatisticsMessage was expected 0x77, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self StatisticsMessageFactoryType) ReadMessageData(instance *StatisticsMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: Reserved01, Type: byte
	instance.Reserved01, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Reserved02, Type: byte
	instance.Reserved02, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: StatisticType, Type: string
	instance.StatisticType, n, err = stream.Read_string(1)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: OpenCloseIndicator, Type: TStatisticsMessageOpenCloseIndicator
	instance.OpenCloseIndicator, n, err = TStatisticsMessageOpenCloseIndicatorFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: SubBook, Type: TStatisticsMessageSubBook
	instance.SubBook, n, err = TStatisticsMessageSubBookFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self StatisticsMessageFactoryType) ReadMessageInFull(instance *StatisticsMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// StatisticsMessage writer
func Write_StatisticsMessage(stream Streams.IMitchWriter, value *StatisticsMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(24)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(119)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: Reserved01, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Reserved02, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Reserved02)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: StatisticType, Type: string
	//
	//
	n, err = stream.Write_string(value.StatisticType, 1)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: OpenCloseIndicator, Type: TStatisticsMessageOpenCloseIndicator
	//
	//
	n, err = stream.Write_byte(byte(value.OpenCloseIndicator))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: SubBook, Type: TStatisticsMessageSubBook
	//
	//
	n, err = stream.Write_byte(byte(value.SubBook))
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// ExtendedStatisticsMessage Declaration TypeCode: 0xff7aeb65
type ExtendedStatisticsMessage struct {
	Nanosecond            uint32                    `json:"Nanosecond" xml:"Nanosecond,attr"`
	InstrumentID          uint32                    `json:"InstrumentID" xml:"InstrumentID,attr"`
	HighPrice             float64                   `json:"HighPrice" xml:"HighPrice,attr"`
	LowPrice              float64                   `json:"LowPrice" xml:"LowPrice,attr"`
	Vwap                  float64                   `json:"Vwap" xml:"Vwap,attr"`
	Volume                uint32                    `json:"Volume" xml:"Volume,attr"`
	Turnover              float64                   `json:"Turnover" xml:"Turnover,attr"`
	NumberOfTrades        uint32                    `json:"NumberOfTrades" xml:"NumberOfTrades,attr"`
	Reserved01            string                    `json:"Reserved01" xml:"Reserved01,attr"`
	SubBook               TStatisticsMessageSubBook `json:"SubBook" xml:"SubBook,attr"`
	NotionalExposure      float64                   `json:"NotionalExposure" xml:"NotionalExposure,attr"`
	NotionalDeltaExposure float64                   `json:"NotionalDeltaExposure" xml:"NotionalDeltaExposure,attr"`
	OpenInterest          float64                   `json:"OpenInterest" xml:"OpenInterest,attr"`
}

type ExtendedStatisticsMessageFactoryType struct {
}

var ExtendedStatisticsMessageFactory ExtendedStatisticsMessageFactoryType = ExtendedStatisticsMessageFactoryType{}

const ExtendedStatisticsMessageMessageType byte = 0x80 //128
const ExtendedStatisticsMessageMessageLength uint16 = 84

func (self ExtendedStatisticsMessageFactoryType) New() (*ExtendedStatisticsMessage, error) {
	return &ExtendedStatisticsMessage{}, nil
}

func (self ExtendedStatisticsMessageFactoryType) ReadMessageHeader(instance *ExtendedStatisticsMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x54 {
		return 0, fmt.Errorf("message length incorrect. For Message ExtendedStatisticsMessage was expected 0x54, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x80 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message ExtendedStatisticsMessage was expected 0x80, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self ExtendedStatisticsMessageFactoryType) ReadMessageData(instance *ExtendedStatisticsMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: HighPrice, Type: float64
	instance.HighPrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: LowPrice, Type: float64
	instance.LowPrice, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: Vwap, Type: float64
	instance.Vwap, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Volume, Type: uint32
	instance.Volume, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: Turnover, Type: float64
	instance.Turnover, n, err = stream.Read_mitch_price04()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: NumberOfTrades, Type: uint32
	instance.NumberOfTrades, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: Reserved01, Type: string
	instance.Reserved01, n, err = stream.Read_string(8)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 9, Member Name: SubBook, Type: TStatisticsMessageSubBook
	instance.SubBook, n, err = TStatisticsMessageSubBookFactory.ReadValue(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 10, Member Name: NotionalExposure, Type: float64
	instance.NotionalExposure, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 11, Member Name: NotionalDeltaExposure, Type: float64
	instance.NotionalDeltaExposure, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 12, Member Name: OpenInterest, Type: float64
	instance.OpenInterest, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self ExtendedStatisticsMessageFactoryType) ReadMessageInFull(instance *ExtendedStatisticsMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// ExtendedStatisticsMessage writer
func Write_ExtendedStatisticsMessage(stream Streams.IMitchWriter, value *ExtendedStatisticsMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(84)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(128)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: HighPrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.HighPrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: LowPrice, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.LowPrice)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: Vwap, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Vwap)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Volume, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Volume)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: Turnover, Type: float64
	//
	//
	n, err = stream.Write_mitch_price04(value.Turnover)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: NumberOfTrades, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.NumberOfTrades)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: Reserved01, Type: string
	//
	//
	n, err = stream.Write_string(value.Reserved01, 8)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 9, Member Name: SubBook, Type: TStatisticsMessageSubBook
	//
	//
	n, err = stream.Write_byte(byte(value.SubBook))
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 10, Member Name: NotionalExposure, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.NotionalExposure)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 11, Member Name: NotionalDeltaExposure, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.NotionalDeltaExposure)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 12, Member Name: OpenInterest, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.OpenInterest)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

// NewsMessage Declaration TypeCode: 0x8a0c79e9
type NewsMessage struct {
	Nanosecond  uint32    `json:"Nanosecond" xml:"Nanosecond,attr"`
	Time        time.Time `json:"Time" xml:"Time,attr"`
	Urgency     byte      `json:"Urgency" xml:"Urgency,attr"`
	Headline    string    `json:"Headline" xml:"Headline,attr"`
	Text        string    `json:"Text" xml:"Text,attr"`
	Instruments string    `json:"Instruments" xml:"Instruments,attr"`
	Underlyings string    `json:"Underlyings" xml:"Underlyings,attr"`
}

type NewsMessageFactoryType struct {
}

var NewsMessageFactory NewsMessageFactoryType = NewsMessageFactoryType{}

const NewsMessageMessageType byte = 0x75 //117
const NewsMessageMessageLength uint16 = 1066

func (self NewsMessageFactoryType) New() (*NewsMessage, error) {
	return &NewsMessage{}, nil
}

func (self NewsMessageFactoryType) ReadMessageHeader(instance *NewsMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x42a {
		return 0, fmt.Errorf("message length incorrect. For Message NewsMessage was expected 0x42a, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x75 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message NewsMessage was expected 0x75, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self NewsMessageFactoryType) ReadMessageData(instance *NewsMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: Time, Type: Time
	instance.Time, n, err = stream.Read_mitch_time()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: Urgency, Type: byte
	instance.Urgency, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: Headline, Type: string
	instance.Headline, n, err = stream.Read_string(100)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: Text, Type: string
	instance.Text, n, err = stream.Read_string(750)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Instruments, Type: string
	instance.Instruments, n, err = stream.Read_string(100)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: Underlyings, Type: string
	instance.Underlyings, n, err = stream.Read_string(100)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self NewsMessageFactoryType) ReadMessageInFull(instance *NewsMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// NewsMessage writer
func Write_NewsMessage(stream Streams.IMitchWriter, value *NewsMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(1066)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(117)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: Time, Type: Time
	//
	//
	n, err = stream.Write_mitch_time(value.Time)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: Urgency, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Urgency)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: Headline, Type: string
	//
	//
	n, err = stream.Write_string(value.Headline, 100)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: Text, Type: string
	//
	//
	n, err = stream.Write_string(value.Text, 750)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Instruments, Type: string
	//
	//
	n, err = stream.Write_string(value.Instruments, 100)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: Underlyings, Type: string
	//
	//
	n, err = stream.Write_string(value.Underlyings, 100)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type TopOfBookMessageSubBook struct {
	Flags byte
}

func NewTopOfBookMessageSubBook() TopOfBookMessageSubBook {
	return TopOfBookMessageSubBook{}
}

// TopOfBookMessageSubBook Declaration TypeCode: 0xb416f305
// TopOfBookMessageSubBook writer
func Write_TopOfBookMessageSubBook(stream Streams.IMitchWriter, value TopOfBookMessageSubBook) (byteCount int, err error) {
	return stream.Write_byte(byte(value.Flags))
}

// TopOfBookMessageSubBook reader
func Read_TopOfBookMessageSubBook(stream Streams.IMitchReader) (value TopOfBookMessageSubBook, byteCount int, err error) {
	value = NewTopOfBookMessageSubBook()
	value.Flags, byteCount, err = stream.Read_byte()
	return value, byteCount, err
}

// TopOfBookMessage Declaration TypeCode: 0xac36e385
type TopOfBookMessage struct {
	Nanosecond          uint32                  `json:"Nanosecond" xml:"Nanosecond,attr"`
	InstrumentID        uint32                  `json:"InstrumentID" xml:"InstrumentID,attr"`
	ReserveField        uint16                  `json:"ReserveField" xml:"ReserveField,attr"`
	SubBook             TopOfBookMessageSubBook `json:"SubBook" xml:"SubBook,attr"`
	Action              byte                    `json:"Action" xml:"Action,attr"`
	Side                byte                    `json:"Side" xml:"Side,attr"`
	Price               float64                 `json:"Price" xml:"Price,attr"`
	Quantity            uint32                  `json:"Quantity" xml:"Quantity,attr"`
	MarketOrderQuantity uint32                  `json:"MarketOrderQuantity" xml:"MarketOrderQuantity,attr"`
	Reserved01          uint16                  `json:"Reserved01" xml:"Reserved01,attr"`
}

type TopOfBookMessageFactoryType struct {
}

var TopOfBookMessageFactory TopOfBookMessageFactoryType = TopOfBookMessageFactoryType{}

const TopOfBookMessageMessageType byte = 0x71 //113
const TopOfBookMessageMessageLength uint16 = 34

func (self TopOfBookMessageFactoryType) New() (*TopOfBookMessage, error) {
	return &TopOfBookMessage{}, nil
}

func (self TopOfBookMessageFactoryType) ReadMessageHeader(instance *TopOfBookMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	value, n, err := stream.Read_uint16()
	if value != 0 && value != 0x22 {
		return 0, fmt.Errorf("message length incorrect. For Message TopOfBookMessage was expected 0x22, but 0x%x was found.)", value)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n

	b, n, err := stream.Read_byte()
	if b != 0x71 {
		return 0, fmt.Errorf("message type numbers does not match up. For Message TopOfBookMessage was expected 0x71, but 0x%x was found.)", b)
	}
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

func (self TopOfBookMessageFactoryType) ReadMessageData(instance *TopOfBookMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	var n int
	// Index: 0, Member Name: Nanosecond, Type: uint32
	instance.Nanosecond, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 1, Member Name: InstrumentID, Type: uint32
	instance.InstrumentID, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 2, Member Name: ReserveField, Type: uint16
	instance.ReserveField, n, err = stream.Read_uint16()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 3, Member Name: SubBook, Type: TopOfBookMessageSubBook
	instance.SubBook, n, err = Read_TopOfBookMessageSubBook(stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 4, Member Name: Action, Type: byte
	instance.Action, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 5, Member Name: Side, Type: byte
	instance.Side, n, err = stream.Read_byte()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 6, Member Name: Price, Type: float64
	instance.Price, n, err = stream.Read_mitch_price08()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 7, Member Name: Quantity, Type: uint32
	instance.Quantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 8, Member Name: MarketOrderQuantity, Type: uint32
	instance.MarketOrderQuantity, n, err = stream.Read_uint32()
	if err != nil {
		return 0, err
	}
	byteCount += n

	// Index: 9, Member Name: Reserved01, Type: uint16
	instance.Reserved01, n, err = stream.Read_uint16()
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

func (self TopOfBookMessageFactoryType) ReadMessageInFull(instance *TopOfBookMessage, stream Streams.IMitchReader) (byteCount int, err error) {
	n, err := self.ReadMessageHeader(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	n, err = self.ReadMessageData(instance, stream)
	if err != nil {
		return 0, err
	}
	byteCount += n

	return byteCount, nil
}

// TopOfBookMessage writer
func Write_TopOfBookMessage(stream Streams.IMitchWriter, value *TopOfBookMessage) (byteCount int, err error) {
	var n int
	n, err = stream.Write_uint16(34)
	if err != nil {
		return 0, err
	}
	byteCount += n
	n, err = stream.Write_byte(113)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 0, Member Name: Nanosecond, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Nanosecond)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 1, Member Name: InstrumentID, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.InstrumentID)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 2, Member Name: ReserveField, Type: uint16
	//
	//
	n, err = stream.Write_uint16(value.ReserveField)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 3, Member Name: SubBook, Type: TopOfBookMessageSubBook
	//
	//
	n, err = Write_TopOfBookMessageSubBook(stream, value.SubBook)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 4, Member Name: Action, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Action)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 5, Member Name: Side, Type: byte
	//
	//
	n, err = stream.Write_byte(value.Side)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 6, Member Name: Price, Type: float64
	//
	//
	n, err = stream.Write_mitch_price08(value.Price)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 7, Member Name: Quantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.Quantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 8, Member Name: MarketOrderQuantity, Type: uint32
	//
	//
	n, err = stream.Write_uint32(value.MarketOrderQuantity)
	if err != nil {
		return 0, err
	}
	byteCount += n
	//
	//
	// Index: 9, Member Name: Reserved01, Type: uint16
	//
	//
	n, err = stream.Write_uint16(value.Reserved01)
	if err != nil {
		return 0, err
	}
	byteCount += n
	return byteCount, nil
}

type CreateAndReadDataNotFound struct {
	MessageType byte
}

func (self *CreateAndReadDataNotFound) Error() string {
	return fmt.Sprintf("Could not find message type %v", self.MessageType)
}
func CreateAndReadData(messageType byte, length uint16, stream Streams.IMitchReader) (interface{}, int, error) {
	switch messageType {
	case TimeMessageMessageType:
		message, err := TimeMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := TimeMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case SystemEventMessageMessageType:
		message, err := SystemEventMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := SystemEventMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case SymbolDirectoryMessageMessageType:
		message, err := SymbolDirectoryMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := SymbolDirectoryMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case SymbolStatusMessageMessageType:
		message, err := SymbolStatusMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := SymbolStatusMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case AddOrderMessageMessageType:
		message, err := AddOrderMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := AddOrderMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case AddAttributedOrderMessageMessageType:
		message, err := AddAttributedOrderMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := AddAttributedOrderMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case OrderDeletedMessageMessageType:
		message, err := OrderDeletedMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := OrderDeletedMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case OrderModifiedMessageMessageType:
		message, err := OrderModifiedMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := OrderModifiedMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case OrderBookClearMessageMessageType:
		message, err := OrderBookClearMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := OrderBookClearMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case OrderExecutedMessageMessageType:
		message, err := OrderExecutedMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := OrderExecutedMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case OrderExecutedWithPriceSizeMessageMessageType:
		message, err := OrderExecutedWithPriceSizeMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := OrderExecutedWithPriceSizeMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case TradeMessageMessageType:
		message, err := TradeMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := TradeMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case AuctionTradeMessageMessageType:
		message, err := AuctionTradeMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := AuctionTradeMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case OffBookTradeMessageMessageType:
		message, err := OffBookTradeMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := OffBookTradeMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case TradeBreakMessageMessageType:
		message, err := TradeBreakMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := TradeBreakMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case RecoveryTradeMessageMessageType:
		message, err := RecoveryTradeMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := RecoveryTradeMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case AuctionInfoMessageMessageType:
		message, err := AuctionInfoMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := AuctionInfoMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case StatisticsMessageMessageType:
		message, err := StatisticsMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := StatisticsMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case ExtendedStatisticsMessageMessageType:
		message, err := ExtendedStatisticsMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := ExtendedStatisticsMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case NewsMessageMessageType:
		message, err := NewsMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := NewsMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	case TopOfBookMessageMessageType:
		message, err := TopOfBookMessageFactory.New()
		if err != nil {
			return nil, 0, err
		}
		n, err := TopOfBookMessageFactory.ReadMessageData(message, stream)
		if err != nil {
			return nil, 0, err
		}
		return message, n, nil
		break

	}
	return nil, 0, &CreateAndReadDataNotFound{MessageType: messageType}
}
