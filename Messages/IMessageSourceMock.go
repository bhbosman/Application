// Code generated by MockGen. DO NOT EDIT.
// Source: IMessageSource.go

// Package Messages is a generated GoMock package.
package Messages

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIMessageSource is a mock of IMessageSource interface
type MockIMessageSource struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageSourceMockRecorder
}

// MockIMessageSourceMockRecorder is the mock recorder for MockIMessageSource
type MockIMessageSourceMockRecorder struct {
	mock *MockIMessageSource
}

// NewMockIMessageSource creates a new mock instance
func NewMockIMessageSource(ctrl *gomock.Controller) *MockIMessageSource {
	mock := &MockIMessageSource{ctrl: ctrl}
	mock.recorder = &MockIMessageSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMessageSource) EXPECT() *MockIMessageSourceMockRecorder {
	return m.recorder
}

// Sequence mocks base method
func (m *MockIMessageSource) Sequence() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sequence")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Sequence indicates an expected call of Sequence
func (mr *MockIMessageSourceMockRecorder) Sequence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sequence", reflect.TypeOf((*MockIMessageSource)(nil).Sequence))
}

// Source mocks base method
func (m *MockIMessageSource) Source() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(string)
	return ret0
}

// Source indicates an expected call of Source
func (mr *MockIMessageSourceMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockIMessageSource)(nil).Source))
}

// FeedName mocks base method
func (m *MockIMessageSource) FeedName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeedName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FeedName indicates an expected call of FeedName
func (mr *MockIMessageSourceMockRecorder) FeedName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedName", reflect.TypeOf((*MockIMessageSource)(nil).FeedName))
}
